
kernel.elf:     format de fichier elf64-littleaarch64


Déassemblage de la section .text :

0000000000010000 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   10000:	d10083ff 	sub	sp, sp, #0x20
   10004:	f9000fe0 	str	x0, [sp, #24]
   10008:	f9000be1 	str	x1, [sp, #16]
   1000c:	f90007e2 	str	x2, [sp, #8]
	/* Setup the initial stack of the task.  The stack is set exactly as
	expected by the portRESTORE_CONTEXT() macro. */

	/* First all the general purpose registers. */
	pxTopOfStack--;
   10010:	f9400fe0 	ldr	x0, [sp, #24]
   10014:	d1002000 	sub	x0, x0, #0x8
   10018:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x0101010101010101ULL;	/* R1 */
   1001c:	f9400fe0 	ldr	x0, [sp, #24]
   10020:	b200c3e1 	mov	x1, #0x101010101010101     	// #72340172838076673
   10024:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   10028:	f9400fe0 	ldr	x0, [sp, #24]
   1002c:	d1002000 	sub	x0, x0, #0x8
   10030:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
   10034:	f94007e1 	ldr	x1, [sp, #8]
   10038:	f9400fe0 	ldr	x0, [sp, #24]
   1003c:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   10040:	f9400fe0 	ldr	x0, [sp, #24]
   10044:	d1002000 	sub	x0, x0, #0x8
   10048:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x0303030303030303ULL;	/* R3 */
   1004c:	f9400fe0 	ldr	x0, [sp, #24]
   10050:	b200c7e1 	mov	x1, #0x303030303030303     	// #217020518514230019
   10054:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   10058:	f9400fe0 	ldr	x0, [sp, #24]
   1005c:	d1002000 	sub	x0, x0, #0x8
   10060:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x0202020202020202ULL;	/* R2 */
   10064:	f9400fe0 	ldr	x0, [sp, #24]
   10068:	b207c3e1 	mov	x1, #0x202020202020202     	// #144680345676153346
   1006c:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   10070:	f9400fe0 	ldr	x0, [sp, #24]
   10074:	d1002000 	sub	x0, x0, #0x8
   10078:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x0505050505050505ULL;	/* R5 */
   1007c:	f9400fe0 	ldr	x0, [sp, #24]
   10080:	d280a0a1 	mov	x1, #0x505                 	// #1285
   10084:	f2a0a0a1 	movk	x1, #0x505, lsl #16
   10088:	f2c0a0a1 	movk	x1, #0x505, lsl #32
   1008c:	f2e0a0a1 	movk	x1, #0x505, lsl #48
   10090:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   10094:	f9400fe0 	ldr	x0, [sp, #24]
   10098:	d1002000 	sub	x0, x0, #0x8
   1009c:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x0404040404040404ULL;	/* R4 */
   100a0:	f9400fe0 	ldr	x0, [sp, #24]
   100a4:	b206c3e1 	mov	x1, #0x404040404040404     	// #289360691352306692
   100a8:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   100ac:	f9400fe0 	ldr	x0, [sp, #24]
   100b0:	d1002000 	sub	x0, x0, #0x8
   100b4:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x0707070707070707ULL;	/* R7 */
   100b8:	f9400fe0 	ldr	x0, [sp, #24]
   100bc:	b200cbe1 	mov	x1, #0x707070707070707     	// #506381209866536711
   100c0:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   100c4:	f9400fe0 	ldr	x0, [sp, #24]
   100c8:	d1002000 	sub	x0, x0, #0x8
   100cc:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x0606060606060606ULL;	/* R6 */
   100d0:	f9400fe0 	ldr	x0, [sp, #24]
   100d4:	b207c7e1 	mov	x1, #0x606060606060606     	// #434041037028460038
   100d8:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   100dc:	f9400fe0 	ldr	x0, [sp, #24]
   100e0:	d1002000 	sub	x0, x0, #0x8
   100e4:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x0909090909090909ULL;	/* R9 */
   100e8:	f9400fe0 	ldr	x0, [sp, #24]
   100ec:	d2812121 	mov	x1, #0x909                 	// #2313
   100f0:	f2a12121 	movk	x1, #0x909, lsl #16
   100f4:	f2c12121 	movk	x1, #0x909, lsl #32
   100f8:	f2e12121 	movk	x1, #0x909, lsl #48
   100fc:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   10100:	f9400fe0 	ldr	x0, [sp, #24]
   10104:	d1002000 	sub	x0, x0, #0x8
   10108:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x0808080808080808ULL;	/* R8 */
   1010c:	f9400fe0 	ldr	x0, [sp, #24]
   10110:	b205c3e1 	mov	x1, #0x808080808080808     	// #578721382704613384
   10114:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   10118:	f9400fe0 	ldr	x0, [sp, #24]
   1011c:	d1002000 	sub	x0, x0, #0x8
   10120:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x1111111111111111ULL;	/* R11 */
   10124:	f9400fe0 	ldr	x0, [sp, #24]
   10128:	b200e3e1 	mov	x1, #0x1111111111111111    	// #1229782938247303441
   1012c:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   10130:	f9400fe0 	ldr	x0, [sp, #24]
   10134:	d1002000 	sub	x0, x0, #0x8
   10138:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x1010101010101010ULL;	/* R10 */
   1013c:	f9400fe0 	ldr	x0, [sp, #24]
   10140:	b204c3e1 	mov	x1, #0x1010101010101010    	// #1157442765409226768
   10144:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   10148:	f9400fe0 	ldr	x0, [sp, #24]
   1014c:	d1002000 	sub	x0, x0, #0x8
   10150:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x1313131313131313ULL;	/* R13 */
   10154:	f9400fe0 	ldr	x0, [sp, #24]
   10158:	d2826261 	mov	x1, #0x1313                	// #4883
   1015c:	f2a26261 	movk	x1, #0x1313, lsl #16
   10160:	f2c26261 	movk	x1, #0x1313, lsl #32
   10164:	f2e26261 	movk	x1, #0x1313, lsl #48
   10168:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   1016c:	f9400fe0 	ldr	x0, [sp, #24]
   10170:	d1002000 	sub	x0, x0, #0x8
   10174:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x1212121212121212ULL;	/* R12 */
   10178:	f9400fe0 	ldr	x0, [sp, #24]
   1017c:	d2824241 	mov	x1, #0x1212                	// #4626
   10180:	f2a24241 	movk	x1, #0x1212, lsl #16
   10184:	f2c24241 	movk	x1, #0x1212, lsl #32
   10188:	f2e24241 	movk	x1, #0x1212, lsl #48
   1018c:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   10190:	f9400fe0 	ldr	x0, [sp, #24]
   10194:	d1002000 	sub	x0, x0, #0x8
   10198:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x1515151515151515ULL;	/* R15 */
   1019c:	f9400fe0 	ldr	x0, [sp, #24]
   101a0:	d282a2a1 	mov	x1, #0x1515                	// #5397
   101a4:	f2a2a2a1 	movk	x1, #0x1515, lsl #16
   101a8:	f2c2a2a1 	movk	x1, #0x1515, lsl #32
   101ac:	f2e2a2a1 	movk	x1, #0x1515, lsl #48
   101b0:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   101b4:	f9400fe0 	ldr	x0, [sp, #24]
   101b8:	d1002000 	sub	x0, x0, #0x8
   101bc:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x1414141414141414ULL;	/* R14 */
   101c0:	f9400fe0 	ldr	x0, [sp, #24]
   101c4:	d2828281 	mov	x1, #0x1414                	// #5140
   101c8:	f2a28281 	movk	x1, #0x1414, lsl #16
   101cc:	f2c28281 	movk	x1, #0x1414, lsl #32
   101d0:	f2e28281 	movk	x1, #0x1414, lsl #48
   101d4:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   101d8:	f9400fe0 	ldr	x0, [sp, #24]
   101dc:	d1002000 	sub	x0, x0, #0x8
   101e0:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x1717171717171717ULL;	/* R17 */
   101e4:	f9400fe0 	ldr	x0, [sp, #24]
   101e8:	d282e2e1 	mov	x1, #0x1717                	// #5911
   101ec:	f2a2e2e1 	movk	x1, #0x1717, lsl #16
   101f0:	f2c2e2e1 	movk	x1, #0x1717, lsl #32
   101f4:	f2e2e2e1 	movk	x1, #0x1717, lsl #48
   101f8:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   101fc:	f9400fe0 	ldr	x0, [sp, #24]
   10200:	d1002000 	sub	x0, x0, #0x8
   10204:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x1616161616161616ULL;	/* R16 */
   10208:	f9400fe0 	ldr	x0, [sp, #24]
   1020c:	d282c2c1 	mov	x1, #0x1616                	// #5654
   10210:	f2a2c2c1 	movk	x1, #0x1616, lsl #16
   10214:	f2c2c2c1 	movk	x1, #0x1616, lsl #32
   10218:	f2e2c2c1 	movk	x1, #0x1616, lsl #48
   1021c:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   10220:	f9400fe0 	ldr	x0, [sp, #24]
   10224:	d1002000 	sub	x0, x0, #0x8
   10228:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x1919191919191919ULL;	/* R19 */
   1022c:	f9400fe0 	ldr	x0, [sp, #24]
   10230:	d2832321 	mov	x1, #0x1919                	// #6425
   10234:	f2a32321 	movk	x1, #0x1919, lsl #16
   10238:	f2c32321 	movk	x1, #0x1919, lsl #32
   1023c:	f2e32321 	movk	x1, #0x1919, lsl #48
   10240:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   10244:	f9400fe0 	ldr	x0, [sp, #24]
   10248:	d1002000 	sub	x0, x0, #0x8
   1024c:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x1818181818181818ULL;	/* R18 */
   10250:	f9400fe0 	ldr	x0, [sp, #24]
   10254:	b205c7e1 	mov	x1, #0x1818181818181818    	// #1736164148113840152
   10258:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   1025c:	f9400fe0 	ldr	x0, [sp, #24]
   10260:	d1002000 	sub	x0, x0, #0x8
   10264:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x2121212121212121ULL;	/* R21 */
   10268:	f9400fe0 	ldr	x0, [sp, #24]
   1026c:	d2842421 	mov	x1, #0x2121                	// #8481
   10270:	f2a42421 	movk	x1, #0x2121, lsl #16
   10274:	f2c42421 	movk	x1, #0x2121, lsl #32
   10278:	f2e42421 	movk	x1, #0x2121, lsl #48
   1027c:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   10280:	f9400fe0 	ldr	x0, [sp, #24]
   10284:	d1002000 	sub	x0, x0, #0x8
   10288:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x2020202020202020ULL;	/* R20 */
   1028c:	f9400fe0 	ldr	x0, [sp, #24]
   10290:	b203c3e1 	mov	x1, #0x2020202020202020    	// #2314885530818453536
   10294:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   10298:	f9400fe0 	ldr	x0, [sp, #24]
   1029c:	d1002000 	sub	x0, x0, #0x8
   102a0:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x2323232323232323ULL;	/* R23 */
   102a4:	f9400fe0 	ldr	x0, [sp, #24]
   102a8:	d2846461 	mov	x1, #0x2323                	// #8995
   102ac:	f2a46461 	movk	x1, #0x2323, lsl #16
   102b0:	f2c46461 	movk	x1, #0x2323, lsl #32
   102b4:	f2e46461 	movk	x1, #0x2323, lsl #48
   102b8:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   102bc:	f9400fe0 	ldr	x0, [sp, #24]
   102c0:	d1002000 	sub	x0, x0, #0x8
   102c4:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x2222222222222222ULL;	/* R22 */
   102c8:	f9400fe0 	ldr	x0, [sp, #24]
   102cc:	b203e3e1 	mov	x1, #0x2222222222222222    	// #2459565876494606882
   102d0:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   102d4:	f9400fe0 	ldr	x0, [sp, #24]
   102d8:	d1002000 	sub	x0, x0, #0x8
   102dc:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x2525252525252525ULL;	/* R25 */
   102e0:	f9400fe0 	ldr	x0, [sp, #24]
   102e4:	d284a4a1 	mov	x1, #0x2525                	// #9509
   102e8:	f2a4a4a1 	movk	x1, #0x2525, lsl #16
   102ec:	f2c4a4a1 	movk	x1, #0x2525, lsl #32
   102f0:	f2e4a4a1 	movk	x1, #0x2525, lsl #48
   102f4:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   102f8:	f9400fe0 	ldr	x0, [sp, #24]
   102fc:	d1002000 	sub	x0, x0, #0x8
   10300:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x2424242424242424ULL;	/* R24 */
   10304:	f9400fe0 	ldr	x0, [sp, #24]
   10308:	d2848481 	mov	x1, #0x2424                	// #9252
   1030c:	f2a48481 	movk	x1, #0x2424, lsl #16
   10310:	f2c48481 	movk	x1, #0x2424, lsl #32
   10314:	f2e48481 	movk	x1, #0x2424, lsl #48
   10318:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   1031c:	f9400fe0 	ldr	x0, [sp, #24]
   10320:	d1002000 	sub	x0, x0, #0x8
   10324:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x2727272727272727ULL;	/* R27 */
   10328:	f9400fe0 	ldr	x0, [sp, #24]
   1032c:	d284e4e1 	mov	x1, #0x2727                	// #10023
   10330:	f2a4e4e1 	movk	x1, #0x2727, lsl #16
   10334:	f2c4e4e1 	movk	x1, #0x2727, lsl #32
   10338:	f2e4e4e1 	movk	x1, #0x2727, lsl #48
   1033c:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   10340:	f9400fe0 	ldr	x0, [sp, #24]
   10344:	d1002000 	sub	x0, x0, #0x8
   10348:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x2626262626262626ULL;	/* R26 */
   1034c:	f9400fe0 	ldr	x0, [sp, #24]
   10350:	d284c4c1 	mov	x1, #0x2626                	// #9766
   10354:	f2a4c4c1 	movk	x1, #0x2626, lsl #16
   10358:	f2c4c4c1 	movk	x1, #0x2626, lsl #32
   1035c:	f2e4c4c1 	movk	x1, #0x2626, lsl #48
   10360:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   10364:	f9400fe0 	ldr	x0, [sp, #24]
   10368:	d1002000 	sub	x0, x0, #0x8
   1036c:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x2929292929292929ULL;	/* R29 */
   10370:	f9400fe0 	ldr	x0, [sp, #24]
   10374:	d2852521 	mov	x1, #0x2929                	// #10537
   10378:	f2a52521 	movk	x1, #0x2929, lsl #16
   1037c:	f2c52521 	movk	x1, #0x2929, lsl #32
   10380:	f2e52521 	movk	x1, #0x2929, lsl #48
   10384:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   10388:	f9400fe0 	ldr	x0, [sp, #24]
   1038c:	d1002000 	sub	x0, x0, #0x8
   10390:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = 0x2828282828282828ULL;	/* R28 */
   10394:	f9400fe0 	ldr	x0, [sp, #24]
   10398:	d2850501 	mov	x1, #0x2828                	// #10280
   1039c:	f2a50501 	movk	x1, #0x2828, lsl #16
   103a0:	f2c50501 	movk	x1, #0x2828, lsl #32
   103a4:	f2e50501 	movk	x1, #0x2828, lsl #48
   103a8:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   103ac:	f9400fe0 	ldr	x0, [sp, #24]
   103b0:	d1002000 	sub	x0, x0, #0x8
   103b4:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = ( StackType_t ) 0x00;	/* XZR - has no effect, used so there are an even number of registers. */
   103b8:	f9400fe0 	ldr	x0, [sp, #24]
   103bc:	f900001f 	str	xzr, [x0]
	pxTopOfStack--;
   103c0:	f9400fe0 	ldr	x0, [sp, #24]
   103c4:	d1002000 	sub	x0, x0, #0x8
   103c8:	f9000fe0 	str	x0, [sp, #24]
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R30 - procedure call link register. */
   103cc:	f9400fe0 	ldr	x0, [sp, #24]
   103d0:	f900001f 	str	xzr, [x0]
	pxTopOfStack--;
   103d4:	f9400fe0 	ldr	x0, [sp, #24]
   103d8:	d1002000 	sub	x0, x0, #0x8
   103dc:	f9000fe0 	str	x0, [sp, #24]

	*pxTopOfStack = portINITIAL_PSTATE;
   103e0:	f9400fe0 	ldr	x0, [sp, #24]
   103e4:	d2800181 	mov	x1, #0xc                   	// #12
   103e8:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   103ec:	f9400fe0 	ldr	x0, [sp, #24]
   103f0:	d1002000 	sub	x0, x0, #0x8
   103f4:	f9000fe0 	str	x0, [sp, #24]

	*pxTopOfStack = ( StackType_t ) pxCode; /* Exception return address. */
   103f8:	f9400be1 	ldr	x1, [sp, #16]
   103fc:	f9400fe0 	ldr	x0, [sp, #24]
   10400:	f9000001 	str	x1, [x0]
	pxTopOfStack--;
   10404:	f9400fe0 	ldr	x0, [sp, #24]
   10408:	d1002000 	sub	x0, x0, #0x8
   1040c:	f9000fe0 	str	x0, [sp, #24]

	/* The task will start with a critical nesting count of 0 as interrupts are
	enabled. */
	*pxTopOfStack = portNO_CRITICAL_NESTING;
   10410:	f9400fe0 	ldr	x0, [sp, #24]
   10414:	f900001f 	str	xzr, [x0]
	pxTopOfStack--;
   10418:	f9400fe0 	ldr	x0, [sp, #24]
   1041c:	d1002000 	sub	x0, x0, #0x8
   10420:	f9000fe0 	str	x0, [sp, #24]

	/* The task will start without a floating point context.  A task that uses
	the floating point hardware must call vPortTaskUsesFPU() before executing
	any floating point instructions. */
	*pxTopOfStack = portNO_FLOATING_POINT_CONTEXT;
   10424:	f9400fe0 	ldr	x0, [sp, #24]
   10428:	f900001f 	str	xzr, [x0]

	return pxTopOfStack;
   1042c:	f9400fe0 	ldr	x0, [sp, #24]
}
   10430:	910083ff 	add	sp, sp, #0x20
   10434:	d65f03c0 	ret

0000000000010438 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
   10438:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   1043c:	910003fd 	mov	x29, sp
	}
	#endif /* conifgASSERT_DEFINED */


	/* At the time of writing, the BSP only supports EL3. */
	__asm volatile ( "MRS %0, CurrentEL" : "=r" ( ulAPSR ) );
   10440:	d5384240 	mrs	x0, currentel
   10444:	b9001fa0 	str	w0, [x29, #28]
	ulAPSR &= portAPSR_MODE_BITS_MASK;
   10448:	b9401fa0 	ldr	w0, [x29, #28]
   1044c:	121e0400 	and	w0, w0, #0xc
   10450:	b9001fa0 	str	w0, [x29, #28]
	configASSERT( ulAPSR == portEL3 );

	if( ulAPSR == portEL3 )
   10454:	b9401fa0 	ldr	w0, [x29, #28]
   10458:	7100301f 	cmp	w0, #0xc
   1045c:	54000181 	b.ne	1048c <xPortStartScheduler+0x54>  // b.any
		/* Only continue if the binary point value is set to its lowest possible
		setting.  See the comments in vPortValidateInterruptPriority() below for
		more information. */
		configASSERT( ( portICCBPR_BINARY_POINT_REGISTER & portBINARY_POINT_BITS ) <= portMAX_BINARY_POINT_VALUE );

		if( ( portICCBPR_BINARY_POINT_REGISTER & portBINARY_POINT_BITS ) <= portMAX_BINARY_POINT_VALUE )
   10460:	d2820100 	mov	x0, #0x1008                	// #4104
   10464:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   10468:	b9400000 	ldr	w0, [x0]
   1046c:	12000400 	and	w0, w0, #0x3
   10470:	7100081f 	cmp	w0, #0x2
   10474:	540000c8 	b.hi	1048c <xPortStartScheduler+0x54>  // b.pmore
		{
			/* Interrupts are turned off in the CPU itself to ensure a tick does
			not execute	while the scheduler is being started.  Interrupts are
			automatically turned back on in the CPU when the first task starts
			executing. */
			portDISABLE_INTERRUPTS();
   10478:	d50342df 	msr	daifset, #0x2
   1047c:	d5033f9f 	dsb	sy
   10480:	d5033fdf 	isb

			/* Start the timer that generates the tick ISR. */
			configSETUP_TICK_INTERRUPT();
   10484:	94001358 	bl	151e4 <vSetupTickInterrupt>

			/* Start the first task executing. */
			vPortRestoreTaskContext();
   10488:	9400011e 	bl	10900 <vPortRestoreTaskContext>
		}
	}

	return 0;
   1048c:	d2800000 	mov	x0, #0x0                   	// #0
}
   10490:	a8c27bfd 	ldp	x29, x30, [sp], #32
   10494:	d65f03c0 	ret

0000000000010498 <vPortEndScheduler>:
void vPortEndScheduler( void )
{
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( ullCriticalNesting == 1000ULL );
}
   10498:	d503201f 	nop
   1049c:	d65f03c0 	ret

00000000000104a0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   104a0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   104a4:	910003fd 	mov	x29, sp
	/* Mask interrupts up to the max syscall interrupt priority. */
	uxPortSetInterruptMask();
   104a8:	94000068 	bl	10648 <uxPortSetInterruptMask>

	/* Now interrupts are disabled ullCriticalNesting can be accessed
	directly.  Increment ullCriticalNesting to keep a count of how many times
	portENTER_CRITICAL() has been called. */
	ullCriticalNesting++;
   104ac:	b0000020 	adrp	x0, 15000 <prvHeapInit+0x50>
   104b0:	91176000 	add	x0, x0, #0x5d8
   104b4:	f9400000 	ldr	x0, [x0]
   104b8:	91000401 	add	x1, x0, #0x1
   104bc:	b0000020 	adrp	x0, 15000 <prvHeapInit+0x50>
   104c0:	91176000 	add	x0, x0, #0x5d8
   104c4:	f9000001 	str	x1, [x0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( ullCriticalNesting == 1ULL )
   104c8:	b0000020 	adrp	x0, 15000 <prvHeapInit+0x50>
   104cc:	91176000 	add	x0, x0, #0x5d8
   104d0:	f9400000 	ldr	x0, [x0]
	{
		configASSERT( ullPortInterruptNesting == 0 );
	}
}
   104d4:	d503201f 	nop
   104d8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   104dc:	d65f03c0 	ret

00000000000104e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	if( ullCriticalNesting > portNO_CRITICAL_NESTING )
   104e0:	b0000020 	adrp	x0, 15000 <prvHeapInit+0x50>
   104e4:	91176000 	add	x0, x0, #0x5d8
   104e8:	f9400000 	ldr	x0, [x0]
   104ec:	f100001f 	cmp	x0, #0x0
   104f0:	54000320 	b.eq	10554 <vPortExitCritical+0x74>  // b.none
	{
		/* Decrement the nesting count as the critical section is being
		exited. */
		ullCriticalNesting--;
   104f4:	b0000020 	adrp	x0, 15000 <prvHeapInit+0x50>
   104f8:	91176000 	add	x0, x0, #0x5d8
   104fc:	f9400000 	ldr	x0, [x0]
   10500:	d1000401 	sub	x1, x0, #0x1
   10504:	b0000020 	adrp	x0, 15000 <prvHeapInit+0x50>
   10508:	91176000 	add	x0, x0, #0x5d8
   1050c:	f9000001 	str	x1, [x0]

		/* If the nesting level has reached zero then all interrupt
		priorities must be re-enabled. */
		if( ullCriticalNesting == portNO_CRITICAL_NESTING )
   10510:	b0000020 	adrp	x0, 15000 <prvHeapInit+0x50>
   10514:	91176000 	add	x0, x0, #0x5d8
   10518:	f9400000 	ldr	x0, [x0]
   1051c:	f100001f 	cmp	x0, #0x0
   10520:	540001a1 	b.ne	10554 <vPortExitCritical+0x74>  // b.any
		{
			/* Critical nesting has reached zero so all interrupt priorities
			should be unmasked. */
			portCLEAR_INTERRUPT_MASK();
   10524:	d50342df 	msr	daifset, #0x2
   10528:	d5033f9f 	dsb	sy
   1052c:	d5033fdf 	isb
   10530:	d2820080 	mov	x0, #0x1004                	// #4100
   10534:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   10538:	52801fe1 	mov	w1, #0xff                  	// #255
   1053c:	b9000001 	str	w1, [x0]
   10540:	d5033f9f 	dsb	sy
   10544:	d5033fdf 	isb
   10548:	d50342ff 	msr	daifclr, #0x2
   1054c:	d5033f9f 	dsb	sy
   10550:	d5033fdf 	isb
		}
	}
}
   10554:	d503201f 	nop
   10558:	d65f03c0 	ret

000000000001055c <FreeRTOS_Tick_Handler>:
/*-----------------------------------------------------------*/

void FreeRTOS_Tick_Handler( void )
{
   1055c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   10560:	910003fd 	mov	x29, sp
	/* Set interrupt mask before altering scheduler structures.   The tick
	handler runs at the lowest priority, so interrupts cannot already be masked,
	so there is no need to save and restore the current mask value.  It is
	necessary to turn off interrupts in the CPU itself while the ICCPMR is being
	updated. */
	portICCPMR_PRIORITY_MASK_REGISTER = ( uint32_t ) ( configMAX_API_CALL_INTERRUPT_PRIORITY << portPRIORITY_SHIFT );
   10564:	d2820080 	mov	x0, #0x1004                	// #4100
   10568:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   1056c:	52801101 	mov	w1, #0x88                  	// #136
   10570:	b9000001 	str	w1, [x0]
	__asm volatile (	"dsb sy		\n"
   10574:	d5033f9f 	dsb	sy
   10578:	d5033fdf 	isb
						"isb sy		\n" );

	/* Ok to enable interrupts after the interrupt source has been cleared. */
	configCLEAR_TICK_INTERRUPT();
	portENABLE_INTERRUPTS();
   1057c:	d50342ff 	msr	daifclr, #0x2
   10580:	d5033f9f 	dsb	sy
   10584:	d5033fdf 	isb

	/* Increment the RTOS tick. */
	if( xTaskIncrementTick() != pdFALSE )
   10588:	94000a07 	bl	12da4 <xTaskIncrementTick>
   1058c:	f100001f 	cmp	x0, #0x0
   10590:	540000a0 	b.eq	105a4 <FreeRTOS_Tick_Handler+0x48>  // b.none
	{
		ullPortYieldRequired = pdTRUE;
   10594:	b0000020 	adrp	x0, 15000 <prvHeapInit+0x50>
   10598:	911d6000 	add	x0, x0, #0x758
   1059c:	d2800021 	mov	x1, #0x1                   	// #1
   105a0:	f9000001 	str	x1, [x0]
	}

	/* Ensure all interrupt priorities are active again. */
	portCLEAR_INTERRUPT_MASK();
   105a4:	d50342df 	msr	daifset, #0x2
   105a8:	d5033f9f 	dsb	sy
   105ac:	d5033fdf 	isb
   105b0:	d2820080 	mov	x0, #0x1004                	// #4100
   105b4:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   105b8:	52801fe1 	mov	w1, #0xff                  	// #255
   105bc:	b9000001 	str	w1, [x0]
   105c0:	d5033f9f 	dsb	sy
   105c4:	d5033fdf 	isb
   105c8:	d50342ff 	msr	daifclr, #0x2
   105cc:	d5033f9f 	dsb	sy
   105d0:	d5033fdf 	isb
}
   105d4:	d503201f 	nop
   105d8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   105dc:	d65f03c0 	ret

00000000000105e0 <vPortTaskUsesFPU>:

void vPortTaskUsesFPU( void )
{
	/* A task is registering the fact that it needs an FPU context.  Set the
	FPU flag (which is saved as part of the task context). */
	ullPortTaskHasFPUContext = pdTRUE;
   105e0:	b0000020 	adrp	x0, 15000 <prvHeapInit+0x50>
   105e4:	911d4000 	add	x0, x0, #0x750
   105e8:	d2800021 	mov	x1, #0x1                   	// #1
   105ec:	f9000001 	str	x1, [x0]

	/* Consider initialising the FPSR here - but probably not necessary in
	AArch64. */
}
   105f0:	d503201f 	nop
   105f4:	d65f03c0 	ret

00000000000105f8 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

void vPortClearInterruptMask( UBaseType_t uxNewMaskValue )
{
   105f8:	d10043ff 	sub	sp, sp, #0x10
   105fc:	f90007e0 	str	x0, [sp, #8]
	if( uxNewMaskValue == pdFALSE )
   10600:	f94007e0 	ldr	x0, [sp, #8]
   10604:	f100001f 	cmp	x0, #0x0
   10608:	540001a1 	b.ne	1063c <vPortClearInterruptMask+0x44>  // b.any
	{
		portCLEAR_INTERRUPT_MASK();
   1060c:	d50342df 	msr	daifset, #0x2
   10610:	d5033f9f 	dsb	sy
   10614:	d5033fdf 	isb
   10618:	d2820080 	mov	x0, #0x1004                	// #4100
   1061c:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   10620:	52801fe1 	mov	w1, #0xff                  	// #255
   10624:	b9000001 	str	w1, [x0]
   10628:	d5033f9f 	dsb	sy
   1062c:	d5033fdf 	isb
   10630:	d50342ff 	msr	daifclr, #0x2
   10634:	d5033f9f 	dsb	sy
   10638:	d5033fdf 	isb
	}
}
   1063c:	d503201f 	nop
   10640:	910043ff 	add	sp, sp, #0x10
   10644:	d65f03c0 	ret

0000000000010648 <uxPortSetInterruptMask>:
/*-----------------------------------------------------------*/

UBaseType_t uxPortSetInterruptMask( void )
{
   10648:	d10043ff 	sub	sp, sp, #0x10
uint32_t ulReturn;

	/* Interrupt in the CPU must be turned off while the ICCPMR is being
	updated. */
	portDISABLE_INTERRUPTS();
   1064c:	d50342df 	msr	daifset, #0x2
   10650:	d5033f9f 	dsb	sy
   10654:	d5033fdf 	isb
	if( portICCPMR_PRIORITY_MASK_REGISTER == ( uint32_t ) ( configMAX_API_CALL_INTERRUPT_PRIORITY << portPRIORITY_SHIFT ) )
   10658:	d2820080 	mov	x0, #0x1004                	// #4100
   1065c:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   10660:	b9400000 	ldr	w0, [x0]
   10664:	7102201f 	cmp	w0, #0x88
   10668:	54000081 	b.ne	10678 <uxPortSetInterruptMask+0x30>  // b.any
	{
		/* Interrupts were already masked. */
		ulReturn = pdTRUE;
   1066c:	52800020 	mov	w0, #0x1                   	// #1
   10670:	b9000fe0 	str	w0, [sp, #12]
   10674:	14000008 	b	10694 <uxPortSetInterruptMask+0x4c>
	}
	else
	{
		ulReturn = pdFALSE;
   10678:	b9000fff 	str	wzr, [sp, #12]
		portICCPMR_PRIORITY_MASK_REGISTER = ( uint32_t ) ( configMAX_API_CALL_INTERRUPT_PRIORITY << portPRIORITY_SHIFT );
   1067c:	d2820080 	mov	x0, #0x1004                	// #4100
   10680:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   10684:	52801101 	mov	w1, #0x88                  	// #136
   10688:	b9000001 	str	w1, [x0]
		__asm volatile (	"dsb sy		\n"
   1068c:	d5033f9f 	dsb	sy
   10690:	d5033fdf 	isb
							"isb sy		\n" );
	}
	portENABLE_INTERRUPTS();
   10694:	d50342ff 	msr	daifclr, #0x2
   10698:	d5033f9f 	dsb	sy
   1069c:	d5033fdf 	isb

	return ulReturn;
   106a0:	b9400fe0 	ldr	w0, [sp, #12]
}
   106a4:	910043ff 	add	sp, sp, #0x10
   106a8:	d65f03c0 	ret
	...

0000000000010700 <FreeRTOS_SWI_Handler>:
   10700:	d50040bf 	msr	spsel, #0x0
   10704:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
   10708:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   1070c:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
   10710:	a9bf1fe6 	stp	x6, x7, [sp, #-16]!
   10714:	a9bf27e8 	stp	x8, x9, [sp, #-16]!
   10718:	a9bf2fea 	stp	x10, x11, [sp, #-16]!
   1071c:	a9bf37ec 	stp	x12, x13, [sp, #-16]!
   10720:	a9bf3fee 	stp	x14, x15, [sp, #-16]!
   10724:	a9bf47f0 	stp	x16, x17, [sp, #-16]!
   10728:	a9bf4ff2 	stp	x18, x19, [sp, #-16]!
   1072c:	a9bf57f4 	stp	x20, x21, [sp, #-16]!
   10730:	a9bf5ff6 	stp	x22, x23, [sp, #-16]!
   10734:	a9bf67f8 	stp	x24, x25, [sp, #-16]!
   10738:	a9bf6ffa 	stp	x26, x27, [sp, #-16]!
   1073c:	a9bf77fc 	stp	x28, x29, [sp, #-16]!
   10740:	a9bf7ffe 	stp	x30, xzr, [sp, #-16]!
   10744:	d53e4003 	mrs	x3, spsr_el3
   10748:	d53e4022 	mrs	x2, elr_el3
   1074c:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   10750:	58002dc0 	ldr	x0, 10d08 <ullCriticalNestingConst>
   10754:	f9400003 	ldr	x3, [x0]
   10758:	58002dc0 	ldr	x0, 10d10 <ullPortTaskHasFPUContextConst>
   1075c:	f9400002 	ldr	x2, [x0]
   10760:	f100005f 	cmp	x2, #0x0
   10764:	54000220 	b.eq	107a8 <FreeRTOS_SWI_Handler+0xa8>  // b.none
   10768:	adbf07e0 	stp	q0, q1, [sp, #-32]!
   1076c:	adbf0fe2 	stp	q2, q3, [sp, #-32]!
   10770:	adbf17e4 	stp	q4, q5, [sp, #-32]!
   10774:	adbf1fe6 	stp	q6, q7, [sp, #-32]!
   10778:	adbf27e8 	stp	q8, q9, [sp, #-32]!
   1077c:	adbf2fea 	stp	q10, q11, [sp, #-32]!
   10780:	adbf37ec 	stp	q12, q13, [sp, #-32]!
   10784:	adbf3fee 	stp	q14, q15, [sp, #-32]!
   10788:	adbf47f0 	stp	q16, q17, [sp, #-32]!
   1078c:	adbf4ff2 	stp	q18, q19, [sp, #-32]!
   10790:	adbf57f4 	stp	q20, q21, [sp, #-32]!
   10794:	adbf5ff6 	stp	q22, q23, [sp, #-32]!
   10798:	adbf67f8 	stp	q24, q25, [sp, #-32]!
   1079c:	adbf6ffa 	stp	q26, q27, [sp, #-32]!
   107a0:	adbf77fc 	stp	q28, q29, [sp, #-32]!
   107a4:	adbf7ffe 	stp	q30, q31, [sp, #-32]!
   107a8:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   107ac:	58002aa0 	ldr	x0, 10d00 <pxCurrentTCBConst>
   107b0:	f9400001 	ldr	x1, [x0]
   107b4:	910003e0 	mov	x0, sp
   107b8:	f9000020 	str	x0, [x1]
   107bc:	d50041bf 	msr	spsel, #0x1
   107c0:	d53e5200 	mrs	x0, esr_el3
   107c4:	d35afc01 	lsr	x1, x0, #26
   107c8:	f1005c3f 	cmp	x1, #0x17
   107cc:	540007a1 	b.ne	108c0 <FreeRTOS_Abort>  // b.any
   107d0:	94000a5f 	bl	1314c <vTaskSwitchContext>
   107d4:	d50040bf 	msr	spsel, #0x0
   107d8:	58002940 	ldr	x0, 10d00 <pxCurrentTCBConst>
   107dc:	f9400001 	ldr	x1, [x0]
   107e0:	f9400020 	ldr	x0, [x1]
   107e4:	9100001f 	mov	sp, x0
   107e8:	a8c10fe2 	ldp	x2, x3, [sp], #16
   107ec:	580028e0 	ldr	x0, 10d08 <ullCriticalNestingConst>
   107f0:	d2801fe1 	mov	x1, #0xff                  	// #255
   107f4:	58002924 	ldr	x4, 10d18 <ullICCPMRConst>
   107f8:	f100007f 	cmp	x3, #0x0
   107fc:	f9400085 	ldr	x5, [x4]
   10800:	54000060 	b.eq	1080c <FreeRTOS_SWI_Handler+0x10c>  // b.none
   10804:	580028e6 	ldr	x6, 10d20 <ullMaxAPIPriorityMaskConst>
   10808:	f94000c1 	ldr	x1, [x6]
   1080c:	b90000a1 	str	w1, [x5]
   10810:	d5033f9f 	dsb	sy
   10814:	d5033fdf 	isb
   10818:	f9000003 	str	x3, [x0]
   1081c:	580027a0 	ldr	x0, 10d10 <ullPortTaskHasFPUContextConst>
   10820:	f9000002 	str	x2, [x0]
   10824:	f100005f 	cmp	x2, #0x0
   10828:	54000220 	b.eq	1086c <FreeRTOS_SWI_Handler+0x16c>  // b.none
   1082c:	acc17ffe 	ldp	q30, q31, [sp], #32
   10830:	acc177fc 	ldp	q28, q29, [sp], #32
   10834:	acc16ffa 	ldp	q26, q27, [sp], #32
   10838:	acc167f8 	ldp	q24, q25, [sp], #32
   1083c:	acc15ff6 	ldp	q22, q23, [sp], #32
   10840:	acc157f4 	ldp	q20, q21, [sp], #32
   10844:	acc14ff2 	ldp	q18, q19, [sp], #32
   10848:	acc147f0 	ldp	q16, q17, [sp], #32
   1084c:	acc13fee 	ldp	q14, q15, [sp], #32
   10850:	acc137ec 	ldp	q12, q13, [sp], #32
   10854:	acc12fea 	ldp	q10, q11, [sp], #32
   10858:	acc127e8 	ldp	q8, q9, [sp], #32
   1085c:	acc11fe6 	ldp	q6, q7, [sp], #32
   10860:	acc117e4 	ldp	q4, q5, [sp], #32
   10864:	acc10fe2 	ldp	q2, q3, [sp], #32
   10868:	acc107e0 	ldp	q0, q1, [sp], #32
   1086c:	a8c10fe2 	ldp	x2, x3, [sp], #16
   10870:	d51e4003 	msr	spsr_el3, x3
   10874:	d51e4022 	msr	elr_el3, x2
   10878:	a8c17ffe 	ldp	x30, xzr, [sp], #16
   1087c:	a8c177fc 	ldp	x28, x29, [sp], #16
   10880:	a8c16ffa 	ldp	x26, x27, [sp], #16
   10884:	a8c167f8 	ldp	x24, x25, [sp], #16
   10888:	a8c15ff6 	ldp	x22, x23, [sp], #16
   1088c:	a8c157f4 	ldp	x20, x21, [sp], #16
   10890:	a8c14ff2 	ldp	x18, x19, [sp], #16
   10894:	a8c147f0 	ldp	x16, x17, [sp], #16
   10898:	a8c13fee 	ldp	x14, x15, [sp], #16
   1089c:	a8c137ec 	ldp	x12, x13, [sp], #16
   108a0:	a8c12fea 	ldp	x10, x11, [sp], #16
   108a4:	a8c127e8 	ldp	x8, x9, [sp], #16
   108a8:	a8c11fe6 	ldp	x6, x7, [sp], #16
   108ac:	a8c117e4 	ldp	x4, x5, [sp], #16
   108b0:	a8c10fe2 	ldp	x2, x3, [sp], #16
   108b4:	a8c107e0 	ldp	x0, x1, [sp], #16
   108b8:	d50041bf 	msr	spsel, #0x1
   108bc:	d69f03e0 	eret

00000000000108c0 <FreeRTOS_Abort>:
   108c0:	14000000 	b	108c0 <FreeRTOS_Abort>
   108c4:	d503201f 	nop
   108c8:	d503201f 	nop
   108cc:	d503201f 	nop
   108d0:	d503201f 	nop
   108d4:	d503201f 	nop
   108d8:	d503201f 	nop
   108dc:	d503201f 	nop
   108e0:	d503201f 	nop
   108e4:	d503201f 	nop
   108e8:	d503201f 	nop
   108ec:	d503201f 	nop
   108f0:	d503201f 	nop
   108f4:	d503201f 	nop
   108f8:	d503201f 	nop
   108fc:	d503201f 	nop

0000000000010900 <vPortRestoreTaskContext>:
   10900:	58002281 	ldr	x1, 10d50 <ullICCEOIRConst+0xc>
   10904:	d51ec001 	msr	vbar_el3, x1
   10908:	d5033f9f 	dsb	sy
   1090c:	d5033fdf 	isb
   10910:	d50040bf 	msr	spsel, #0x0
   10914:	58001f60 	ldr	x0, 10d00 <pxCurrentTCBConst>
   10918:	f9400001 	ldr	x1, [x0]
   1091c:	f9400020 	ldr	x0, [x1]
   10920:	9100001f 	mov	sp, x0
   10924:	a8c10fe2 	ldp	x2, x3, [sp], #16
   10928:	58001f00 	ldr	x0, 10d08 <ullCriticalNestingConst>
   1092c:	d2801fe1 	mov	x1, #0xff                  	// #255
   10930:	58001f44 	ldr	x4, 10d18 <ullICCPMRConst>
   10934:	f100007f 	cmp	x3, #0x0
   10938:	f9400085 	ldr	x5, [x4]
   1093c:	54000060 	b.eq	10948 <vPortRestoreTaskContext+0x48>  // b.none
   10940:	58001f06 	ldr	x6, 10d20 <ullMaxAPIPriorityMaskConst>
   10944:	f94000c1 	ldr	x1, [x6]
   10948:	b90000a1 	str	w1, [x5]
   1094c:	d5033f9f 	dsb	sy
   10950:	d5033fdf 	isb
   10954:	f9000003 	str	x3, [x0]
   10958:	58001dc0 	ldr	x0, 10d10 <ullPortTaskHasFPUContextConst>
   1095c:	f9000002 	str	x2, [x0]
   10960:	f100005f 	cmp	x2, #0x0
   10964:	54000220 	b.eq	109a8 <vPortRestoreTaskContext+0xa8>  // b.none
   10968:	acc17ffe 	ldp	q30, q31, [sp], #32
   1096c:	acc177fc 	ldp	q28, q29, [sp], #32
   10970:	acc16ffa 	ldp	q26, q27, [sp], #32
   10974:	acc167f8 	ldp	q24, q25, [sp], #32
   10978:	acc15ff6 	ldp	q22, q23, [sp], #32
   1097c:	acc157f4 	ldp	q20, q21, [sp], #32
   10980:	acc14ff2 	ldp	q18, q19, [sp], #32
   10984:	acc147f0 	ldp	q16, q17, [sp], #32
   10988:	acc13fee 	ldp	q14, q15, [sp], #32
   1098c:	acc137ec 	ldp	q12, q13, [sp], #32
   10990:	acc12fea 	ldp	q10, q11, [sp], #32
   10994:	acc127e8 	ldp	q8, q9, [sp], #32
   10998:	acc11fe6 	ldp	q6, q7, [sp], #32
   1099c:	acc117e4 	ldp	q4, q5, [sp], #32
   109a0:	acc10fe2 	ldp	q2, q3, [sp], #32
   109a4:	acc107e0 	ldp	q0, q1, [sp], #32
   109a8:	a8c10fe2 	ldp	x2, x3, [sp], #16
   109ac:	d51e4003 	msr	spsr_el3, x3
   109b0:	d51e4022 	msr	elr_el3, x2
   109b4:	a8c17ffe 	ldp	x30, xzr, [sp], #16
   109b8:	a8c177fc 	ldp	x28, x29, [sp], #16
   109bc:	a8c16ffa 	ldp	x26, x27, [sp], #16
   109c0:	a8c167f8 	ldp	x24, x25, [sp], #16
   109c4:	a8c15ff6 	ldp	x22, x23, [sp], #16
   109c8:	a8c157f4 	ldp	x20, x21, [sp], #16
   109cc:	a8c14ff2 	ldp	x18, x19, [sp], #16
   109d0:	a8c147f0 	ldp	x16, x17, [sp], #16
   109d4:	a8c13fee 	ldp	x14, x15, [sp], #16
   109d8:	a8c137ec 	ldp	x12, x13, [sp], #16
   109dc:	a8c12fea 	ldp	x10, x11, [sp], #16
   109e0:	a8c127e8 	ldp	x8, x9, [sp], #16
   109e4:	a8c11fe6 	ldp	x6, x7, [sp], #16
   109e8:	a8c117e4 	ldp	x4, x5, [sp], #16
   109ec:	a8c10fe2 	ldp	x2, x3, [sp], #16
   109f0:	a8c107e0 	ldp	x0, x1, [sp], #16
   109f4:	d50041bf 	msr	spsel, #0x1
   109f8:	d69f03e0 	eret
   109fc:	d503201f 	nop

0000000000010a00 <FreeRTOS_IRQ_Handler>:
   10a00:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
   10a04:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   10a08:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
   10a0c:	a9bf1fe6 	stp	x6, x7, [sp, #-16]!
   10a10:	a9bf27e8 	stp	x8, x9, [sp, #-16]!
   10a14:	a9bf2fea 	stp	x10, x11, [sp, #-16]!
   10a18:	a9bf37ec 	stp	x12, x13, [sp, #-16]!
   10a1c:	a9bf3fee 	stp	x14, x15, [sp, #-16]!
   10a20:	a9bf47f0 	stp	x16, x17, [sp, #-16]!
   10a24:	a9bf4ff2 	stp	x18, x19, [sp, #-16]!
   10a28:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   10a2c:	d53e4003 	mrs	x3, spsr_el3
   10a30:	d53e4022 	mrs	x2, elr_el3
   10a34:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   10a38:	580017a5 	ldr	x5, 10d2c <ullPortInterruptNestingConst>
   10a3c:	f94000a1 	ldr	x1, [x5]
   10a40:	91000426 	add	x6, x1, #0x1
   10a44:	f90000a6 	str	x6, [x5]
   10a48:	a9bf17e1 	stp	x1, x5, [sp, #-16]!
   10a4c:	58001782 	ldr	x2, 10d3c <ullICCIARConst>
   10a50:	f9400043 	ldr	x3, [x2]
   10a54:	b9400060 	ldr	w0, [x3]
   10a58:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
   10a5c:	9400120b 	bl	15288 <vApplicationIRQHandler>
   10a60:	d50342df 	msr	daifset, #0x2
   10a64:	d5033f9f 	dsb	sy
   10a68:	d5033fdf 	isb
   10a6c:	a8c107e0 	ldp	x0, x1, [sp], #16
   10a70:	580016a4 	ldr	x4, 10d44 <ullICCEOIRConst>
   10a74:	f9400084 	ldr	x4, [x4]
   10a78:	b9000080 	str	w0, [x4]
   10a7c:	a8c117e1 	ldp	x1, x5, [sp], #16
   10a80:	f90000a1 	str	x1, [x5]
   10a84:	f100003f 	cmp	x1, #0x0
   10a88:	54001061 	b.ne	10c94 <Exit_IRQ_No_Context_Switch>  // b.any
   10a8c:	58001540 	ldr	x0, 10d34 <ullPortYieldRequiredConst>
   10a90:	f9400001 	ldr	x1, [x0]
   10a94:	f100003f 	cmp	x1, #0x0
   10a98:	54000fe0 	b.eq	10c94 <Exit_IRQ_No_Context_Switch>  // b.none
   10a9c:	d2800002 	mov	x2, #0x0                   	// #0
   10aa0:	f9000002 	str	x2, [x0]
   10aa4:	a8c117e4 	ldp	x4, x5, [sp], #16
   10aa8:	d51e4005 	msr	spsr_el3, x5
   10aac:	d51e4024 	msr	elr_el3, x4
   10ab0:	d5033f9f 	dsb	sy
   10ab4:	d5033fdf 	isb
   10ab8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   10abc:	a8c14ff2 	ldp	x18, x19, [sp], #16
   10ac0:	a8c147f0 	ldp	x16, x17, [sp], #16
   10ac4:	a8c13fee 	ldp	x14, x15, [sp], #16
   10ac8:	a8c137ec 	ldp	x12, x13, [sp], #16
   10acc:	a8c12fea 	ldp	x10, x11, [sp], #16
   10ad0:	a8c127e8 	ldp	x8, x9, [sp], #16
   10ad4:	a8c11fe6 	ldp	x6, x7, [sp], #16
   10ad8:	a8c117e4 	ldp	x4, x5, [sp], #16
   10adc:	a8c10fe2 	ldp	x2, x3, [sp], #16
   10ae0:	a8c107e0 	ldp	x0, x1, [sp], #16
   10ae4:	d50040bf 	msr	spsel, #0x0
   10ae8:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
   10aec:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   10af0:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
   10af4:	a9bf1fe6 	stp	x6, x7, [sp, #-16]!
   10af8:	a9bf27e8 	stp	x8, x9, [sp, #-16]!
   10afc:	a9bf2fea 	stp	x10, x11, [sp, #-16]!
   10b00:	a9bf37ec 	stp	x12, x13, [sp, #-16]!
   10b04:	a9bf3fee 	stp	x14, x15, [sp, #-16]!
   10b08:	a9bf47f0 	stp	x16, x17, [sp, #-16]!
   10b0c:	a9bf4ff2 	stp	x18, x19, [sp, #-16]!
   10b10:	a9bf57f4 	stp	x20, x21, [sp, #-16]!
   10b14:	a9bf5ff6 	stp	x22, x23, [sp, #-16]!
   10b18:	a9bf67f8 	stp	x24, x25, [sp, #-16]!
   10b1c:	a9bf6ffa 	stp	x26, x27, [sp, #-16]!
   10b20:	a9bf77fc 	stp	x28, x29, [sp, #-16]!
   10b24:	a9bf7ffe 	stp	x30, xzr, [sp, #-16]!
   10b28:	d53e4003 	mrs	x3, spsr_el3
   10b2c:	d53e4022 	mrs	x2, elr_el3
   10b30:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   10b34:	58000ea0 	ldr	x0, 10d08 <ullCriticalNestingConst>
   10b38:	f9400003 	ldr	x3, [x0]
   10b3c:	58000ea0 	ldr	x0, 10d10 <ullPortTaskHasFPUContextConst>
   10b40:	f9400002 	ldr	x2, [x0]
   10b44:	f100005f 	cmp	x2, #0x0
   10b48:	54000220 	b.eq	10b8c <FreeRTOS_IRQ_Handler+0x18c>  // b.none
   10b4c:	adbf07e0 	stp	q0, q1, [sp, #-32]!
   10b50:	adbf0fe2 	stp	q2, q3, [sp, #-32]!
   10b54:	adbf17e4 	stp	q4, q5, [sp, #-32]!
   10b58:	adbf1fe6 	stp	q6, q7, [sp, #-32]!
   10b5c:	adbf27e8 	stp	q8, q9, [sp, #-32]!
   10b60:	adbf2fea 	stp	q10, q11, [sp, #-32]!
   10b64:	adbf37ec 	stp	q12, q13, [sp, #-32]!
   10b68:	adbf3fee 	stp	q14, q15, [sp, #-32]!
   10b6c:	adbf47f0 	stp	q16, q17, [sp, #-32]!
   10b70:	adbf4ff2 	stp	q18, q19, [sp, #-32]!
   10b74:	adbf57f4 	stp	q20, q21, [sp, #-32]!
   10b78:	adbf5ff6 	stp	q22, q23, [sp, #-32]!
   10b7c:	adbf67f8 	stp	q24, q25, [sp, #-32]!
   10b80:	adbf6ffa 	stp	q26, q27, [sp, #-32]!
   10b84:	adbf77fc 	stp	q28, q29, [sp, #-32]!
   10b88:	adbf7ffe 	stp	q30, q31, [sp, #-32]!
   10b8c:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   10b90:	58000b80 	ldr	x0, 10d00 <pxCurrentTCBConst>
   10b94:	f9400001 	ldr	x1, [x0]
   10b98:	910003e0 	mov	x0, sp
   10b9c:	f9000020 	str	x0, [x1]
   10ba0:	d50041bf 	msr	spsel, #0x1
   10ba4:	9400096a 	bl	1314c <vTaskSwitchContext>
   10ba8:	d50040bf 	msr	spsel, #0x0
   10bac:	58000aa0 	ldr	x0, 10d00 <pxCurrentTCBConst>
   10bb0:	f9400001 	ldr	x1, [x0]
   10bb4:	f9400020 	ldr	x0, [x1]
   10bb8:	9100001f 	mov	sp, x0
   10bbc:	a8c10fe2 	ldp	x2, x3, [sp], #16
   10bc0:	58000a40 	ldr	x0, 10d08 <ullCriticalNestingConst>
   10bc4:	d2801fe1 	mov	x1, #0xff                  	// #255
   10bc8:	58000a84 	ldr	x4, 10d18 <ullICCPMRConst>
   10bcc:	f100007f 	cmp	x3, #0x0
   10bd0:	f9400085 	ldr	x5, [x4]
   10bd4:	54000060 	b.eq	10be0 <FreeRTOS_IRQ_Handler+0x1e0>  // b.none
   10bd8:	58000a46 	ldr	x6, 10d20 <ullMaxAPIPriorityMaskConst>
   10bdc:	f94000c1 	ldr	x1, [x6]
   10be0:	b90000a1 	str	w1, [x5]
   10be4:	d5033f9f 	dsb	sy
   10be8:	d5033fdf 	isb
   10bec:	f9000003 	str	x3, [x0]
   10bf0:	58000900 	ldr	x0, 10d10 <ullPortTaskHasFPUContextConst>
   10bf4:	f9000002 	str	x2, [x0]
   10bf8:	f100005f 	cmp	x2, #0x0
   10bfc:	54000220 	b.eq	10c40 <FreeRTOS_IRQ_Handler+0x240>  // b.none
   10c00:	acc17ffe 	ldp	q30, q31, [sp], #32
   10c04:	acc177fc 	ldp	q28, q29, [sp], #32
   10c08:	acc16ffa 	ldp	q26, q27, [sp], #32
   10c0c:	acc167f8 	ldp	q24, q25, [sp], #32
   10c10:	acc15ff6 	ldp	q22, q23, [sp], #32
   10c14:	acc157f4 	ldp	q20, q21, [sp], #32
   10c18:	acc14ff2 	ldp	q18, q19, [sp], #32
   10c1c:	acc147f0 	ldp	q16, q17, [sp], #32
   10c20:	acc13fee 	ldp	q14, q15, [sp], #32
   10c24:	acc137ec 	ldp	q12, q13, [sp], #32
   10c28:	acc12fea 	ldp	q10, q11, [sp], #32
   10c2c:	acc127e8 	ldp	q8, q9, [sp], #32
   10c30:	acc11fe6 	ldp	q6, q7, [sp], #32
   10c34:	acc117e4 	ldp	q4, q5, [sp], #32
   10c38:	acc10fe2 	ldp	q2, q3, [sp], #32
   10c3c:	acc107e0 	ldp	q0, q1, [sp], #32
   10c40:	a8c10fe2 	ldp	x2, x3, [sp], #16
   10c44:	d51e4003 	msr	spsr_el3, x3
   10c48:	d51e4022 	msr	elr_el3, x2
   10c4c:	a8c17ffe 	ldp	x30, xzr, [sp], #16
   10c50:	a8c177fc 	ldp	x28, x29, [sp], #16
   10c54:	a8c16ffa 	ldp	x26, x27, [sp], #16
   10c58:	a8c167f8 	ldp	x24, x25, [sp], #16
   10c5c:	a8c15ff6 	ldp	x22, x23, [sp], #16
   10c60:	a8c157f4 	ldp	x20, x21, [sp], #16
   10c64:	a8c14ff2 	ldp	x18, x19, [sp], #16
   10c68:	a8c147f0 	ldp	x16, x17, [sp], #16
   10c6c:	a8c13fee 	ldp	x14, x15, [sp], #16
   10c70:	a8c137ec 	ldp	x12, x13, [sp], #16
   10c74:	a8c12fea 	ldp	x10, x11, [sp], #16
   10c78:	a8c127e8 	ldp	x8, x9, [sp], #16
   10c7c:	a8c11fe6 	ldp	x6, x7, [sp], #16
   10c80:	a8c117e4 	ldp	x4, x5, [sp], #16
   10c84:	a8c10fe2 	ldp	x2, x3, [sp], #16
   10c88:	a8c107e0 	ldp	x0, x1, [sp], #16
   10c8c:	d50041bf 	msr	spsel, #0x1
   10c90:	d69f03e0 	eret

0000000000010c94 <Exit_IRQ_No_Context_Switch>:
   10c94:	a8c117e4 	ldp	x4, x5, [sp], #16
   10c98:	d51e4005 	msr	spsr_el3, x5
   10c9c:	d51e4024 	msr	elr_el3, x4
   10ca0:	d5033f9f 	dsb	sy
   10ca4:	d5033fdf 	isb
   10ca8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   10cac:	a8c14ff2 	ldp	x18, x19, [sp], #16
   10cb0:	a8c147f0 	ldp	x16, x17, [sp], #16
   10cb4:	a8c13fee 	ldp	x14, x15, [sp], #16
   10cb8:	a8c137ec 	ldp	x12, x13, [sp], #16
   10cbc:	a8c12fea 	ldp	x10, x11, [sp], #16
   10cc0:	a8c127e8 	ldp	x8, x9, [sp], #16
   10cc4:	a8c11fe6 	ldp	x6, x7, [sp], #16
   10cc8:	a8c117e4 	ldp	x4, x5, [sp], #16
   10ccc:	a8c10fe2 	ldp	x2, x3, [sp], #16
   10cd0:	a8c107e0 	ldp	x0, x1, [sp], #16
   10cd4:	d69f03e0 	eret
   10cd8:	d503201f 	nop
   10cdc:	d503201f 	nop
   10ce0:	d503201f 	nop
   10ce4:	d503201f 	nop
   10ce8:	d503201f 	nop
   10cec:	d503201f 	nop
   10cf0:	d503201f 	nop
   10cf4:	d503201f 	nop
   10cf8:	d503201f 	nop
   10cfc:	d503201f 	nop

0000000000010d00 <pxCurrentTCBConst>:
   10d00:	00015768 	.word	0x00015768
   10d04:	00000000 	.word	0x00000000

0000000000010d08 <ullCriticalNestingConst>:
   10d08:	000155d8 	.word	0x000155d8
   10d0c:	00000000 	.word	0x00000000

0000000000010d10 <ullPortTaskHasFPUContextConst>:
   10d10:	00015750 	.word	0x00015750
   10d14:	00000000 	.word	0x00000000

0000000000010d18 <ullICCPMRConst>:
   10d18:	00015448 	.word	0x00015448
   10d1c:	00000000 	.word	0x00000000

0000000000010d20 <ullMaxAPIPriorityMaskConst>:
   10d20:	00015450 	.word	0x00015450
   10d24:	00000000 	.word	0x00000000

0000000000010d28 <vApplicationIRQHandlerConst>:
   10d28:	00015288 	.word	0x00015288

0000000000010d2c <ullPortInterruptNestingConst>:
   10d2c:	00015760 	.word	0x00015760
   10d30:	00000000 	.word	0x00000000

0000000000010d34 <ullPortYieldRequiredConst>:
   10d34:	00015758 	.word	0x00015758
   10d38:	00000000 	.word	0x00000000

0000000000010d3c <ullICCIARConst>:
   10d3c:	00015440 	.word	0x00015440
   10d40:	00000000 	.word	0x00000000

0000000000010d44 <ullICCEOIRConst>:
   10d44:	00015438 	.word	0x00015438
	...
   10d50:	00016e28 	.word	0x00016e28
   10d54:	00000000 	.word	0x00000000

0000000000010d58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   10d58:	d10043ff 	sub	sp, sp, #0x10
   10d5c:	f90007e0 	str	x0, [sp, #8]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   10d60:	f94007e0 	ldr	x0, [sp, #8]
   10d64:	91004001 	add	x1, x0, #0x10
   10d68:	f94007e0 	ldr	x0, [sp, #8]
   10d6c:	f9000401 	str	x1, [x0, #8]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   10d70:	f94007e0 	ldr	x0, [sp, #8]
   10d74:	92800001 	mov	x1, #0xffffffffffffffff    	// #-1
   10d78:	f9000801 	str	x1, [x0, #16]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   10d7c:	f94007e0 	ldr	x0, [sp, #8]
   10d80:	91004001 	add	x1, x0, #0x10
   10d84:	f94007e0 	ldr	x0, [sp, #8]
   10d88:	f9000c01 	str	x1, [x0, #24]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   10d8c:	f94007e0 	ldr	x0, [sp, #8]
   10d90:	91004001 	add	x1, x0, #0x10
   10d94:	f94007e0 	ldr	x0, [sp, #8]
   10d98:	f9001001 	str	x1, [x0, #32]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   10d9c:	f94007e0 	ldr	x0, [sp, #8]
   10da0:	f900001f 	str	xzr, [x0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   10da4:	d503201f 	nop
   10da8:	910043ff 	add	sp, sp, #0x10
   10dac:	d65f03c0 	ret

0000000000010db0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   10db0:	d10043ff 	sub	sp, sp, #0x10
   10db4:	f90007e0 	str	x0, [sp, #8]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   10db8:	f94007e0 	ldr	x0, [sp, #8]
   10dbc:	f900101f 	str	xzr, [x0, #32]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   10dc0:	d503201f 	nop
   10dc4:	910043ff 	add	sp, sp, #0x10
   10dc8:	d65f03c0 	ret

0000000000010dcc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   10dcc:	d10083ff 	sub	sp, sp, #0x20
   10dd0:	f90007e0 	str	x0, [sp, #8]
   10dd4:	f90003e1 	str	x1, [sp]
ListItem_t * const pxIndex = pxList->pxIndex;
   10dd8:	f94007e0 	ldr	x0, [sp, #8]
   10ddc:	f9400400 	ldr	x0, [x0, #8]
   10de0:	f9000fe0 	str	x0, [sp, #24]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   10de4:	f94003e0 	ldr	x0, [sp]
   10de8:	f9400fe1 	ldr	x1, [sp, #24]
   10dec:	f9000401 	str	x1, [x0, #8]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   10df0:	f9400fe0 	ldr	x0, [sp, #24]
   10df4:	f9400801 	ldr	x1, [x0, #16]
   10df8:	f94003e0 	ldr	x0, [sp]
   10dfc:	f9000801 	str	x1, [x0, #16]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   10e00:	f9400fe0 	ldr	x0, [sp, #24]
   10e04:	f9400800 	ldr	x0, [x0, #16]
   10e08:	f94003e1 	ldr	x1, [sp]
   10e0c:	f9000401 	str	x1, [x0, #8]
	pxIndex->pxPrevious = pxNewListItem;
   10e10:	f9400fe0 	ldr	x0, [sp, #24]
   10e14:	f94003e1 	ldr	x1, [sp]
   10e18:	f9000801 	str	x1, [x0, #16]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   10e1c:	f94003e0 	ldr	x0, [sp]
   10e20:	f94007e1 	ldr	x1, [sp, #8]
   10e24:	f9001001 	str	x1, [x0, #32]

	( pxList->uxNumberOfItems )++;
   10e28:	f94007e0 	ldr	x0, [sp, #8]
   10e2c:	f9400000 	ldr	x0, [x0]
   10e30:	91000401 	add	x1, x0, #0x1
   10e34:	f94007e0 	ldr	x0, [sp, #8]
   10e38:	f9000001 	str	x1, [x0]
}
   10e3c:	d503201f 	nop
   10e40:	910083ff 	add	sp, sp, #0x20
   10e44:	d65f03c0 	ret

0000000000010e48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   10e48:	d10083ff 	sub	sp, sp, #0x20
   10e4c:	f90007e0 	str	x0, [sp, #8]
   10e50:	f90003e1 	str	x1, [sp]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   10e54:	f94003e0 	ldr	x0, [sp]
   10e58:	f9400000 	ldr	x0, [x0]
   10e5c:	f9000be0 	str	x0, [sp, #16]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   10e60:	f9400be0 	ldr	x0, [sp, #16]
   10e64:	b100041f 	cmn	x0, #0x1
   10e68:	540000a1 	b.ne	10e7c <vListInsert+0x34>  // b.any
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   10e6c:	f94007e0 	ldr	x0, [sp, #8]
   10e70:	f9401000 	ldr	x0, [x0, #32]
   10e74:	f9000fe0 	str	x0, [sp, #24]
   10e78:	1400000e 	b	10eb0 <vListInsert+0x68>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   10e7c:	f94007e0 	ldr	x0, [sp, #8]
   10e80:	91004000 	add	x0, x0, #0x10
   10e84:	f9000fe0 	str	x0, [sp, #24]
   10e88:	14000004 	b	10e98 <vListInsert+0x50>
   10e8c:	f9400fe0 	ldr	x0, [sp, #24]
   10e90:	f9400400 	ldr	x0, [x0, #8]
   10e94:	f9000fe0 	str	x0, [sp, #24]
   10e98:	f9400fe0 	ldr	x0, [sp, #24]
   10e9c:	f9400400 	ldr	x0, [x0, #8]
   10ea0:	f9400001 	ldr	x1, [x0]
   10ea4:	f9400be0 	ldr	x0, [sp, #16]
   10ea8:	eb00003f 	cmp	x1, x0
   10eac:	54ffff09 	b.ls	10e8c <vListInsert+0x44>  // b.plast
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   10eb0:	f9400fe0 	ldr	x0, [sp, #24]
   10eb4:	f9400401 	ldr	x1, [x0, #8]
   10eb8:	f94003e0 	ldr	x0, [sp]
   10ebc:	f9000401 	str	x1, [x0, #8]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   10ec0:	f94003e0 	ldr	x0, [sp]
   10ec4:	f9400400 	ldr	x0, [x0, #8]
   10ec8:	f94003e1 	ldr	x1, [sp]
   10ecc:	f9000801 	str	x1, [x0, #16]
	pxNewListItem->pxPrevious = pxIterator;
   10ed0:	f94003e0 	ldr	x0, [sp]
   10ed4:	f9400fe1 	ldr	x1, [sp, #24]
   10ed8:	f9000801 	str	x1, [x0, #16]
	pxIterator->pxNext = pxNewListItem;
   10edc:	f9400fe0 	ldr	x0, [sp, #24]
   10ee0:	f94003e1 	ldr	x1, [sp]
   10ee4:	f9000401 	str	x1, [x0, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   10ee8:	f94003e0 	ldr	x0, [sp]
   10eec:	f94007e1 	ldr	x1, [sp, #8]
   10ef0:	f9001001 	str	x1, [x0, #32]

	( pxList->uxNumberOfItems )++;
   10ef4:	f94007e0 	ldr	x0, [sp, #8]
   10ef8:	f9400000 	ldr	x0, [x0]
   10efc:	91000401 	add	x1, x0, #0x1
   10f00:	f94007e0 	ldr	x0, [sp, #8]
   10f04:	f9000001 	str	x1, [x0]
}
   10f08:	d503201f 	nop
   10f0c:	910083ff 	add	sp, sp, #0x20
   10f10:	d65f03c0 	ret

0000000000010f14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   10f14:	d10083ff 	sub	sp, sp, #0x20
   10f18:	f90007e0 	str	x0, [sp, #8]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   10f1c:	f94007e0 	ldr	x0, [sp, #8]
   10f20:	f9401000 	ldr	x0, [x0, #32]
   10f24:	f9000fe0 	str	x0, [sp, #24]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   10f28:	f94007e0 	ldr	x0, [sp, #8]
   10f2c:	f9400400 	ldr	x0, [x0, #8]
   10f30:	f94007e1 	ldr	x1, [sp, #8]
   10f34:	f9400821 	ldr	x1, [x1, #16]
   10f38:	f9000801 	str	x1, [x0, #16]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   10f3c:	f94007e0 	ldr	x0, [sp, #8]
   10f40:	f9400800 	ldr	x0, [x0, #16]
   10f44:	f94007e1 	ldr	x1, [sp, #8]
   10f48:	f9400421 	ldr	x1, [x1, #8]
   10f4c:	f9000401 	str	x1, [x0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   10f50:	f9400fe0 	ldr	x0, [sp, #24]
   10f54:	f9400401 	ldr	x1, [x0, #8]
   10f58:	f94007e0 	ldr	x0, [sp, #8]
   10f5c:	eb00003f 	cmp	x1, x0
   10f60:	540000a1 	b.ne	10f74 <uxListRemove+0x60>  // b.any
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   10f64:	f94007e0 	ldr	x0, [sp, #8]
   10f68:	f9400801 	ldr	x1, [x0, #16]
   10f6c:	f9400fe0 	ldr	x0, [sp, #24]
   10f70:	f9000401 	str	x1, [x0, #8]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   10f74:	f94007e0 	ldr	x0, [sp, #8]
   10f78:	f900101f 	str	xzr, [x0, #32]
	( pxList->uxNumberOfItems )--;
   10f7c:	f9400fe0 	ldr	x0, [sp, #24]
   10f80:	f9400000 	ldr	x0, [x0]
   10f84:	d1000401 	sub	x1, x0, #0x1
   10f88:	f9400fe0 	ldr	x0, [sp, #24]
   10f8c:	f9000001 	str	x1, [x0]

	return pxList->uxNumberOfItems;
   10f90:	f9400fe0 	ldr	x0, [sp, #24]
   10f94:	f9400000 	ldr	x0, [x0]
}
   10f98:	910083ff 	add	sp, sp, #0x20
   10f9c:	d65f03c0 	ret

0000000000010fa0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   10fa0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   10fa4:	910003fd 	mov	x29, sp
   10fa8:	f9000fa0 	str	x0, [x29, #24]
   10fac:	f9000ba1 	str	x1, [x29, #16]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   10fb0:	f9400fa0 	ldr	x0, [x29, #24]
   10fb4:	f90017a0 	str	x0, [x29, #40]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   10fb8:	97fffd3a 	bl	104a0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   10fbc:	f94017a0 	ldr	x0, [x29, #40]
   10fc0:	f9400001 	ldr	x1, [x0]
   10fc4:	f94017a0 	ldr	x0, [x29, #40]
   10fc8:	f9403c02 	ldr	x2, [x0, #120]
   10fcc:	f94017a0 	ldr	x0, [x29, #40]
   10fd0:	f9404000 	ldr	x0, [x0, #128]
   10fd4:	9b007c40 	mul	x0, x2, x0
   10fd8:	8b000021 	add	x1, x1, x0
   10fdc:	f94017a0 	ldr	x0, [x29, #40]
   10fe0:	f9000401 	str	x1, [x0, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   10fe4:	f94017a0 	ldr	x0, [x29, #40]
   10fe8:	f900381f 	str	xzr, [x0, #112]
		pxQueue->pcWriteTo = pxQueue->pcHead;
   10fec:	f94017a0 	ldr	x0, [x29, #40]
   10ff0:	f9400001 	ldr	x1, [x0]
   10ff4:	f94017a0 	ldr	x0, [x29, #40]
   10ff8:	f9000801 	str	x1, [x0, #16]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   10ffc:	f94017a0 	ldr	x0, [x29, #40]
   11000:	f9400001 	ldr	x1, [x0]
   11004:	f94017a0 	ldr	x0, [x29, #40]
   11008:	f9403c00 	ldr	x0, [x0, #120]
   1100c:	d1000402 	sub	x2, x0, #0x1
   11010:	f94017a0 	ldr	x0, [x29, #40]
   11014:	f9404000 	ldr	x0, [x0, #128]
   11018:	9b007c40 	mul	x0, x2, x0
   1101c:	8b000021 	add	x1, x1, x0
   11020:	f94017a0 	ldr	x0, [x29, #40]
   11024:	f9000c01 	str	x1, [x0, #24]
		pxQueue->cRxLock = queueUNLOCKED;
   11028:	f94017a0 	ldr	x0, [x29, #40]
   1102c:	12800001 	mov	w1, #0xffffffff            	// #-1
   11030:	39022001 	strb	w1, [x0, #136]
		pxQueue->cTxLock = queueUNLOCKED;
   11034:	f94017a0 	ldr	x0, [x29, #40]
   11038:	12800001 	mov	w1, #0xffffffff            	// #-1
   1103c:	39022401 	strb	w1, [x0, #137]

		if( xNewQueue == pdFALSE )
   11040:	f9400ba0 	ldr	x0, [x29, #16]
   11044:	f100001f 	cmp	x0, #0x0
   11048:	54000181 	b.ne	11078 <xQueueGenericReset+0xd8>  // b.any
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1104c:	f94017a0 	ldr	x0, [x29, #40]
   11050:	f9401000 	ldr	x0, [x0, #32]
   11054:	f100001f 	cmp	x0, #0x0
   11058:	540001c0 	b.eq	11090 <xQueueGenericReset+0xf0>  // b.none
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1105c:	f94017a0 	ldr	x0, [x29, #40]
   11060:	91008000 	add	x0, x0, #0x20
   11064:	9400089b 	bl	132d0 <xTaskRemoveFromEventList>
   11068:	f100001f 	cmp	x0, #0x0
   1106c:	54000120 	b.eq	11090 <xQueueGenericReset+0xf0>  // b.none
				{
					queueYIELD_IF_USING_PREEMPTION();
   11070:	d4000003 	smc	#0x0
   11074:	14000007 	b	11090 <xQueueGenericReset+0xf0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   11078:	f94017a0 	ldr	x0, [x29, #40]
   1107c:	91008000 	add	x0, x0, #0x20
   11080:	97ffff36 	bl	10d58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   11084:	f94017a0 	ldr	x0, [x29, #40]
   11088:	91012000 	add	x0, x0, #0x48
   1108c:	97ffff33 	bl	10d58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
   11090:	97fffd14 	bl	104e0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   11094:	d2800020 	mov	x0, #0x1                   	// #1
}
   11098:	a8c37bfd 	ldp	x29, x30, [sp], #48
   1109c:	d65f03c0 	ret

00000000000110a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   110a0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   110a4:	910003fd 	mov	x29, sp
   110a8:	f90017a0 	str	x0, [x29, #40]
   110ac:	f90013a1 	str	x1, [x29, #32]
   110b0:	39007fa2 	strb	w2, [x29, #31]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
   110b4:	f94013a0 	ldr	x0, [x29, #32]
   110b8:	f100001f 	cmp	x0, #0x0
   110bc:	54000061 	b.ne	110c8 <xQueueGenericCreate+0x28>  // b.any
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   110c0:	f90027bf 	str	xzr, [x29, #72]
   110c4:	14000005 	b	110d8 <xQueueGenericCreate+0x38>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   110c8:	f94017a1 	ldr	x1, [x29, #40]
   110cc:	f94013a0 	ldr	x0, [x29, #32]
   110d0:	9b007c20 	mul	x0, x1, x0
   110d4:	f90027a0 	str	x0, [x29, #72]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   110d8:	f94027a0 	ldr	x0, [x29, #72]
   110dc:	91024000 	add	x0, x0, #0x90
   110e0:	94000f19 	bl	14d44 <pvPortMalloc>
   110e4:	f90023a0 	str	x0, [x29, #64]

		if( pxNewQueue != NULL )
   110e8:	f94023a0 	ldr	x0, [x29, #64]
   110ec:	f100001f 	cmp	x0, #0x0
   110f0:	54000140 	b.eq	11118 <xQueueGenericCreate+0x78>  // b.none
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   110f4:	f94023a0 	ldr	x0, [x29, #64]
   110f8:	91024000 	add	x0, x0, #0x90
   110fc:	f9001fa0 	str	x0, [x29, #56]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   11100:	f94023a4 	ldr	x4, [x29, #64]
   11104:	39407fa3 	ldrb	w3, [x29, #31]
   11108:	f9401fa2 	ldr	x2, [x29, #56]
   1110c:	f94013a1 	ldr	x1, [x29, #32]
   11110:	f94017a0 	ldr	x0, [x29, #40]
   11114:	94000004 	bl	11124 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
   11118:	f94023a0 	ldr	x0, [x29, #64]
	}
   1111c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   11120:	d65f03c0 	ret

0000000000011124 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   11124:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   11128:	910003fd 	mov	x29, sp
   1112c:	f9001fa0 	str	x0, [x29, #56]
   11130:	f9001ba1 	str	x1, [x29, #48]
   11134:	f90017a2 	str	x2, [x29, #40]
   11138:	39009fa3 	strb	w3, [x29, #39]
   1113c:	f9000fa4 	str	x4, [x29, #24]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   11140:	f9401ba0 	ldr	x0, [x29, #48]
   11144:	f100001f 	cmp	x0, #0x0
   11148:	540000a1 	b.ne	1115c <prvInitialiseNewQueue+0x38>  // b.any
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1114c:	f9400fa0 	ldr	x0, [x29, #24]
   11150:	f9400fa1 	ldr	x1, [x29, #24]
   11154:	f9000001 	str	x1, [x0]
   11158:	14000004 	b	11168 <prvInitialiseNewQueue+0x44>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1115c:	f9400fa0 	ldr	x0, [x29, #24]
   11160:	f94017a1 	ldr	x1, [x29, #40]
   11164:	f9000001 	str	x1, [x0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   11168:	f9400fa0 	ldr	x0, [x29, #24]
   1116c:	f9401fa1 	ldr	x1, [x29, #56]
   11170:	f9003c01 	str	x1, [x0, #120]
	pxNewQueue->uxItemSize = uxItemSize;
   11174:	f9400fa0 	ldr	x0, [x29, #24]
   11178:	f9401ba1 	ldr	x1, [x29, #48]
   1117c:	f9004001 	str	x1, [x0, #128]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   11180:	d2800021 	mov	x1, #0x1                   	// #1
   11184:	f9400fa0 	ldr	x0, [x29, #24]
   11188:	97ffff86 	bl	10fa0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
   1118c:	d503201f 	nop
   11190:	a8c47bfd 	ldp	x29, x30, [sp], #64
   11194:	d65f03c0 	ret

0000000000011198 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   11198:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   1119c:	910003fd 	mov	x29, sp
   111a0:	f90017a0 	str	x0, [x29, #40]
   111a4:	f90013a1 	str	x1, [x29, #32]
   111a8:	f9000fa2 	str	x2, [x29, #24]
   111ac:	f9000ba3 	str	x3, [x29, #16]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   111b0:	f9002fbf 	str	xzr, [x29, #88]
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   111b4:	f94017a0 	ldr	x0, [x29, #40]
   111b8:	f9002ba0 	str	x0, [x29, #80]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   111bc:	97fffcb9 	bl	104a0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   111c0:	f9402ba0 	ldr	x0, [x29, #80]
   111c4:	f9403801 	ldr	x1, [x0, #112]
   111c8:	f9402ba0 	ldr	x0, [x29, #80]
   111cc:	f9403c00 	ldr	x0, [x0, #120]
   111d0:	eb00003f 	cmp	x1, x0
   111d4:	54000083 	b.cc	111e4 <xQueueGenericSend+0x4c>  // b.lo, b.ul, b.last
   111d8:	f9400ba0 	ldr	x0, [x29, #16]
   111dc:	f100081f 	cmp	x0, #0x2
   111e0:	54000301 	b.ne	11240 <xQueueGenericSend+0xa8>  // b.any
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   111e4:	f9400ba2 	ldr	x2, [x29, #16]
   111e8:	f94013a1 	ldr	x1, [x29, #32]
   111ec:	f9402ba0 	ldr	x0, [x29, #80]
   111f0:	940001c5 	bl	11904 <prvCopyDataToQueue>
   111f4:	f90027a0 	str	x0, [x29, #72]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   111f8:	f9402ba0 	ldr	x0, [x29, #80]
   111fc:	f9402400 	ldr	x0, [x0, #72]
   11200:	f100001f 	cmp	x0, #0x0
   11204:	54000100 	b.eq	11224 <xQueueGenericSend+0x8c>  // b.none
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   11208:	f9402ba0 	ldr	x0, [x29, #80]
   1120c:	91012000 	add	x0, x0, #0x48
   11210:	94000830 	bl	132d0 <xTaskRemoveFromEventList>
   11214:	f100001f 	cmp	x0, #0x0
   11218:	540000e0 	b.eq	11234 <xQueueGenericSend+0x9c>  // b.none
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
   1121c:	d4000003 	smc	#0x0
   11220:	14000005 	b	11234 <xQueueGenericSend+0x9c>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
   11224:	f94027a0 	ldr	x0, [x29, #72]
   11228:	f100001f 	cmp	x0, #0x0
   1122c:	54000040 	b.eq	11234 <xQueueGenericSend+0x9c>  // b.none
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
   11230:	d4000003 	smc	#0x0
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   11234:	97fffcab 	bl	104e0 <vPortExitCritical>
				return pdPASS;
   11238:	d2800020 	mov	x0, #0x1                   	// #1
   1123c:	1400003c 	b	1132c <xQueueGenericSend+0x194>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   11240:	f9400fa0 	ldr	x0, [x29, #24]
   11244:	f100001f 	cmp	x0, #0x0
   11248:	54000081 	b.ne	11258 <xQueueGenericSend+0xc0>  // b.any
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1124c:	97fffca5 	bl	104e0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   11250:	d2800000 	mov	x0, #0x0                   	// #0
   11254:	14000036 	b	1132c <xQueueGenericSend+0x194>
				}
				else if( xEntryTimeSet == pdFALSE )
   11258:	f9402fa0 	ldr	x0, [x29, #88]
   1125c:	f100001f 	cmp	x0, #0x0
   11260:	540000a1 	b.ne	11274 <xQueueGenericSend+0xdc>  // b.any
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   11264:	9100e3a0 	add	x0, x29, #0x38
   11268:	9400089c 	bl	134d8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   1126c:	d2800020 	mov	x0, #0x1                   	// #1
   11270:	f9002fa0 	str	x0, [x29, #88]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   11274:	97fffc9b 	bl	104e0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   11278:	9400062a 	bl	12b20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   1127c:	97fffc89 	bl	104a0 <vPortEnterCritical>
   11280:	f9402ba0 	ldr	x0, [x29, #80]
   11284:	39422000 	ldrb	w0, [x0, #136]
   11288:	13001c00 	sxtb	w0, w0
   1128c:	3100041f 	cmn	w0, #0x1
   11290:	54000061 	b.ne	1129c <xQueueGenericSend+0x104>  // b.any
   11294:	f9402ba0 	ldr	x0, [x29, #80]
   11298:	3902201f 	strb	wzr, [x0, #136]
   1129c:	f9402ba0 	ldr	x0, [x29, #80]
   112a0:	39422400 	ldrb	w0, [x0, #137]
   112a4:	13001c00 	sxtb	w0, w0
   112a8:	3100041f 	cmn	w0, #0x1
   112ac:	54000061 	b.ne	112b8 <xQueueGenericSend+0x120>  // b.any
   112b0:	f9402ba0 	ldr	x0, [x29, #80]
   112b4:	3902241f 	strb	wzr, [x0, #137]
   112b8:	97fffc8a 	bl	104e0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   112bc:	910063a1 	add	x1, x29, #0x18
   112c0:	9100e3a0 	add	x0, x29, #0x38
   112c4:	94000894 	bl	13514 <xTaskCheckForTimeOut>
   112c8:	f100001f 	cmp	x0, #0x0
   112cc:	54000281 	b.ne	1131c <xQueueGenericSend+0x184>  // b.any
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   112d0:	f9402ba0 	ldr	x0, [x29, #80]
   112d4:	94000262 	bl	11c5c <prvIsQueueFull>
   112d8:	f100001f 	cmp	x0, #0x0
   112dc:	54000180 	b.eq	1130c <xQueueGenericSend+0x174>  // b.none
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   112e0:	f9402ba0 	ldr	x0, [x29, #80]
   112e4:	91008000 	add	x0, x0, #0x20
   112e8:	f9400fa1 	ldr	x1, [x29, #24]
   112ec:	940007d0 	bl	1322c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   112f0:	f9402ba0 	ldr	x0, [x29, #80]
   112f4:	940001ff 	bl	11af0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   112f8:	94000613 	bl	12b44 <xTaskResumeAll>
   112fc:	f100001f 	cmp	x0, #0x0
   11300:	54fff5e1 	b.ne	111bc <xQueueGenericSend+0x24>  // b.any
				{
					portYIELD_WITHIN_API();
   11304:	d4000003 	smc	#0x0
   11308:	17ffffad 	b	111bc <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1130c:	f9402ba0 	ldr	x0, [x29, #80]
   11310:	940001f8 	bl	11af0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   11314:	9400060c 	bl	12b44 <xTaskResumeAll>
   11318:	17ffffa9 	b	111bc <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1131c:	f9402ba0 	ldr	x0, [x29, #80]
   11320:	940001f4 	bl	11af0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   11324:	94000608 	bl	12b44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   11328:	d2800000 	mov	x0, #0x0                   	// #0
		}
	}
}
   1132c:	a8c67bfd 	ldp	x29, x30, [sp], #96
   11330:	d65f03c0 	ret

0000000000011334 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   11334:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   11338:	910003fd 	mov	x29, sp
   1133c:	f90017a0 	str	x0, [x29, #40]
   11340:	f90013a1 	str	x1, [x29, #32]
   11344:	f9000fa2 	str	x2, [x29, #24]
   11348:	f9000ba3 	str	x3, [x29, #16]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1134c:	f94017a0 	ldr	x0, [x29, #40]
   11350:	f90023a0 	str	x0, [x29, #64]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   11354:	97fffcbd 	bl	10648 <uxPortSetInterruptMask>
   11358:	f9001fa0 	str	x0, [x29, #56]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1135c:	f94023a0 	ldr	x0, [x29, #64]
   11360:	f9403801 	ldr	x1, [x0, #112]
   11364:	f94023a0 	ldr	x0, [x29, #64]
   11368:	f9403c00 	ldr	x0, [x0, #120]
   1136c:	eb00003f 	cmp	x1, x0
   11370:	54000083 	b.cc	11380 <xQueueGenericSendFromISR+0x4c>  // b.lo, b.ul, b.last
   11374:	f9400ba0 	ldr	x0, [x29, #16]
   11378:	f100081f 	cmp	x0, #0x2
   1137c:	54000481 	b.ne	1140c <xQueueGenericSendFromISR+0xd8>  // b.any
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   11380:	f94023a0 	ldr	x0, [x29, #64]
   11384:	39422400 	ldrb	w0, [x0, #137]
   11388:	3900dfa0 	strb	w0, [x29, #55]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1138c:	f9400ba2 	ldr	x2, [x29, #16]
   11390:	f94013a1 	ldr	x1, [x29, #32]
   11394:	f94023a0 	ldr	x0, [x29, #64]
   11398:	9400015b 	bl	11904 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1139c:	39c0dfa0 	ldrsb	w0, [x29, #55]
   113a0:	3100041f 	cmn	w0, #0x1
   113a4:	54000221 	b.ne	113e8 <xQueueGenericSendFromISR+0xb4>  // b.any
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   113a8:	f94023a0 	ldr	x0, [x29, #64]
   113ac:	f9402400 	ldr	x0, [x0, #72]
   113b0:	f100001f 	cmp	x0, #0x0
   113b4:	54000260 	b.eq	11400 <xQueueGenericSendFromISR+0xcc>  // b.none
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   113b8:	f94023a0 	ldr	x0, [x29, #64]
   113bc:	91012000 	add	x0, x0, #0x48
   113c0:	940007c4 	bl	132d0 <xTaskRemoveFromEventList>
   113c4:	f100001f 	cmp	x0, #0x0
   113c8:	540001c0 	b.eq	11400 <xQueueGenericSendFromISR+0xcc>  // b.none
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   113cc:	f9400fa0 	ldr	x0, [x29, #24]
   113d0:	f100001f 	cmp	x0, #0x0
   113d4:	54000160 	b.eq	11400 <xQueueGenericSendFromISR+0xcc>  // b.none
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   113d8:	f9400fa0 	ldr	x0, [x29, #24]
   113dc:	d2800021 	mov	x1, #0x1                   	// #1
   113e0:	f9000001 	str	x1, [x0]
   113e4:	14000007 	b	11400 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   113e8:	3940dfa0 	ldrb	w0, [x29, #55]
   113ec:	11000400 	add	w0, w0, #0x1
   113f0:	53001c00 	uxtb	w0, w0
   113f4:	13001c01 	sxtb	w1, w0
   113f8:	f94023a0 	ldr	x0, [x29, #64]
   113fc:	39022401 	strb	w1, [x0, #137]
			}

			xReturn = pdPASS;
   11400:	d2800020 	mov	x0, #0x1                   	// #1
   11404:	f90027a0 	str	x0, [x29, #72]
		{
   11408:	14000002 	b	11410 <xQueueGenericSendFromISR+0xdc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   1140c:	f90027bf 	str	xzr, [x29, #72]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   11410:	f9401fa0 	ldr	x0, [x29, #56]
   11414:	97fffc79 	bl	105f8 <vPortClearInterruptMask>

	return xReturn;
   11418:	f94027a0 	ldr	x0, [x29, #72]
}
   1141c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   11420:	d65f03c0 	ret

0000000000011424 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
   11424:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   11428:	910003fd 	mov	x29, sp
   1142c:	f9000fa0 	str	x0, [x29, #24]
   11430:	f9000ba1 	str	x1, [x29, #16]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   11434:	f9400fa0 	ldr	x0, [x29, #24]
   11438:	f90023a0 	str	x0, [x29, #64]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1143c:	97fffc83 	bl	10648 <uxPortSetInterruptMask>
   11440:	f9001fa0 	str	x0, [x29, #56]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   11444:	f94023a0 	ldr	x0, [x29, #64]
   11448:	f9403800 	ldr	x0, [x0, #112]
   1144c:	f9001ba0 	str	x0, [x29, #48]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   11450:	f94023a0 	ldr	x0, [x29, #64]
   11454:	f9403c01 	ldr	x1, [x0, #120]
   11458:	f9401ba0 	ldr	x0, [x29, #48]
   1145c:	eb00003f 	cmp	x1, x0
   11460:	54000489 	b.ls	114f0 <xQueueGiveFromISR+0xcc>  // b.plast
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   11464:	f94023a0 	ldr	x0, [x29, #64]
   11468:	39422400 	ldrb	w0, [x0, #137]
   1146c:	3900bfa0 	strb	w0, [x29, #47]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
   11470:	f9401ba0 	ldr	x0, [x29, #48]
   11474:	91000401 	add	x1, x0, #0x1
   11478:	f94023a0 	ldr	x0, [x29, #64]
   1147c:	f9003801 	str	x1, [x0, #112]

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   11480:	39c0bfa0 	ldrsb	w0, [x29, #47]
   11484:	3100041f 	cmn	w0, #0x1
   11488:	54000221 	b.ne	114cc <xQueueGiveFromISR+0xa8>  // b.any
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1148c:	f94023a0 	ldr	x0, [x29, #64]
   11490:	f9402400 	ldr	x0, [x0, #72]
   11494:	f100001f 	cmp	x0, #0x0
   11498:	54000260 	b.eq	114e4 <xQueueGiveFromISR+0xc0>  // b.none
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1149c:	f94023a0 	ldr	x0, [x29, #64]
   114a0:	91012000 	add	x0, x0, #0x48
   114a4:	9400078b 	bl	132d0 <xTaskRemoveFromEventList>
   114a8:	f100001f 	cmp	x0, #0x0
   114ac:	540001c0 	b.eq	114e4 <xQueueGiveFromISR+0xc0>  // b.none
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   114b0:	f9400ba0 	ldr	x0, [x29, #16]
   114b4:	f100001f 	cmp	x0, #0x0
   114b8:	54000160 	b.eq	114e4 <xQueueGiveFromISR+0xc0>  // b.none
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   114bc:	f9400ba0 	ldr	x0, [x29, #16]
   114c0:	d2800021 	mov	x1, #0x1                   	// #1
   114c4:	f9000001 	str	x1, [x0]
   114c8:	14000007 	b	114e4 <xQueueGiveFromISR+0xc0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   114cc:	3940bfa0 	ldrb	w0, [x29, #47]
   114d0:	11000400 	add	w0, w0, #0x1
   114d4:	53001c00 	uxtb	w0, w0
   114d8:	13001c01 	sxtb	w1, w0
   114dc:	f94023a0 	ldr	x0, [x29, #64]
   114e0:	39022401 	strb	w1, [x0, #137]
			}

			xReturn = pdPASS;
   114e4:	d2800020 	mov	x0, #0x1                   	// #1
   114e8:	f90027a0 	str	x0, [x29, #72]
   114ec:	14000002 	b	114f4 <xQueueGiveFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   114f0:	f90027bf 	str	xzr, [x29, #72]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   114f4:	f9401fa0 	ldr	x0, [x29, #56]
   114f8:	97fffc40 	bl	105f8 <vPortClearInterruptMask>

	return xReturn;
   114fc:	f94027a0 	ldr	x0, [x29, #72]
}
   11500:	a8c57bfd 	ldp	x29, x30, [sp], #80
   11504:	d65f03c0 	ret

0000000000011508 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
   11508:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   1150c:	910003fd 	mov	x29, sp
   11510:	f90017a0 	str	x0, [x29, #40]
   11514:	f90013a1 	str	x1, [x29, #32]
   11518:	f9000fa2 	str	x2, [x29, #24]
   1151c:	f9000ba3 	str	x3, [x29, #16]
BaseType_t xEntryTimeSet = pdFALSE;
   11520:	f9002fbf 	str	xzr, [x29, #88]
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   11524:	f94017a0 	ldr	x0, [x29, #40]
   11528:	f9002ba0 	str	x0, [x29, #80]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1152c:	97fffbdd 	bl	104a0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   11530:	f9402ba0 	ldr	x0, [x29, #80]
   11534:	f9403800 	ldr	x0, [x0, #112]
   11538:	f90027a0 	str	x0, [x29, #72]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1153c:	f94027a0 	ldr	x0, [x29, #72]
   11540:	f100001f 	cmp	x0, #0x0
   11544:	54000520 	b.eq	115e8 <xQueueGenericReceive+0xe0>  // b.none
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
   11548:	f9402ba0 	ldr	x0, [x29, #80]
   1154c:	f9400c00 	ldr	x0, [x0, #24]
   11550:	f90023a0 	str	x0, [x29, #64]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   11554:	f94013a1 	ldr	x1, [x29, #32]
   11558:	f9402ba0 	ldr	x0, [x29, #80]
   1155c:	94000142 	bl	11a64 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
   11560:	f9400ba0 	ldr	x0, [x29, #16]
   11564:	f100001f 	cmp	x0, #0x0
   11568:	54000201 	b.ne	115a8 <xQueueGenericReceive+0xa0>  // b.any
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
   1156c:	f94027a0 	ldr	x0, [x29, #72]
   11570:	d1000401 	sub	x1, x0, #0x1
   11574:	f9402ba0 	ldr	x0, [x29, #80]
   11578:	f9003801 	str	x1, [x0, #112]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1157c:	f9402ba0 	ldr	x0, [x29, #80]
   11580:	f9401000 	ldr	x0, [x0, #32]
   11584:	f100001f 	cmp	x0, #0x0
   11588:	540002a0 	b.eq	115dc <xQueueGenericReceive+0xd4>  // b.none
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1158c:	f9402ba0 	ldr	x0, [x29, #80]
   11590:	91008000 	add	x0, x0, #0x20
   11594:	9400074f 	bl	132d0 <xTaskRemoveFromEventList>
   11598:	f100001f 	cmp	x0, #0x0
   1159c:	54000200 	b.eq	115dc <xQueueGenericReceive+0xd4>  // b.none
						{
							queueYIELD_IF_USING_PREEMPTION();
   115a0:	d4000003 	smc	#0x0
   115a4:	1400000e 	b	115dc <xQueueGenericReceive+0xd4>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
   115a8:	f9402ba0 	ldr	x0, [x29, #80]
   115ac:	f94023a1 	ldr	x1, [x29, #64]
   115b0:	f9000c01 	str	x1, [x0, #24]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   115b4:	f9402ba0 	ldr	x0, [x29, #80]
   115b8:	f9402400 	ldr	x0, [x0, #72]
   115bc:	f100001f 	cmp	x0, #0x0
   115c0:	540000e0 	b.eq	115dc <xQueueGenericReceive+0xd4>  // b.none
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   115c4:	f9402ba0 	ldr	x0, [x29, #80]
   115c8:	91012000 	add	x0, x0, #0x48
   115cc:	94000741 	bl	132d0 <xTaskRemoveFromEventList>
   115d0:	f100001f 	cmp	x0, #0x0
   115d4:	54000040 	b.eq	115dc <xQueueGenericReceive+0xd4>  // b.none
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
   115d8:	d4000003 	smc	#0x0
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
   115dc:	97fffbc1 	bl	104e0 <vPortExitCritical>
				return pdPASS;
   115e0:	d2800020 	mov	x0, #0x1                   	// #1
   115e4:	14000040 	b	116e4 <xQueueGenericReceive+0x1dc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   115e8:	f9400fa0 	ldr	x0, [x29, #24]
   115ec:	f100001f 	cmp	x0, #0x0
   115f0:	54000081 	b.ne	11600 <xQueueGenericReceive+0xf8>  // b.any
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   115f4:	97fffbbb 	bl	104e0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   115f8:	d2800000 	mov	x0, #0x0                   	// #0
   115fc:	1400003a 	b	116e4 <xQueueGenericReceive+0x1dc>
				}
				else if( xEntryTimeSet == pdFALSE )
   11600:	f9402fa0 	ldr	x0, [x29, #88]
   11604:	f100001f 	cmp	x0, #0x0
   11608:	540000a1 	b.ne	1161c <xQueueGenericReceive+0x114>  // b.any
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   1160c:	9100c3a0 	add	x0, x29, #0x30
   11610:	940007b2 	bl	134d8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   11614:	d2800020 	mov	x0, #0x1                   	// #1
   11618:	f9002fa0 	str	x0, [x29, #88]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1161c:	97fffbb1 	bl	104e0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   11620:	94000540 	bl	12b20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   11624:	97fffb9f 	bl	104a0 <vPortEnterCritical>
   11628:	f9402ba0 	ldr	x0, [x29, #80]
   1162c:	39422000 	ldrb	w0, [x0, #136]
   11630:	13001c00 	sxtb	w0, w0
   11634:	3100041f 	cmn	w0, #0x1
   11638:	54000061 	b.ne	11644 <xQueueGenericReceive+0x13c>  // b.any
   1163c:	f9402ba0 	ldr	x0, [x29, #80]
   11640:	3902201f 	strb	wzr, [x0, #136]
   11644:	f9402ba0 	ldr	x0, [x29, #80]
   11648:	39422400 	ldrb	w0, [x0, #137]
   1164c:	13001c00 	sxtb	w0, w0
   11650:	3100041f 	cmn	w0, #0x1
   11654:	54000061 	b.ne	11660 <xQueueGenericReceive+0x158>  // b.any
   11658:	f9402ba0 	ldr	x0, [x29, #80]
   1165c:	3902241f 	strb	wzr, [x0, #137]
   11660:	97fffba0 	bl	104e0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   11664:	910063a1 	add	x1, x29, #0x18
   11668:	9100c3a0 	add	x0, x29, #0x30
   1166c:	940007aa 	bl	13514 <xTaskCheckForTimeOut>
   11670:	f100001f 	cmp	x0, #0x0
   11674:	54000281 	b.ne	116c4 <xQueueGenericReceive+0x1bc>  // b.any
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   11678:	f9402ba0 	ldr	x0, [x29, #80]
   1167c:	9400015b 	bl	11be8 <prvIsQueueEmpty>
   11680:	f100001f 	cmp	x0, #0x0
   11684:	54000180 	b.eq	116b4 <xQueueGenericReceive+0x1ac>  // b.none
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   11688:	f9402ba0 	ldr	x0, [x29, #80]
   1168c:	91012000 	add	x0, x0, #0x48
   11690:	f9400fa1 	ldr	x1, [x29, #24]
   11694:	940006e6 	bl	1322c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
   11698:	f9402ba0 	ldr	x0, [x29, #80]
   1169c:	94000115 	bl	11af0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
   116a0:	94000529 	bl	12b44 <xTaskResumeAll>
   116a4:	f100001f 	cmp	x0, #0x0
   116a8:	54fff421 	b.ne	1152c <xQueueGenericReceive+0x24>  // b.any
				{
					portYIELD_WITHIN_API();
   116ac:	d4000003 	smc	#0x0
   116b0:	17ffff9f 	b	1152c <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   116b4:	f9402ba0 	ldr	x0, [x29, #80]
   116b8:	9400010e 	bl	11af0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   116bc:	94000522 	bl	12b44 <xTaskResumeAll>
   116c0:	17ffff9b 	b	1152c <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   116c4:	f9402ba0 	ldr	x0, [x29, #80]
   116c8:	9400010a 	bl	11af0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   116cc:	9400051e 	bl	12b44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   116d0:	f9402ba0 	ldr	x0, [x29, #80]
   116d4:	94000145 	bl	11be8 <prvIsQueueEmpty>
   116d8:	f100001f 	cmp	x0, #0x0
   116dc:	54fff280 	b.eq	1152c <xQueueGenericReceive+0x24>  // b.none
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   116e0:	d2800000 	mov	x0, #0x0                   	// #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   116e4:	a8c67bfd 	ldp	x29, x30, [sp], #96
   116e8:	d65f03c0 	ret

00000000000116ec <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
   116ec:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   116f0:	910003fd 	mov	x29, sp
   116f4:	f90017a0 	str	x0, [x29, #40]
   116f8:	f90013a1 	str	x1, [x29, #32]
   116fc:	f9000fa2 	str	x2, [x29, #24]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   11700:	f94017a0 	ldr	x0, [x29, #40]
   11704:	f9002ba0 	str	x0, [x29, #80]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   11708:	97fffbd0 	bl	10648 <uxPortSetInterruptMask>
   1170c:	f90027a0 	str	x0, [x29, #72]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   11710:	f9402ba0 	ldr	x0, [x29, #80]
   11714:	f9403800 	ldr	x0, [x0, #112]
   11718:	f90023a0 	str	x0, [x29, #64]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1171c:	f94023a0 	ldr	x0, [x29, #64]
   11720:	f100001f 	cmp	x0, #0x0
   11724:	540004e0 	b.eq	117c0 <xQueueReceiveFromISR+0xd4>  // b.none
		{
			const int8_t cRxLock = pxQueue->cRxLock;
   11728:	f9402ba0 	ldr	x0, [x29, #80]
   1172c:	39422000 	ldrb	w0, [x0, #136]
   11730:	3900ffa0 	strb	w0, [x29, #63]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
   11734:	f94013a1 	ldr	x1, [x29, #32]
   11738:	f9402ba0 	ldr	x0, [x29, #80]
   1173c:	940000ca 	bl	11a64 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
   11740:	f94023a0 	ldr	x0, [x29, #64]
   11744:	d1000401 	sub	x1, x0, #0x1
   11748:	f9402ba0 	ldr	x0, [x29, #80]
   1174c:	f9003801 	str	x1, [x0, #112]

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
   11750:	39c0ffa0 	ldrsb	w0, [x29, #63]
   11754:	3100041f 	cmn	w0, #0x1
   11758:	54000221 	b.ne	1179c <xQueueReceiveFromISR+0xb0>  // b.any
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1175c:	f9402ba0 	ldr	x0, [x29, #80]
   11760:	f9401000 	ldr	x0, [x0, #32]
   11764:	f100001f 	cmp	x0, #0x0
   11768:	54000260 	b.eq	117b4 <xQueueReceiveFromISR+0xc8>  // b.none
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1176c:	f9402ba0 	ldr	x0, [x29, #80]
   11770:	91008000 	add	x0, x0, #0x20
   11774:	940006d7 	bl	132d0 <xTaskRemoveFromEventList>
   11778:	f100001f 	cmp	x0, #0x0
   1177c:	540001c0 	b.eq	117b4 <xQueueReceiveFromISR+0xc8>  // b.none
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
   11780:	f9400fa0 	ldr	x0, [x29, #24]
   11784:	f100001f 	cmp	x0, #0x0
   11788:	54000160 	b.eq	117b4 <xQueueReceiveFromISR+0xc8>  // b.none
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   1178c:	f9400fa0 	ldr	x0, [x29, #24]
   11790:	d2800021 	mov	x1, #0x1                   	// #1
   11794:	f9000001 	str	x1, [x0]
   11798:	14000007 	b	117b4 <xQueueReceiveFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
   1179c:	3940ffa0 	ldrb	w0, [x29, #63]
   117a0:	11000400 	add	w0, w0, #0x1
   117a4:	53001c00 	uxtb	w0, w0
   117a8:	13001c01 	sxtb	w1, w0
   117ac:	f9402ba0 	ldr	x0, [x29, #80]
   117b0:	39022001 	strb	w1, [x0, #136]
			}

			xReturn = pdPASS;
   117b4:	d2800020 	mov	x0, #0x1                   	// #1
   117b8:	f9002fa0 	str	x0, [x29, #88]
   117bc:	14000002 	b	117c4 <xQueueReceiveFromISR+0xd8>
		}
		else
		{
			xReturn = pdFAIL;
   117c0:	f9002fbf 	str	xzr, [x29, #88]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   117c4:	f94027a0 	ldr	x0, [x29, #72]
   117c8:	97fffb8c 	bl	105f8 <vPortClearInterruptMask>

	return xReturn;
   117cc:	f9402fa0 	ldr	x0, [x29, #88]
}
   117d0:	a8c67bfd 	ldp	x29, x30, [sp], #96
   117d4:	d65f03c0 	ret

00000000000117d8 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
   117d8:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   117dc:	910003fd 	mov	x29, sp
   117e0:	f9000fa0 	str	x0, [x29, #24]
   117e4:	f9000ba1 	str	x1, [x29, #16]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   117e8:	f9400fa0 	ldr	x0, [x29, #24]
   117ec:	f9001ba0 	str	x0, [x29, #48]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   117f0:	97fffb96 	bl	10648 <uxPortSetInterruptMask>
   117f4:	f90017a0 	str	x0, [x29, #40]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   117f8:	f9401ba0 	ldr	x0, [x29, #48]
   117fc:	f9403800 	ldr	x0, [x0, #112]
   11800:	f100001f 	cmp	x0, #0x0
   11804:	540001a0 	b.eq	11838 <xQueuePeekFromISR+0x60>  // b.none
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
   11808:	f9401ba0 	ldr	x0, [x29, #48]
   1180c:	f9400c00 	ldr	x0, [x0, #24]
   11810:	f90013a0 	str	x0, [x29, #32]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
   11814:	f9400ba1 	ldr	x1, [x29, #16]
   11818:	f9401ba0 	ldr	x0, [x29, #48]
   1181c:	94000092 	bl	11a64 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
   11820:	f9401ba0 	ldr	x0, [x29, #48]
   11824:	f94013a1 	ldr	x1, [x29, #32]
   11828:	f9000c01 	str	x1, [x0, #24]

			xReturn = pdPASS;
   1182c:	d2800020 	mov	x0, #0x1                   	// #1
   11830:	f9001fa0 	str	x0, [x29, #56]
   11834:	14000002 	b	1183c <xQueuePeekFromISR+0x64>
		}
		else
		{
			xReturn = pdFAIL;
   11838:	f9001fbf 	str	xzr, [x29, #56]
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1183c:	f94017a0 	ldr	x0, [x29, #40]
   11840:	97fffb6e 	bl	105f8 <vPortClearInterruptMask>

	return xReturn;
   11844:	f9401fa0 	ldr	x0, [x29, #56]
}
   11848:	a8c47bfd 	ldp	x29, x30, [sp], #64
   1184c:	d65f03c0 	ret

0000000000011850 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
   11850:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   11854:	910003fd 	mov	x29, sp
   11858:	f9000fa0 	str	x0, [x29, #24]
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
   1185c:	97fffb11 	bl	104a0 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
   11860:	f9400fa0 	ldr	x0, [x29, #24]
   11864:	f9403800 	ldr	x0, [x0, #112]
   11868:	f90017a0 	str	x0, [x29, #40]
	}
	taskEXIT_CRITICAL();
   1186c:	97fffb1d 	bl	104e0 <vPortExitCritical>

	return uxReturn;
   11870:	f94017a0 	ldr	x0, [x29, #40]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
   11874:	a8c37bfd 	ldp	x29, x30, [sp], #48
   11878:	d65f03c0 	ret

000000000001187c <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
   1187c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   11880:	910003fd 	mov	x29, sp
   11884:	f9000fa0 	str	x0, [x29, #24]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
   11888:	f9400fa0 	ldr	x0, [x29, #24]
   1188c:	f90017a0 	str	x0, [x29, #40]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   11890:	97fffb04 	bl	104a0 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
   11894:	f94017a0 	ldr	x0, [x29, #40]
   11898:	f9403c01 	ldr	x1, [x0, #120]
   1189c:	f94017a0 	ldr	x0, [x29, #40]
   118a0:	f9403800 	ldr	x0, [x0, #112]
   118a4:	cb000020 	sub	x0, x1, x0
   118a8:	f90013a0 	str	x0, [x29, #32]
	}
	taskEXIT_CRITICAL();
   118ac:	97fffb0d 	bl	104e0 <vPortExitCritical>

	return uxReturn;
   118b0:	f94013a0 	ldr	x0, [x29, #32]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
   118b4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   118b8:	d65f03c0 	ret

00000000000118bc <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
   118bc:	d10083ff 	sub	sp, sp, #0x20
   118c0:	f90007e0 	str	x0, [sp, #8]
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
   118c4:	f94007e0 	ldr	x0, [sp, #8]
   118c8:	f9403800 	ldr	x0, [x0, #112]
   118cc:	f9000fe0 	str	x0, [sp, #24]

	return uxReturn;
   118d0:	f9400fe0 	ldr	x0, [sp, #24]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
   118d4:	910083ff 	add	sp, sp, #0x20
   118d8:	d65f03c0 	ret

00000000000118dc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
   118dc:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   118e0:	910003fd 	mov	x29, sp
   118e4:	f9000fa0 	str	x0, [x29, #24]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   118e8:	f9400fa0 	ldr	x0, [x29, #24]
   118ec:	f90017a0 	str	x0, [x29, #40]

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
   118f0:	f94017a0 	ldr	x0, [x29, #40]
   118f4:	94000d89 	bl	14f18 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
   118f8:	d503201f 	nop
   118fc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   11900:	d65f03c0 	ret

0000000000011904 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   11904:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   11908:	910003fd 	mov	x29, sp
   1190c:	f90017a0 	str	x0, [x29, #40]
   11910:	f90013a1 	str	x1, [x29, #32]
   11914:	f9000fa2 	str	x2, [x29, #24]
BaseType_t xReturn = pdFALSE;
   11918:	f9001bbf 	str	xzr, [x29, #48]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1191c:	f94017a0 	ldr	x0, [x29, #40]
   11920:	f9403800 	ldr	x0, [x0, #112]
   11924:	f9001fa0 	str	x0, [x29, #56]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   11928:	f94017a0 	ldr	x0, [x29, #40]
   1192c:	f9404000 	ldr	x0, [x0, #128]
   11930:	f100001f 	cmp	x0, #0x0
   11934:	540008a0 	b.eq	11a48 <prvCopyDataToQueue+0x144>  // b.none
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   11938:	f9400fa0 	ldr	x0, [x29, #24]
   1193c:	f100001f 	cmp	x0, #0x0
   11940:	54000361 	b.ne	119ac <prvCopyDataToQueue+0xa8>  // b.any
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   11944:	f94017a0 	ldr	x0, [x29, #40]
   11948:	f9400803 	ldr	x3, [x0, #16]
   1194c:	f94017a0 	ldr	x0, [x29, #40]
   11950:	f9404000 	ldr	x0, [x0, #128]
   11954:	aa0003e2 	mov	x2, x0
   11958:	f94013a1 	ldr	x1, [x29, #32]
   1195c:	aa0303e0 	mov	x0, x3
   11960:	94000e90 	bl	153a0 <.plt+0x20>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   11964:	f94017a0 	ldr	x0, [x29, #40]
   11968:	f9400801 	ldr	x1, [x0, #16]
   1196c:	f94017a0 	ldr	x0, [x29, #40]
   11970:	f9404000 	ldr	x0, [x0, #128]
   11974:	8b000021 	add	x1, x1, x0
   11978:	f94017a0 	ldr	x0, [x29, #40]
   1197c:	f9000801 	str	x1, [x0, #16]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   11980:	f94017a0 	ldr	x0, [x29, #40]
   11984:	f9400801 	ldr	x1, [x0, #16]
   11988:	f94017a0 	ldr	x0, [x29, #40]
   1198c:	f9400400 	ldr	x0, [x0, #8]
   11990:	eb00003f 	cmp	x1, x0
   11994:	540005a3 	b.cc	11a48 <prvCopyDataToQueue+0x144>  // b.lo, b.ul, b.last
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   11998:	f94017a0 	ldr	x0, [x29, #40]
   1199c:	f9400001 	ldr	x1, [x0]
   119a0:	f94017a0 	ldr	x0, [x29, #40]
   119a4:	f9000801 	str	x1, [x0, #16]
   119a8:	14000028 	b	11a48 <prvCopyDataToQueue+0x144>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   119ac:	f94017a0 	ldr	x0, [x29, #40]
   119b0:	f9400c03 	ldr	x3, [x0, #24]
   119b4:	f94017a0 	ldr	x0, [x29, #40]
   119b8:	f9404000 	ldr	x0, [x0, #128]
   119bc:	aa0003e2 	mov	x2, x0
   119c0:	f94013a1 	ldr	x1, [x29, #32]
   119c4:	aa0303e0 	mov	x0, x3
   119c8:	94000e76 	bl	153a0 <.plt+0x20>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   119cc:	f94017a0 	ldr	x0, [x29, #40]
   119d0:	f9400c01 	ldr	x1, [x0, #24]
   119d4:	f94017a0 	ldr	x0, [x29, #40]
   119d8:	f9404000 	ldr	x0, [x0, #128]
   119dc:	cb0003e0 	neg	x0, x0
   119e0:	8b000021 	add	x1, x1, x0
   119e4:	f94017a0 	ldr	x0, [x29, #40]
   119e8:	f9000c01 	str	x1, [x0, #24]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   119ec:	f94017a0 	ldr	x0, [x29, #40]
   119f0:	f9400c01 	ldr	x1, [x0, #24]
   119f4:	f94017a0 	ldr	x0, [x29, #40]
   119f8:	f9400000 	ldr	x0, [x0]
   119fc:	eb00003f 	cmp	x1, x0
   11a00:	54000122 	b.cs	11a24 <prvCopyDataToQueue+0x120>  // b.hs, b.nlast
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   11a04:	f94017a0 	ldr	x0, [x29, #40]
   11a08:	f9400401 	ldr	x1, [x0, #8]
   11a0c:	f94017a0 	ldr	x0, [x29, #40]
   11a10:	f9404000 	ldr	x0, [x0, #128]
   11a14:	cb0003e0 	neg	x0, x0
   11a18:	8b000021 	add	x1, x1, x0
   11a1c:	f94017a0 	ldr	x0, [x29, #40]
   11a20:	f9000c01 	str	x1, [x0, #24]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   11a24:	f9400fa0 	ldr	x0, [x29, #24]
   11a28:	f100081f 	cmp	x0, #0x2
   11a2c:	540000e1 	b.ne	11a48 <prvCopyDataToQueue+0x144>  // b.any
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   11a30:	f9401fa0 	ldr	x0, [x29, #56]
   11a34:	f100001f 	cmp	x0, #0x0
   11a38:	54000080 	b.eq	11a48 <prvCopyDataToQueue+0x144>  // b.none
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   11a3c:	f9401fa0 	ldr	x0, [x29, #56]
   11a40:	d1000400 	sub	x0, x0, #0x1
   11a44:	f9001fa0 	str	x0, [x29, #56]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
   11a48:	f9401fa0 	ldr	x0, [x29, #56]
   11a4c:	91000401 	add	x1, x0, #0x1
   11a50:	f94017a0 	ldr	x0, [x29, #40]
   11a54:	f9003801 	str	x1, [x0, #112]

	return xReturn;
   11a58:	f9401ba0 	ldr	x0, [x29, #48]
}
   11a5c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   11a60:	d65f03c0 	ret

0000000000011a64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   11a64:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   11a68:	910003fd 	mov	x29, sp
   11a6c:	f9000fa0 	str	x0, [x29, #24]
   11a70:	f9000ba1 	str	x1, [x29, #16]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   11a74:	f9400fa0 	ldr	x0, [x29, #24]
   11a78:	f9404000 	ldr	x0, [x0, #128]
   11a7c:	f100001f 	cmp	x0, #0x0
   11a80:	54000320 	b.eq	11ae4 <prvCopyDataFromQueue+0x80>  // b.none
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   11a84:	f9400fa0 	ldr	x0, [x29, #24]
   11a88:	f9400c01 	ldr	x1, [x0, #24]
   11a8c:	f9400fa0 	ldr	x0, [x29, #24]
   11a90:	f9404000 	ldr	x0, [x0, #128]
   11a94:	8b000021 	add	x1, x1, x0
   11a98:	f9400fa0 	ldr	x0, [x29, #24]
   11a9c:	f9000c01 	str	x1, [x0, #24]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   11aa0:	f9400fa0 	ldr	x0, [x29, #24]
   11aa4:	f9400c01 	ldr	x1, [x0, #24]
   11aa8:	f9400fa0 	ldr	x0, [x29, #24]
   11aac:	f9400400 	ldr	x0, [x0, #8]
   11ab0:	eb00003f 	cmp	x1, x0
   11ab4:	540000a3 	b.cc	11ac8 <prvCopyDataFromQueue+0x64>  // b.lo, b.ul, b.last
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   11ab8:	f9400fa0 	ldr	x0, [x29, #24]
   11abc:	f9400001 	ldr	x1, [x0]
   11ac0:	f9400fa0 	ldr	x0, [x29, #24]
   11ac4:	f9000c01 	str	x1, [x0, #24]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   11ac8:	f9400fa0 	ldr	x0, [x29, #24]
   11acc:	f9400c01 	ldr	x1, [x0, #24]
   11ad0:	f9400fa0 	ldr	x0, [x29, #24]
   11ad4:	f9404000 	ldr	x0, [x0, #128]
   11ad8:	aa0003e2 	mov	x2, x0
   11adc:	f9400ba0 	ldr	x0, [x29, #16]
   11ae0:	94000e30 	bl	153a0 <.plt+0x20>
	}
}
   11ae4:	d503201f 	nop
   11ae8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   11aec:	d65f03c0 	ret

0000000000011af0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   11af0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   11af4:	910003fd 	mov	x29, sp
   11af8:	f9000fa0 	str	x0, [x29, #24]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   11afc:	97fffa69 	bl	104a0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
   11b00:	f9400fa0 	ldr	x0, [x29, #24]
   11b04:	39422400 	ldrb	w0, [x0, #137]
   11b08:	3900bfa0 	strb	w0, [x29, #47]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   11b0c:	1400000f 	b	11b48 <prvUnlockQueue+0x58>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   11b10:	f9400fa0 	ldr	x0, [x29, #24]
   11b14:	f9402400 	ldr	x0, [x0, #72]
   11b18:	f100001f 	cmp	x0, #0x0
   11b1c:	540001e0 	b.eq	11b58 <prvUnlockQueue+0x68>  // b.none
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   11b20:	f9400fa0 	ldr	x0, [x29, #24]
   11b24:	91012000 	add	x0, x0, #0x48
   11b28:	940005ea 	bl	132d0 <xTaskRemoveFromEventList>
   11b2c:	f100001f 	cmp	x0, #0x0
   11b30:	54000040 	b.eq	11b38 <prvUnlockQueue+0x48>  // b.none
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
   11b34:	940006b1 	bl	135f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   11b38:	3940bfa0 	ldrb	w0, [x29, #47]
   11b3c:	51000400 	sub	w0, w0, #0x1
   11b40:	53001c00 	uxtb	w0, w0
   11b44:	3900bfa0 	strb	w0, [x29, #47]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   11b48:	39c0bfa0 	ldrsb	w0, [x29, #47]
   11b4c:	7100001f 	cmp	w0, #0x0
   11b50:	54fffe0c 	b.gt	11b10 <prvUnlockQueue+0x20>
   11b54:	14000002 	b	11b5c <prvUnlockQueue+0x6c>
					break;
   11b58:	d503201f 	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
   11b5c:	f9400fa0 	ldr	x0, [x29, #24]
   11b60:	12800001 	mov	w1, #0xffffffff            	// #-1
   11b64:	39022401 	strb	w1, [x0, #137]
	}
	taskEXIT_CRITICAL();
   11b68:	97fffa5e 	bl	104e0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   11b6c:	97fffa4d 	bl	104a0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
   11b70:	f9400fa0 	ldr	x0, [x29, #24]
   11b74:	39422000 	ldrb	w0, [x0, #136]
   11b78:	3900bba0 	strb	w0, [x29, #46]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   11b7c:	1400000f 	b	11bb8 <prvUnlockQueue+0xc8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   11b80:	f9400fa0 	ldr	x0, [x29, #24]
   11b84:	f9401000 	ldr	x0, [x0, #32]
   11b88:	f100001f 	cmp	x0, #0x0
   11b8c:	540001e0 	b.eq	11bc8 <prvUnlockQueue+0xd8>  // b.none
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   11b90:	f9400fa0 	ldr	x0, [x29, #24]
   11b94:	91008000 	add	x0, x0, #0x20
   11b98:	940005ce 	bl	132d0 <xTaskRemoveFromEventList>
   11b9c:	f100001f 	cmp	x0, #0x0
   11ba0:	54000040 	b.eq	11ba8 <prvUnlockQueue+0xb8>  // b.none
				{
					vTaskMissedYield();
   11ba4:	94000695 	bl	135f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   11ba8:	3940bba0 	ldrb	w0, [x29, #46]
   11bac:	51000400 	sub	w0, w0, #0x1
   11bb0:	53001c00 	uxtb	w0, w0
   11bb4:	3900bba0 	strb	w0, [x29, #46]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   11bb8:	39c0bba0 	ldrsb	w0, [x29, #46]
   11bbc:	7100001f 	cmp	w0, #0x0
   11bc0:	54fffe0c 	b.gt	11b80 <prvUnlockQueue+0x90>
   11bc4:	14000002 	b	11bcc <prvUnlockQueue+0xdc>
			}
			else
			{
				break;
   11bc8:	d503201f 	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   11bcc:	f9400fa0 	ldr	x0, [x29, #24]
   11bd0:	12800001 	mov	w1, #0xffffffff            	// #-1
   11bd4:	39022001 	strb	w1, [x0, #136]
	}
	taskEXIT_CRITICAL();
   11bd8:	97fffa42 	bl	104e0 <vPortExitCritical>
}
   11bdc:	d503201f 	nop
   11be0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   11be4:	d65f03c0 	ret

0000000000011be8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   11be8:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   11bec:	910003fd 	mov	x29, sp
   11bf0:	f9000fa0 	str	x0, [x29, #24]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   11bf4:	97fffa2b 	bl	104a0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   11bf8:	f9400fa0 	ldr	x0, [x29, #24]
   11bfc:	f9403800 	ldr	x0, [x0, #112]
   11c00:	f100001f 	cmp	x0, #0x0
   11c04:	54000081 	b.ne	11c14 <prvIsQueueEmpty+0x2c>  // b.any
		{
			xReturn = pdTRUE;
   11c08:	d2800020 	mov	x0, #0x1                   	// #1
   11c0c:	f90017a0 	str	x0, [x29, #40]
   11c10:	14000002 	b	11c18 <prvIsQueueEmpty+0x30>
		}
		else
		{
			xReturn = pdFALSE;
   11c14:	f90017bf 	str	xzr, [x29, #40]
		}
	}
	taskEXIT_CRITICAL();
   11c18:	97fffa32 	bl	104e0 <vPortExitCritical>

	return xReturn;
   11c1c:	f94017a0 	ldr	x0, [x29, #40]
}
   11c20:	a8c37bfd 	ldp	x29, x30, [sp], #48
   11c24:	d65f03c0 	ret

0000000000011c28 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
   11c28:	d10083ff 	sub	sp, sp, #0x20
   11c2c:	f90007e0 	str	x0, [sp, #8]
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
   11c30:	f94007e0 	ldr	x0, [sp, #8]
   11c34:	f9403800 	ldr	x0, [x0, #112]
   11c38:	f100001f 	cmp	x0, #0x0
   11c3c:	54000081 	b.ne	11c4c <xQueueIsQueueEmptyFromISR+0x24>  // b.any
	{
		xReturn = pdTRUE;
   11c40:	d2800020 	mov	x0, #0x1                   	// #1
   11c44:	f9000fe0 	str	x0, [sp, #24]
   11c48:	14000002 	b	11c50 <xQueueIsQueueEmptyFromISR+0x28>
	}
	else
	{
		xReturn = pdFALSE;
   11c4c:	f9000fff 	str	xzr, [sp, #24]
	}

	return xReturn;
   11c50:	f9400fe0 	ldr	x0, [sp, #24]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
   11c54:	910083ff 	add	sp, sp, #0x20
   11c58:	d65f03c0 	ret

0000000000011c5c <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   11c5c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   11c60:	910003fd 	mov	x29, sp
   11c64:	f9000fa0 	str	x0, [x29, #24]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   11c68:	97fffa0e 	bl	104a0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   11c6c:	f9400fa0 	ldr	x0, [x29, #24]
   11c70:	f9403801 	ldr	x1, [x0, #112]
   11c74:	f9400fa0 	ldr	x0, [x29, #24]
   11c78:	f9403c00 	ldr	x0, [x0, #120]
   11c7c:	eb00003f 	cmp	x1, x0
   11c80:	54000081 	b.ne	11c90 <prvIsQueueFull+0x34>  // b.any
		{
			xReturn = pdTRUE;
   11c84:	d2800020 	mov	x0, #0x1                   	// #1
   11c88:	f90017a0 	str	x0, [x29, #40]
   11c8c:	14000002 	b	11c94 <prvIsQueueFull+0x38>
		}
		else
		{
			xReturn = pdFALSE;
   11c90:	f90017bf 	str	xzr, [x29, #40]
		}
	}
	taskEXIT_CRITICAL();
   11c94:	97fffa13 	bl	104e0 <vPortExitCritical>

	return xReturn;
   11c98:	f94017a0 	ldr	x0, [x29, #40]
}
   11c9c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   11ca0:	d65f03c0 	ret

0000000000011ca4 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
   11ca4:	d10083ff 	sub	sp, sp, #0x20
   11ca8:	f90007e0 	str	x0, [sp, #8]
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
   11cac:	f94007e0 	ldr	x0, [sp, #8]
   11cb0:	f9403801 	ldr	x1, [x0, #112]
   11cb4:	f94007e0 	ldr	x0, [sp, #8]
   11cb8:	f9403c00 	ldr	x0, [x0, #120]
   11cbc:	eb00003f 	cmp	x1, x0
   11cc0:	54000081 	b.ne	11cd0 <xQueueIsQueueFullFromISR+0x2c>  // b.any
	{
		xReturn = pdTRUE;
   11cc4:	d2800020 	mov	x0, #0x1                   	// #1
   11cc8:	f9000fe0 	str	x0, [sp, #24]
   11ccc:	14000002 	b	11cd4 <xQueueIsQueueFullFromISR+0x30>
	}
	else
	{
		xReturn = pdFALSE;
   11cd0:	f9000fff 	str	xzr, [sp, #24]
	}

	return xReturn;
   11cd4:	f9400fe0 	ldr	x0, [sp, #24]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
   11cd8:	910083ff 	add	sp, sp, #0x20
   11cdc:	d65f03c0 	ret

0000000000011ce0 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
   11ce0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   11ce4:	910003fd 	mov	x29, sp
   11ce8:	f9001fa0 	str	x0, [x29, #56]
   11cec:	f9001ba1 	str	x1, [x29, #48]
   11cf0:	79005fa2 	strh	w2, [x29, #46]
   11cf4:	f90013a3 	str	x3, [x29, #32]
   11cf8:	f9000fa4 	str	x4, [x29, #24]
   11cfc:	f9000ba5 	str	x5, [x29, #16]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   11d00:	79405fa0 	ldrh	w0, [x29, #46]
   11d04:	d37df000 	lsl	x0, x0, #3
   11d08:	94000c0f 	bl	14d44 <pvPortMalloc>
   11d0c:	f90027a0 	str	x0, [x29, #72]

			if( pxStack != NULL )
   11d10:	f94027a0 	ldr	x0, [x29, #72]
   11d14:	f100001f 	cmp	x0, #0x0
   11d18:	540001c0 	b.eq	11d50 <xTaskCreate+0x70>  // b.none
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   11d1c:	d2801100 	mov	x0, #0x88                  	// #136
   11d20:	94000c09 	bl	14d44 <pvPortMalloc>
   11d24:	f9002fa0 	str	x0, [x29, #88]

				if( pxNewTCB != NULL )
   11d28:	f9402fa0 	ldr	x0, [x29, #88]
   11d2c:	f100001f 	cmp	x0, #0x0
   11d30:	540000a0 	b.eq	11d44 <xTaskCreate+0x64>  // b.none
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   11d34:	f9402fa0 	ldr	x0, [x29, #88]
   11d38:	f94027a1 	ldr	x1, [x29, #72]
   11d3c:	f9003001 	str	x1, [x0, #96]
   11d40:	14000005 	b	11d54 <xTaskCreate+0x74>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   11d44:	f94027a0 	ldr	x0, [x29, #72]
   11d48:	94000c74 	bl	14f18 <vPortFree>
   11d4c:	14000002 	b	11d54 <xTaskCreate+0x74>
				}
			}
			else
			{
				pxNewTCB = NULL;
   11d50:	f9002fbf 	str	xzr, [x29, #88]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   11d54:	f9402fa0 	ldr	x0, [x29, #88]
   11d58:	f100001f 	cmp	x0, #0x0
   11d5c:	54000200 	b.eq	11d9c <xTaskCreate+0xbc>  // b.none
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   11d60:	79405fa0 	ldrh	w0, [x29, #46]
   11d64:	d2800007 	mov	x7, #0x0                   	// #0
   11d68:	f9402fa6 	ldr	x6, [x29, #88]
   11d6c:	f9400ba5 	ldr	x5, [x29, #16]
   11d70:	f9400fa4 	ldr	x4, [x29, #24]
   11d74:	f94013a3 	ldr	x3, [x29, #32]
   11d78:	2a0003e2 	mov	w2, w0
   11d7c:	f9401ba1 	ldr	x1, [x29, #48]
   11d80:	f9401fa0 	ldr	x0, [x29, #56]
   11d84:	9400000b 	bl	11db0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
   11d88:	f9402fa0 	ldr	x0, [x29, #88]
   11d8c:	94000068 	bl	11f2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
   11d90:	d2800020 	mov	x0, #0x1                   	// #1
   11d94:	f9002ba0 	str	x0, [x29, #80]
   11d98:	14000003 	b	11da4 <xTaskCreate+0xc4>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   11d9c:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   11da0:	f9002ba0 	str	x0, [x29, #80]
		}

		return xReturn;
   11da4:	f9402ba0 	ldr	x0, [x29, #80]
	}
   11da8:	a8c67bfd 	ldp	x29, x30, [sp], #96
   11dac:	d65f03c0 	ret

0000000000011db0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   11db0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   11db4:	910003fd 	mov	x29, sp
   11db8:	f90027a0 	str	x0, [x29, #72]
   11dbc:	f90023a1 	str	x1, [x29, #64]
   11dc0:	b9003fa2 	str	w2, [x29, #60]
   11dc4:	f9001ba3 	str	x3, [x29, #48]
   11dc8:	f90017a4 	str	x4, [x29, #40]
   11dcc:	f90013a5 	str	x5, [x29, #32]
   11dd0:	f9000fa6 	str	x6, [x29, #24]
   11dd4:	f9000ba7 	str	x7, [x29, #16]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   11dd8:	f9400fa0 	ldr	x0, [x29, #24]
   11ddc:	f9403001 	ldr	x1, [x0, #96]
   11de0:	b9403fa0 	ldr	w0, [x29, #60]
   11de4:	51000400 	sub	w0, w0, #0x1
   11de8:	2a0003e0 	mov	w0, w0
   11dec:	d37df000 	lsl	x0, x0, #3
   11df0:	8b000020 	add	x0, x1, x0
   11df4:	f9002ba0 	str	x0, [x29, #80]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   11df8:	f9402ba0 	ldr	x0, [x29, #80]
   11dfc:	927cec00 	and	x0, x0, #0xfffffffffffffff0
   11e00:	f9002ba0 	str	x0, [x29, #80]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   11e04:	f9002fbf 	str	xzr, [x29, #88]
   11e08:	14000013 	b	11e54 <prvInitialiseNewTask+0xa4>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   11e0c:	f94023a1 	ldr	x1, [x29, #64]
   11e10:	f9402fa0 	ldr	x0, [x29, #88]
   11e14:	8b000020 	add	x0, x1, x0
   11e18:	39400002 	ldrb	w2, [x0]
   11e1c:	f9400fa1 	ldr	x1, [x29, #24]
   11e20:	f9402fa0 	ldr	x0, [x29, #88]
   11e24:	8b000020 	add	x0, x1, x0
   11e28:	2a0203e1 	mov	w1, w2
   11e2c:	3901a001 	strb	w1, [x0, #104]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   11e30:	f94023a1 	ldr	x1, [x29, #64]
   11e34:	f9402fa0 	ldr	x0, [x29, #88]
   11e38:	8b000020 	add	x0, x1, x0
   11e3c:	39400000 	ldrb	w0, [x0]
   11e40:	7100001f 	cmp	w0, #0x0
   11e44:	54000100 	b.eq	11e64 <prvInitialiseNewTask+0xb4>  // b.none
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   11e48:	f9402fa0 	ldr	x0, [x29, #88]
   11e4c:	91000400 	add	x0, x0, #0x1
   11e50:	f9002fa0 	str	x0, [x29, #88]
   11e54:	f9402fa0 	ldr	x0, [x29, #88]
   11e58:	f1003c1f 	cmp	x0, #0xf
   11e5c:	54fffd89 	b.ls	11e0c <prvInitialiseNewTask+0x5c>  // b.plast
   11e60:	14000002 	b	11e68 <prvInitialiseNewTask+0xb8>
		{
			break;
   11e64:	d503201f 	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   11e68:	f9400fa0 	ldr	x0, [x29, #24]
   11e6c:	3901dc1f 	strb	wzr, [x0, #119]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   11e70:	f94017a0 	ldr	x0, [x29, #40]
   11e74:	f100101f 	cmp	x0, #0x4
   11e78:	54000069 	b.ls	11e84 <prvInitialiseNewTask+0xd4>  // b.plast
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   11e7c:	d2800080 	mov	x0, #0x4                   	// #4
   11e80:	f90017a0 	str	x0, [x29, #40]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   11e84:	f9400fa0 	ldr	x0, [x29, #24]
   11e88:	f94017a1 	ldr	x1, [x29, #40]
   11e8c:	f9002c01 	str	x1, [x0, #88]
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   11e90:	f9400fa0 	ldr	x0, [x29, #24]
   11e94:	91002000 	add	x0, x0, #0x8
   11e98:	97fffbc6 	bl	10db0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   11e9c:	f9400fa0 	ldr	x0, [x29, #24]
   11ea0:	9100c000 	add	x0, x0, #0x30
   11ea4:	97fffbc3 	bl	10db0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   11ea8:	f9400fa0 	ldr	x0, [x29, #24]
   11eac:	f9400fa1 	ldr	x1, [x29, #24]
   11eb0:	f9001001 	str	x1, [x0, #32]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   11eb4:	d28000a1 	mov	x1, #0x5                   	// #5
   11eb8:	f94017a0 	ldr	x0, [x29, #40]
   11ebc:	cb000021 	sub	x1, x1, x0
   11ec0:	f9400fa0 	ldr	x0, [x29, #24]
   11ec4:	f9001801 	str	x1, [x0, #48]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   11ec8:	f9400fa0 	ldr	x0, [x29, #24]
   11ecc:	f9400fa1 	ldr	x1, [x29, #24]
   11ed0:	f9002401 	str	x1, [x0, #72]
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
   11ed4:	f9400fa0 	ldr	x0, [x29, #24]
   11ed8:	f9003c1f 	str	xzr, [x0, #120]
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   11edc:	f9400fa0 	ldr	x0, [x29, #24]
   11ee0:	b900801f 	str	wzr, [x0, #128]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   11ee4:	f9400fa0 	ldr	x0, [x29, #24]
   11ee8:	3902101f 	strb	wzr, [x0, #132]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   11eec:	f9401ba2 	ldr	x2, [x29, #48]
   11ef0:	f94027a1 	ldr	x1, [x29, #72]
   11ef4:	f9402ba0 	ldr	x0, [x29, #80]
   11ef8:	97fff842 	bl	10000 <pxPortInitialiseStack>
   11efc:	aa0003e1 	mov	x1, x0
   11f00:	f9400fa0 	ldr	x0, [x29, #24]
   11f04:	f9000001 	str	x1, [x0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   11f08:	f94013a0 	ldr	x0, [x29, #32]
   11f0c:	f100001f 	cmp	x0, #0x0
   11f10:	54000080 	b.eq	11f20 <prvInitialiseNewTask+0x170>  // b.none
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   11f14:	f94013a0 	ldr	x0, [x29, #32]
   11f18:	f9400fa1 	ldr	x1, [x29, #24]
   11f1c:	f9000001 	str	x1, [x0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   11f20:	d503201f 	nop
   11f24:	a8c67bfd 	ldp	x29, x30, [sp], #96
   11f28:	d65f03c0 	ret

0000000000011f2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   11f2c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   11f30:	910003fd 	mov	x29, sp
   11f34:	f9000fa0 	str	x0, [x29, #24]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   11f38:	97fff95a 	bl	104a0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
   11f3c:	90000020 	adrp	x0, 15000 <prvHeapInit+0x50>
   11f40:	91246000 	add	x0, x0, #0x918
   11f44:	f9400000 	ldr	x0, [x0]
   11f48:	91000401 	add	x1, x0, #0x1
   11f4c:	90000020 	adrp	x0, 15000 <prvHeapInit+0x50>
   11f50:	91246000 	add	x0, x0, #0x918
   11f54:	f9000001 	str	x1, [x0]
		if( pxCurrentTCB == NULL )
   11f58:	90000020 	adrp	x0, 15000 <prvHeapInit+0x50>
   11f5c:	911da000 	add	x0, x0, #0x768
   11f60:	f9400000 	ldr	x0, [x0]
   11f64:	f100001f 	cmp	x0, #0x0
   11f68:	54000181 	b.ne	11f98 <prvAddNewTaskToReadyList+0x6c>  // b.any
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   11f6c:	90000020 	adrp	x0, 15000 <prvHeapInit+0x50>
   11f70:	911da000 	add	x0, x0, #0x768
   11f74:	f9400fa1 	ldr	x1, [x29, #24]
   11f78:	f9000001 	str	x1, [x0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   11f7c:	90000020 	adrp	x0, 15000 <prvHeapInit+0x50>
   11f80:	91246000 	add	x0, x0, #0x918
   11f84:	f9400000 	ldr	x0, [x0]
   11f88:	f100041f 	cmp	x0, #0x1
   11f8c:	54000281 	b.ne	11fdc <prvAddNewTaskToReadyList+0xb0>  // b.any
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   11f90:	940005ab 	bl	1363c <prvInitialiseTaskLists>
   11f94:	14000012 	b	11fdc <prvAddNewTaskToReadyList+0xb0>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   11f98:	90000020 	adrp	x0, 15000 <prvHeapInit+0x50>
   11f9c:	9124c000 	add	x0, x0, #0x930
   11fa0:	f9400000 	ldr	x0, [x0]
   11fa4:	f100001f 	cmp	x0, #0x0
   11fa8:	540001a1 	b.ne	11fdc <prvAddNewTaskToReadyList+0xb0>  // b.any
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   11fac:	90000020 	adrp	x0, 15000 <prvHeapInit+0x50>
   11fb0:	911da000 	add	x0, x0, #0x768
   11fb4:	f9400000 	ldr	x0, [x0]
   11fb8:	f9402c01 	ldr	x1, [x0, #88]
   11fbc:	f9400fa0 	ldr	x0, [x29, #24]
   11fc0:	f9402c00 	ldr	x0, [x0, #88]
   11fc4:	eb00003f 	cmp	x1, x0
   11fc8:	540000a8 	b.hi	11fdc <prvAddNewTaskToReadyList+0xb0>  // b.pmore
				{
					pxCurrentTCB = pxNewTCB;
   11fcc:	90000020 	adrp	x0, 15000 <prvHeapInit+0x50>
   11fd0:	911da000 	add	x0, x0, #0x768
   11fd4:	f9400fa1 	ldr	x1, [x29, #24]
   11fd8:	f9000001 	str	x1, [x0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   11fdc:	90000020 	adrp	x0, 15000 <prvHeapInit+0x50>
   11fe0:	91254000 	add	x0, x0, #0x950
   11fe4:	f9400000 	ldr	x0, [x0]
   11fe8:	91000401 	add	x1, x0, #0x1
   11fec:	90000020 	adrp	x0, 15000 <prvHeapInit+0x50>
   11ff0:	91254000 	add	x0, x0, #0x950
   11ff4:	f9000001 	str	x1, [x0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
   11ff8:	f9400fa0 	ldr	x0, [x29, #24]
   11ffc:	f9402c00 	ldr	x0, [x0, #88]
   12000:	2a0003e1 	mov	w1, w0
   12004:	d2800020 	mov	x0, #0x1                   	// #1
   12008:	9ac12001 	lsl	x1, x0, x1
   1200c:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12010:	9124a000 	add	x0, x0, #0x928
   12014:	f9400000 	ldr	x0, [x0]
   12018:	aa000021 	orr	x1, x1, x0
   1201c:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12020:	9124a000 	add	x0, x0, #0x928
   12024:	f9000001 	str	x1, [x0]
   12028:	f9400fa0 	ldr	x0, [x29, #24]
   1202c:	f9402c01 	ldr	x1, [x0, #88]
   12030:	aa0103e0 	mov	x0, x1
   12034:	d37ef400 	lsl	x0, x0, #2
   12038:	8b010000 	add	x0, x0, x1
   1203c:	d37df000 	lsl	x0, x0, #3
   12040:	f0000001 	adrp	x1, 15000 <prvHeapInit+0x50>
   12044:	911dc021 	add	x1, x1, #0x770
   12048:	8b010002 	add	x2, x0, x1
   1204c:	f9400fa0 	ldr	x0, [x29, #24]
   12050:	91002000 	add	x0, x0, #0x8
   12054:	aa0003e1 	mov	x1, x0
   12058:	aa0203e0 	mov	x0, x2
   1205c:	97fffb5c 	bl	10dcc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   12060:	97fff920 	bl	104e0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
   12064:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12068:	9124c000 	add	x0, x0, #0x930
   1206c:	f9400000 	ldr	x0, [x0]
   12070:	f100001f 	cmp	x0, #0x0
   12074:	54000140 	b.eq	1209c <prvAddNewTaskToReadyList+0x170>  // b.none
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   12078:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   1207c:	911da000 	add	x0, x0, #0x768
   12080:	f9400000 	ldr	x0, [x0]
   12084:	f9402c01 	ldr	x1, [x0, #88]
   12088:	f9400fa0 	ldr	x0, [x29, #24]
   1208c:	f9402c00 	ldr	x0, [x0, #88]
   12090:	eb00003f 	cmp	x1, x0
   12094:	54000042 	b.cs	1209c <prvAddNewTaskToReadyList+0x170>  // b.hs, b.nlast
		{
			taskYIELD_IF_USING_PREEMPTION();
   12098:	d4000003 	smc	#0x0
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1209c:	d503201f 	nop
   120a0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   120a4:	d65f03c0 	ret

00000000000120a8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
   120a8:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   120ac:	910003fd 	mov	x29, sp
   120b0:	f9000fa0 	str	x0, [x29, #24]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   120b4:	97fff8fb 	bl	104a0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
   120b8:	f9400fa0 	ldr	x0, [x29, #24]
   120bc:	f100001f 	cmp	x0, #0x0
   120c0:	540000a1 	b.ne	120d4 <vTaskDelete+0x2c>  // b.any
   120c4:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   120c8:	911da000 	add	x0, x0, #0x768
   120cc:	f9400000 	ldr	x0, [x0]
   120d0:	14000002 	b	120d8 <vTaskDelete+0x30>
   120d4:	f9400fa0 	ldr	x0, [x29, #24]
   120d8:	f90017a0 	str	x0, [x29, #40]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   120dc:	f94017a0 	ldr	x0, [x29, #40]
   120e0:	91002000 	add	x0, x0, #0x8
   120e4:	97fffb8c 	bl	10f14 <uxListRemove>
   120e8:	f100001f 	cmp	x0, #0x0
   120ec:	54000341 	b.ne	12154 <vTaskDelete+0xac>  // b.any
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   120f0:	f94017a0 	ldr	x0, [x29, #40]
   120f4:	f9402c01 	ldr	x1, [x0, #88]
   120f8:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   120fc:	911dc002 	add	x2, x0, #0x770
   12100:	aa0103e0 	mov	x0, x1
   12104:	d37ef400 	lsl	x0, x0, #2
   12108:	8b010000 	add	x0, x0, x1
   1210c:	d37df000 	lsl	x0, x0, #3
   12110:	8b000040 	add	x0, x2, x0
   12114:	f9400000 	ldr	x0, [x0]
   12118:	f100001f 	cmp	x0, #0x0
   1211c:	540001c1 	b.ne	12154 <vTaskDelete+0xac>  // b.any
   12120:	f94017a0 	ldr	x0, [x29, #40]
   12124:	f9402c00 	ldr	x0, [x0, #88]
   12128:	2a0003e1 	mov	w1, w0
   1212c:	d2800020 	mov	x0, #0x1                   	// #1
   12130:	9ac12000 	lsl	x0, x0, x1
   12134:	aa2003e1 	mvn	x1, x0
   12138:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   1213c:	9124a000 	add	x0, x0, #0x928
   12140:	f9400000 	ldr	x0, [x0]
   12144:	8a000021 	and	x1, x1, x0
   12148:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   1214c:	9124a000 	add	x0, x0, #0x928
   12150:	f9000001 	str	x1, [x0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   12154:	f94017a0 	ldr	x0, [x29, #40]
   12158:	f9402800 	ldr	x0, [x0, #80]
   1215c:	f100001f 	cmp	x0, #0x0
   12160:	54000080 	b.eq	12170 <vTaskDelete+0xc8>  // b.none
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   12164:	f94017a0 	ldr	x0, [x29, #40]
   12168:	9100c000 	add	x0, x0, #0x30
   1216c:	97fffb6a 	bl	10f14 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
   12170:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12174:	91254000 	add	x0, x0, #0x950
   12178:	f9400000 	ldr	x0, [x0]
   1217c:	91000401 	add	x1, x0, #0x1
   12180:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12184:	91254000 	add	x0, x0, #0x950
   12188:	f9000001 	str	x1, [x0]

			if( pxTCB == pxCurrentTCB )
   1218c:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12190:	911da000 	add	x0, x0, #0x768
   12194:	f9400000 	ldr	x0, [x0]
   12198:	f94017a1 	ldr	x1, [x29, #40]
   1219c:	eb00003f 	cmp	x1, x0
   121a0:	540001c1 	b.ne	121d8 <vTaskDelete+0x130>  // b.any
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
   121a4:	f94017a0 	ldr	x0, [x29, #40]
   121a8:	91002001 	add	x1, x0, #0x8
   121ac:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   121b0:	91230000 	add	x0, x0, #0x8c0
   121b4:	97fffb06 	bl	10dcc <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
   121b8:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   121bc:	9123a000 	add	x0, x0, #0x8e8
   121c0:	f9400000 	ldr	x0, [x0]
   121c4:	91000401 	add	x1, x0, #0x1
   121c8:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   121cc:	9123a000 	add	x0, x0, #0x8e8
   121d0:	f9000001 	str	x1, [x0]
   121d4:	1400000b 	b	12200 <vTaskDelete+0x158>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
   121d8:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   121dc:	91246000 	add	x0, x0, #0x918
   121e0:	f9400000 	ldr	x0, [x0]
   121e4:	d1000401 	sub	x1, x0, #0x1
   121e8:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   121ec:	91246000 	add	x0, x0, #0x918
   121f0:	f9000001 	str	x1, [x0]
				prvDeleteTCB( pxTCB );
   121f4:	f94017a0 	ldr	x0, [x29, #40]
   121f8:	94000572 	bl	137c0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
   121fc:	9400057c 	bl	137ec <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
   12200:	97fff8b8 	bl	104e0 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
   12204:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12208:	9124c000 	add	x0, x0, #0x930
   1220c:	f9400000 	ldr	x0, [x0]
   12210:	f100001f 	cmp	x0, #0x0
   12214:	54000100 	b.eq	12234 <vTaskDelete+0x18c>  // b.none
		{
			if( pxTCB == pxCurrentTCB )
   12218:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   1221c:	911da000 	add	x0, x0, #0x768
   12220:	f9400000 	ldr	x0, [x0]
   12224:	f94017a1 	ldr	x1, [x29, #40]
   12228:	eb00003f 	cmp	x1, x0
   1222c:	54000041 	b.ne	12234 <vTaskDelete+0x18c>  // b.any
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
   12230:	d4000003 	smc	#0x0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
   12234:	d503201f 	nop
   12238:	a8c37bfd 	ldp	x29, x30, [sp], #48
   1223c:	d65f03c0 	ret

0000000000012240 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
   12240:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   12244:	910003fd 	mov	x29, sp
   12248:	f9000fa0 	str	x0, [x29, #24]
   1224c:	f9000ba1 	str	x1, [x29, #16]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
   12250:	f9001fbf 	str	xzr, [x29, #56]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
   12254:	94000233 	bl	12b20 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   12258:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   1225c:	91248000 	add	x0, x0, #0x920
   12260:	f9400000 	ldr	x0, [x0]
   12264:	f9001ba0 	str	x0, [x29, #48]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   12268:	f9400fa0 	ldr	x0, [x29, #24]
   1226c:	f9400001 	ldr	x1, [x0]
   12270:	f9400ba0 	ldr	x0, [x29, #16]
   12274:	8b000020 	add	x0, x1, x0
   12278:	f90017a0 	str	x0, [x29, #40]

			if( xConstTickCount < *pxPreviousWakeTime )
   1227c:	f9400fa0 	ldr	x0, [x29, #24]
   12280:	f9400001 	ldr	x1, [x0]
   12284:	f9401ba0 	ldr	x0, [x29, #48]
   12288:	eb00003f 	cmp	x1, x0
   1228c:	540001a9 	b.ls	122c0 <vTaskDelayUntil+0x80>  // b.plast
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   12290:	f9400fa0 	ldr	x0, [x29, #24]
   12294:	f9400001 	ldr	x1, [x0]
   12298:	f94017a0 	ldr	x0, [x29, #40]
   1229c:	eb00003f 	cmp	x1, x0
   122a0:	54000269 	b.ls	122ec <vTaskDelayUntil+0xac>  // b.plast
   122a4:	f94017a1 	ldr	x1, [x29, #40]
   122a8:	f9401ba0 	ldr	x0, [x29, #48]
   122ac:	eb00003f 	cmp	x1, x0
   122b0:	540001e9 	b.ls	122ec <vTaskDelayUntil+0xac>  // b.plast
				{
					xShouldDelay = pdTRUE;
   122b4:	d2800020 	mov	x0, #0x1                   	// #1
   122b8:	f9001fa0 	str	x0, [x29, #56]
   122bc:	1400000c 	b	122ec <vTaskDelayUntil+0xac>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   122c0:	f9400fa0 	ldr	x0, [x29, #24]
   122c4:	f9400001 	ldr	x1, [x0]
   122c8:	f94017a0 	ldr	x0, [x29, #40]
   122cc:	eb00003f 	cmp	x1, x0
   122d0:	540000a8 	b.hi	122e4 <vTaskDelayUntil+0xa4>  // b.pmore
   122d4:	f94017a1 	ldr	x1, [x29, #40]
   122d8:	f9401ba0 	ldr	x0, [x29, #48]
   122dc:	eb00003f 	cmp	x1, x0
   122e0:	54000069 	b.ls	122ec <vTaskDelayUntil+0xac>  // b.plast
				{
					xShouldDelay = pdTRUE;
   122e4:	d2800020 	mov	x0, #0x1                   	// #1
   122e8:	f9001fa0 	str	x0, [x29, #56]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   122ec:	f9400fa0 	ldr	x0, [x29, #24]
   122f0:	f94017a1 	ldr	x1, [x29, #40]
   122f4:	f9000001 	str	x1, [x0]

			if( xShouldDelay != pdFALSE )
   122f8:	f9401fa0 	ldr	x0, [x29, #56]
   122fc:	f100001f 	cmp	x0, #0x0
   12300:	540000c0 	b.eq	12318 <vTaskDelayUntil+0xd8>  // b.none
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
   12304:	f94017a1 	ldr	x1, [x29, #40]
   12308:	f9401ba0 	ldr	x0, [x29, #48]
   1230c:	cb000020 	sub	x0, x1, x0
   12310:	d2800001 	mov	x1, #0x0                   	// #0
   12314:	94000743 	bl	14020 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   12318:	9400020b 	bl	12b44 <xTaskResumeAll>
   1231c:	f90013a0 	str	x0, [x29, #32]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   12320:	f94013a0 	ldr	x0, [x29, #32]
   12324:	f100001f 	cmp	x0, #0x0
   12328:	54000041 	b.ne	12330 <vTaskDelayUntil+0xf0>  // b.any
		{
			portYIELD_WITHIN_API();
   1232c:	d4000003 	smc	#0x0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   12330:	d503201f 	nop
   12334:	a8c47bfd 	ldp	x29, x30, [sp], #64
   12338:	d65f03c0 	ret

000000000001233c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1233c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   12340:	910003fd 	mov	x29, sp
   12344:	f9000fa0 	str	x0, [x29, #24]
	BaseType_t xAlreadyYielded = pdFALSE;
   12348:	f90017bf 	str	xzr, [x29, #40]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1234c:	f9400fa0 	ldr	x0, [x29, #24]
   12350:	f100001f 	cmp	x0, #0x0
   12354:	540000e0 	b.eq	12370 <vTaskDelay+0x34>  // b.none
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
   12358:	940001f2 	bl	12b20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1235c:	d2800001 	mov	x1, #0x0                   	// #0
   12360:	f9400fa0 	ldr	x0, [x29, #24]
   12364:	9400072f 	bl	14020 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
   12368:	940001f7 	bl	12b44 <xTaskResumeAll>
   1236c:	f90017a0 	str	x0, [x29, #40]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   12370:	f94017a0 	ldr	x0, [x29, #40]
   12374:	f100001f 	cmp	x0, #0x0
   12378:	54000041 	b.ne	12380 <vTaskDelay+0x44>  // b.any
		{
			portYIELD_WITHIN_API();
   1237c:	d4000003 	smc	#0x0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   12380:	d503201f 	nop
   12384:	a8c37bfd 	ldp	x29, x30, [sp], #48
   12388:	d65f03c0 	ret

000000000001238c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
   1238c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   12390:	910003fd 	mov	x29, sp
   12394:	f9000fa0 	str	x0, [x29, #24]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
   12398:	97fff842 	bl	104a0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
   1239c:	f9400fa0 	ldr	x0, [x29, #24]
   123a0:	f100001f 	cmp	x0, #0x0
   123a4:	540000a1 	b.ne	123b8 <uxTaskPriorityGet+0x2c>  // b.any
   123a8:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   123ac:	911da000 	add	x0, x0, #0x768
   123b0:	f9400000 	ldr	x0, [x0]
   123b4:	14000002 	b	123bc <uxTaskPriorityGet+0x30>
   123b8:	f9400fa0 	ldr	x0, [x29, #24]
   123bc:	f90017a0 	str	x0, [x29, #40]
			uxReturn = pxTCB->uxPriority;
   123c0:	f94017a0 	ldr	x0, [x29, #40]
   123c4:	f9402c00 	ldr	x0, [x0, #88]
   123c8:	f90013a0 	str	x0, [x29, #32]
		}
		taskEXIT_CRITICAL();
   123cc:	97fff845 	bl	104e0 <vPortExitCritical>

		return uxReturn;
   123d0:	f94013a0 	ldr	x0, [x29, #32]
	}
   123d4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   123d8:	d65f03c0 	ret

00000000000123dc <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
	{
   123dc:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   123e0:	910003fd 	mov	x29, sp
   123e4:	f9000fa0 	str	x0, [x29, #24]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
   123e8:	97fff898 	bl	10648 <uxPortSetInterruptMask>
   123ec:	f9001fa0 	str	x0, [x29, #56]
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
   123f0:	f9400fa0 	ldr	x0, [x29, #24]
   123f4:	f100001f 	cmp	x0, #0x0
   123f8:	540000a1 	b.ne	1240c <uxTaskPriorityGetFromISR+0x30>  // b.any
   123fc:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12400:	911da000 	add	x0, x0, #0x768
   12404:	f9400000 	ldr	x0, [x0]
   12408:	14000002 	b	12410 <uxTaskPriorityGetFromISR+0x34>
   1240c:	f9400fa0 	ldr	x0, [x29, #24]
   12410:	f9001ba0 	str	x0, [x29, #48]
			uxReturn = pxTCB->uxPriority;
   12414:	f9401ba0 	ldr	x0, [x29, #48]
   12418:	f9402c00 	ldr	x0, [x0, #88]
   1241c:	f90017a0 	str	x0, [x29, #40]
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
   12420:	f9401fa0 	ldr	x0, [x29, #56]
   12424:	97fff875 	bl	105f8 <vPortClearInterruptMask>

		return uxReturn;
   12428:	f94017a0 	ldr	x0, [x29, #40]
	}
   1242c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   12430:	d65f03c0 	ret

0000000000012434 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
   12434:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   12438:	910003fd 	mov	x29, sp
   1243c:	f9000fa0 	str	x0, [x29, #24]
   12440:	f9000ba1 	str	x1, [x29, #16]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
   12444:	f9001fbf 	str	xzr, [x29, #56]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   12448:	f9400ba0 	ldr	x0, [x29, #16]
   1244c:	f100101f 	cmp	x0, #0x4
   12450:	54000069 	b.ls	1245c <vTaskPrioritySet+0x28>  // b.plast
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   12454:	d2800080 	mov	x0, #0x4                   	// #4
   12458:	f9000ba0 	str	x0, [x29, #16]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
   1245c:	97fff811 	bl	104a0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
   12460:	f9400fa0 	ldr	x0, [x29, #24]
   12464:	f100001f 	cmp	x0, #0x0
   12468:	540000a1 	b.ne	1247c <vTaskPrioritySet+0x48>  // b.any
   1246c:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12470:	911da000 	add	x0, x0, #0x768
   12474:	f9400000 	ldr	x0, [x0]
   12478:	14000002 	b	12480 <vTaskPrioritySet+0x4c>
   1247c:	f9400fa0 	ldr	x0, [x29, #24]
   12480:	f9001ba0 	str	x0, [x29, #48]
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
			}
			#else
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
   12484:	f9401ba0 	ldr	x0, [x29, #48]
   12488:	f9402c00 	ldr	x0, [x0, #88]
   1248c:	f90017a0 	str	x0, [x29, #40]
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
   12490:	f94017a1 	ldr	x1, [x29, #40]
   12494:	f9400ba0 	ldr	x0, [x29, #16]
   12498:	eb00003f 	cmp	x1, x0
   1249c:	54000da0 	b.eq	12650 <vTaskPrioritySet+0x21c>  // b.none
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
   124a0:	f9400ba1 	ldr	x1, [x29, #16]
   124a4:	f94017a0 	ldr	x0, [x29, #40]
   124a8:	eb00003f 	cmp	x1, x0
   124ac:	54000229 	b.ls	124f0 <vTaskPrioritySet+0xbc>  // b.plast
				{
					if( pxTCB != pxCurrentTCB )
   124b0:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   124b4:	911da000 	add	x0, x0, #0x768
   124b8:	f9400000 	ldr	x0, [x0]
   124bc:	f9401ba1 	ldr	x1, [x29, #48]
   124c0:	eb00003f 	cmp	x1, x0
   124c4:	54000260 	b.eq	12510 <vTaskPrioritySet+0xdc>  // b.none
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
   124c8:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   124cc:	911da000 	add	x0, x0, #0x768
   124d0:	f9400000 	ldr	x0, [x0]
   124d4:	f9402c01 	ldr	x1, [x0, #88]
   124d8:	f9400ba0 	ldr	x0, [x29, #16]
   124dc:	eb00003f 	cmp	x1, x0
   124e0:	54000188 	b.hi	12510 <vTaskPrioritySet+0xdc>  // b.pmore
						{
							xYieldRequired = pdTRUE;
   124e4:	d2800020 	mov	x0, #0x1                   	// #1
   124e8:	f9001fa0 	str	x0, [x29, #56]
   124ec:	14000009 	b	12510 <vTaskPrioritySet+0xdc>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
   124f0:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   124f4:	911da000 	add	x0, x0, #0x768
   124f8:	f9400000 	ldr	x0, [x0]
   124fc:	f9401ba1 	ldr	x1, [x29, #48]
   12500:	eb00003f 	cmp	x1, x0
   12504:	54000061 	b.ne	12510 <vTaskPrioritySet+0xdc>  // b.any
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
   12508:	d2800020 	mov	x0, #0x1                   	// #1
   1250c:	f9001fa0 	str	x0, [x29, #56]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
   12510:	f9401ba0 	ldr	x0, [x29, #48]
   12514:	f9402c00 	ldr	x0, [x0, #88]
   12518:	f90013a0 	str	x0, [x29, #32]
					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
				}
				#else
				{
					pxTCB->uxPriority = uxNewPriority;
   1251c:	f9401ba0 	ldr	x0, [x29, #48]
   12520:	f9400ba1 	ldr	x1, [x29, #16]
   12524:	f9002c01 	str	x1, [x0, #88]
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   12528:	f9401ba0 	ldr	x0, [x29, #48]
   1252c:	f9401800 	ldr	x0, [x0, #48]
   12530:	92610000 	and	x0, x0, #0x80000000
   12534:	f100001f 	cmp	x0, #0x0
   12538:	540000c1 	b.ne	12550 <vTaskPrioritySet+0x11c>  // b.any
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1253c:	d28000a1 	mov	x1, #0x5                   	// #5
   12540:	f9400ba0 	ldr	x0, [x29, #16]
   12544:	cb000021 	sub	x1, x1, x0
   12548:	f9401ba0 	ldr	x0, [x29, #48]
   1254c:	f9001801 	str	x1, [x0, #48]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   12550:	f9401ba0 	ldr	x0, [x29, #48]
   12554:	f9401402 	ldr	x2, [x0, #40]
   12558:	f94013a1 	ldr	x1, [x29, #32]
   1255c:	aa0103e0 	mov	x0, x1
   12560:	d37ef400 	lsl	x0, x0, #2
   12564:	8b010000 	add	x0, x0, x1
   12568:	d37df000 	lsl	x0, x0, #3
   1256c:	f0000001 	adrp	x1, 15000 <prvHeapInit+0x50>
   12570:	911dc021 	add	x1, x1, #0x770
   12574:	8b010000 	add	x0, x0, x1
   12578:	eb00005f 	cmp	x2, x0
   1257c:	54000061 	b.ne	12588 <vTaskPrioritySet+0x154>  // b.any
   12580:	52800020 	mov	w0, #0x1                   	// #1
   12584:	14000002 	b	1258c <vTaskPrioritySet+0x158>
   12588:	52800000 	mov	w0, #0x0                   	// #0
   1258c:	7100001f 	cmp	w0, #0x0
   12590:	54000580 	b.eq	12640 <vTaskPrioritySet+0x20c>  // b.none
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   12594:	f9401ba0 	ldr	x0, [x29, #48]
   12598:	91002000 	add	x0, x0, #0x8
   1259c:	97fffa5e 	bl	10f14 <uxListRemove>
   125a0:	f100001f 	cmp	x0, #0x0
   125a4:	540001a1 	b.ne	125d8 <vTaskPrioritySet+0x1a4>  // b.any
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
   125a8:	f94013a0 	ldr	x0, [x29, #32]
   125ac:	2a0003e1 	mov	w1, w0
   125b0:	d2800020 	mov	x0, #0x1                   	// #1
   125b4:	9ac12000 	lsl	x0, x0, x1
   125b8:	aa2003e1 	mvn	x1, x0
   125bc:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   125c0:	9124a000 	add	x0, x0, #0x928
   125c4:	f9400000 	ldr	x0, [x0]
   125c8:	8a000021 	and	x1, x1, x0
   125cc:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   125d0:	9124a000 	add	x0, x0, #0x928
   125d4:	f9000001 	str	x1, [x0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
   125d8:	f9401ba0 	ldr	x0, [x29, #48]
   125dc:	f9402c00 	ldr	x0, [x0, #88]
   125e0:	2a0003e1 	mov	w1, w0
   125e4:	d2800020 	mov	x0, #0x1                   	// #1
   125e8:	9ac12001 	lsl	x1, x0, x1
   125ec:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   125f0:	9124a000 	add	x0, x0, #0x928
   125f4:	f9400000 	ldr	x0, [x0]
   125f8:	aa000021 	orr	x1, x1, x0
   125fc:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12600:	9124a000 	add	x0, x0, #0x928
   12604:	f9000001 	str	x1, [x0]
   12608:	f9401ba0 	ldr	x0, [x29, #48]
   1260c:	f9402c01 	ldr	x1, [x0, #88]
   12610:	aa0103e0 	mov	x0, x1
   12614:	d37ef400 	lsl	x0, x0, #2
   12618:	8b010000 	add	x0, x0, x1
   1261c:	d37df000 	lsl	x0, x0, #3
   12620:	f0000001 	adrp	x1, 15000 <prvHeapInit+0x50>
   12624:	911dc021 	add	x1, x1, #0x770
   12628:	8b010002 	add	x2, x0, x1
   1262c:	f9401ba0 	ldr	x0, [x29, #48]
   12630:	91002000 	add	x0, x0, #0x8
   12634:	aa0003e1 	mov	x1, x0
   12638:	aa0203e0 	mov	x0, x2
   1263c:	97fff9e4 	bl	10dcc <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
   12640:	f9401fa0 	ldr	x0, [x29, #56]
   12644:	f100001f 	cmp	x0, #0x0
   12648:	54000040 	b.eq	12650 <vTaskPrioritySet+0x21c>  // b.none
				{
					taskYIELD_IF_USING_PREEMPTION();
   1264c:	d4000003 	smc	#0x0
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
   12650:	97fff7a4 	bl	104e0 <vPortExitCritical>
	}
   12654:	d503201f 	nop
   12658:	a8c47bfd 	ldp	x29, x30, [sp], #64
   1265c:	d65f03c0 	ret

0000000000012660 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   12660:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   12664:	910003fd 	mov	x29, sp
   12668:	f9000fa0 	str	x0, [x29, #24]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1266c:	97fff78d 	bl	104a0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   12670:	f9400fa0 	ldr	x0, [x29, #24]
   12674:	f100001f 	cmp	x0, #0x0
   12678:	540000a1 	b.ne	1268c <vTaskSuspend+0x2c>  // b.any
   1267c:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12680:	911da000 	add	x0, x0, #0x768
   12684:	f9400000 	ldr	x0, [x0]
   12688:	14000002 	b	12690 <vTaskSuspend+0x30>
   1268c:	f9400fa0 	ldr	x0, [x29, #24]
   12690:	f90017a0 	str	x0, [x29, #40]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   12694:	f94017a0 	ldr	x0, [x29, #40]
   12698:	91002000 	add	x0, x0, #0x8
   1269c:	97fffa1e 	bl	10f14 <uxListRemove>
   126a0:	f100001f 	cmp	x0, #0x0
   126a4:	54000341 	b.ne	1270c <vTaskSuspend+0xac>  // b.any
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   126a8:	f94017a0 	ldr	x0, [x29, #40]
   126ac:	f9402c01 	ldr	x1, [x0, #88]
   126b0:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   126b4:	911dc002 	add	x2, x0, #0x770
   126b8:	aa0103e0 	mov	x0, x1
   126bc:	d37ef400 	lsl	x0, x0, #2
   126c0:	8b010000 	add	x0, x0, x1
   126c4:	d37df000 	lsl	x0, x0, #3
   126c8:	8b000040 	add	x0, x2, x0
   126cc:	f9400000 	ldr	x0, [x0]
   126d0:	f100001f 	cmp	x0, #0x0
   126d4:	540001c1 	b.ne	1270c <vTaskSuspend+0xac>  // b.any
   126d8:	f94017a0 	ldr	x0, [x29, #40]
   126dc:	f9402c00 	ldr	x0, [x0, #88]
   126e0:	2a0003e1 	mov	w1, w0
   126e4:	d2800020 	mov	x0, #0x1                   	// #1
   126e8:	9ac12000 	lsl	x0, x0, x1
   126ec:	aa2003e1 	mvn	x1, x0
   126f0:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   126f4:	9124a000 	add	x0, x0, #0x928
   126f8:	f9400000 	ldr	x0, [x0]
   126fc:	8a000021 	and	x1, x1, x0
   12700:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12704:	9124a000 	add	x0, x0, #0x928
   12708:	f9000001 	str	x1, [x0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1270c:	f94017a0 	ldr	x0, [x29, #40]
   12710:	f9402800 	ldr	x0, [x0, #80]
   12714:	f100001f 	cmp	x0, #0x0
   12718:	54000080 	b.eq	12728 <vTaskSuspend+0xc8>  // b.none
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1271c:	f94017a0 	ldr	x0, [x29, #40]
   12720:	9100c000 	add	x0, x0, #0x30
   12724:	97fff9fc 	bl	10f14 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   12728:	f94017a0 	ldr	x0, [x29, #40]
   1272c:	91002001 	add	x1, x0, #0x8
   12730:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12734:	9123c000 	add	x0, x0, #0x8f0
   12738:	97fff9a5 	bl	10dcc <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
   1273c:	97fff769 	bl	104e0 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
   12740:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12744:	9124c000 	add	x0, x0, #0x930
   12748:	f9400000 	ldr	x0, [x0]
   1274c:	f100001f 	cmp	x0, #0x0
   12750:	54000080 	b.eq	12760 <vTaskSuspend+0x100>  // b.none
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   12754:	97fff753 	bl	104a0 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
   12758:	94000425 	bl	137ec <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
   1275c:	97fff761 	bl	104e0 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   12760:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12764:	911da000 	add	x0, x0, #0x768
   12768:	f9400000 	ldr	x0, [x0]
   1276c:	f94017a1 	ldr	x1, [x29, #40]
   12770:	eb00003f 	cmp	x1, x0
   12774:	540002a1 	b.ne	127c8 <vTaskSuspend+0x168>  // b.any
		{
			if( xSchedulerRunning != pdFALSE )
   12778:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   1277c:	9124c000 	add	x0, x0, #0x930
   12780:	f9400000 	ldr	x0, [x0]
   12784:	f100001f 	cmp	x0, #0x0
   12788:	54000060 	b.eq	12794 <vTaskSuspend+0x134>  // b.none
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
   1278c:	d4000003 	smc	#0x0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   12790:	1400000e 	b	127c8 <vTaskSuspend+0x168>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   12794:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12798:	9123c000 	add	x0, x0, #0x8f0
   1279c:	f9400001 	ldr	x1, [x0]
   127a0:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   127a4:	91246000 	add	x0, x0, #0x918
   127a8:	f9400000 	ldr	x0, [x0]
   127ac:	eb00003f 	cmp	x1, x0
   127b0:	540000a1 	b.ne	127c4 <vTaskSuspend+0x164>  // b.any
					pxCurrentTCB = NULL;
   127b4:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   127b8:	911da000 	add	x0, x0, #0x768
   127bc:	f900001f 	str	xzr, [x0]
	}
   127c0:	14000002 	b	127c8 <vTaskSuspend+0x168>
					vTaskSwitchContext();
   127c4:	94000262 	bl	1314c <vTaskSwitchContext>
	}
   127c8:	d503201f 	nop
   127cc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   127d0:	d65f03c0 	ret

00000000000127d4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
   127d4:	d10083ff 	sub	sp, sp, #0x20
   127d8:	f90007e0 	str	x0, [sp, #8]
	BaseType_t xReturn = pdFALSE;
   127dc:	f9000fff 	str	xzr, [sp, #24]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
   127e0:	f94007e0 	ldr	x0, [sp, #8]
   127e4:	f9000be0 	str	x0, [sp, #16]

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
   127e8:	f9400be0 	ldr	x0, [sp, #16]
   127ec:	f9401401 	ldr	x1, [x0, #40]
   127f0:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   127f4:	9123c000 	add	x0, x0, #0x8f0
   127f8:	eb00003f 	cmp	x1, x0
   127fc:	54000061 	b.ne	12808 <prvTaskIsTaskSuspended+0x34>  // b.any
   12800:	52800020 	mov	w0, #0x1                   	// #1
   12804:	14000002 	b	1280c <prvTaskIsTaskSuspended+0x38>
   12808:	52800000 	mov	w0, #0x0                   	// #0
   1280c:	7100001f 	cmp	w0, #0x0
   12810:	54000240 	b.eq	12858 <prvTaskIsTaskSuspended+0x84>  // b.none
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
   12814:	f9400be0 	ldr	x0, [sp, #16]
   12818:	f9402801 	ldr	x1, [x0, #80]
   1281c:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12820:	91226000 	add	x0, x0, #0x898
   12824:	eb00003f 	cmp	x1, x0
   12828:	54000180 	b.eq	12858 <prvTaskIsTaskSuspended+0x84>  // b.none
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
   1282c:	f9400be0 	ldr	x0, [sp, #16]
   12830:	f9402800 	ldr	x0, [x0, #80]
   12834:	f100001f 	cmp	x0, #0x0
   12838:	54000061 	b.ne	12844 <prvTaskIsTaskSuspended+0x70>  // b.any
   1283c:	52800020 	mov	w0, #0x1                   	// #1
   12840:	14000002 	b	12848 <prvTaskIsTaskSuspended+0x74>
   12844:	52800000 	mov	w0, #0x0                   	// #0
   12848:	7100001f 	cmp	w0, #0x0
   1284c:	54000060 	b.eq	12858 <prvTaskIsTaskSuspended+0x84>  // b.none
				{
					xReturn = pdTRUE;
   12850:	d2800020 	mov	x0, #0x1                   	// #1
   12854:	f9000fe0 	str	x0, [sp, #24]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   12858:	f9400fe0 	ldr	x0, [sp, #24]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
   1285c:	910083ff 	add	sp, sp, #0x20
   12860:	d65f03c0 	ret

0000000000012864 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
   12864:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   12868:	910003fd 	mov	x29, sp
   1286c:	f9000fa0 	str	x0, [x29, #24]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
   12870:	f9400fa0 	ldr	x0, [x29, #24]
   12874:	f90017a0 	str	x0, [x29, #40]
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
   12878:	f94017a0 	ldr	x0, [x29, #40]
   1287c:	f100001f 	cmp	x0, #0x0
   12880:	54000660 	b.eq	1294c <vTaskResume+0xe8>  // b.none
   12884:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12888:	911da000 	add	x0, x0, #0x768
   1288c:	f9400000 	ldr	x0, [x0]
   12890:	f94017a1 	ldr	x1, [x29, #40]
   12894:	eb00003f 	cmp	x1, x0
   12898:	540005a0 	b.eq	1294c <vTaskResume+0xe8>  // b.none
		{
			taskENTER_CRITICAL();
   1289c:	97fff701 	bl	104a0 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
   128a0:	f94017a0 	ldr	x0, [x29, #40]
   128a4:	97ffffcc 	bl	127d4 <prvTaskIsTaskSuspended>
   128a8:	f100001f 	cmp	x0, #0x0
   128ac:	540004e0 	b.eq	12948 <vTaskResume+0xe4>  // b.none
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
   128b0:	f94017a0 	ldr	x0, [x29, #40]
   128b4:	91002000 	add	x0, x0, #0x8
   128b8:	97fff997 	bl	10f14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
   128bc:	f94017a0 	ldr	x0, [x29, #40]
   128c0:	f9402c00 	ldr	x0, [x0, #88]
   128c4:	2a0003e1 	mov	w1, w0
   128c8:	d2800020 	mov	x0, #0x1                   	// #1
   128cc:	9ac12001 	lsl	x1, x0, x1
   128d0:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   128d4:	9124a000 	add	x0, x0, #0x928
   128d8:	f9400000 	ldr	x0, [x0]
   128dc:	aa000021 	orr	x1, x1, x0
   128e0:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   128e4:	9124a000 	add	x0, x0, #0x928
   128e8:	f9000001 	str	x1, [x0]
   128ec:	f94017a0 	ldr	x0, [x29, #40]
   128f0:	f9402c01 	ldr	x1, [x0, #88]
   128f4:	aa0103e0 	mov	x0, x1
   128f8:	d37ef400 	lsl	x0, x0, #2
   128fc:	8b010000 	add	x0, x0, x1
   12900:	d37df000 	lsl	x0, x0, #3
   12904:	f0000001 	adrp	x1, 15000 <prvHeapInit+0x50>
   12908:	911dc021 	add	x1, x1, #0x770
   1290c:	8b010002 	add	x2, x0, x1
   12910:	f94017a0 	ldr	x0, [x29, #40]
   12914:	91002000 	add	x0, x0, #0x8
   12918:	aa0003e1 	mov	x1, x0
   1291c:	aa0203e0 	mov	x0, x2
   12920:	97fff92b 	bl	10dcc <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   12924:	f94017a0 	ldr	x0, [x29, #40]
   12928:	f9402c01 	ldr	x1, [x0, #88]
   1292c:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12930:	911da000 	add	x0, x0, #0x768
   12934:	f9400000 	ldr	x0, [x0]
   12938:	f9402c00 	ldr	x0, [x0, #88]
   1293c:	eb00003f 	cmp	x1, x0
   12940:	54000043 	b.cc	12948 <vTaskResume+0xe4>  // b.lo, b.ul, b.last
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
   12944:	d4000003 	smc	#0x0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
   12948:	97fff6e6 	bl	104e0 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1294c:	d503201f 	nop
   12950:	a8c37bfd 	ldp	x29, x30, [sp], #48
   12954:	d65f03c0 	ret

0000000000012958 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
   12958:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   1295c:	910003fd 	mov	x29, sp
   12960:	f9000fa0 	str	x0, [x29, #24]
	BaseType_t xYieldRequired = pdFALSE;
   12964:	f9001fbf 	str	xzr, [x29, #56]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
   12968:	f9400fa0 	ldr	x0, [x29, #24]
   1296c:	f9001ba0 	str	x0, [x29, #48]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   12970:	97fff736 	bl	10648 <uxPortSetInterruptMask>
   12974:	f90017a0 	str	x0, [x29, #40]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
   12978:	f9401ba0 	ldr	x0, [x29, #48]
   1297c:	97ffff96 	bl	127d4 <prvTaskIsTaskSuspended>
   12980:	f100001f 	cmp	x0, #0x0
   12984:	54000660 	b.eq	12a50 <xTaskResumeFromISR+0xf8>  // b.none
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   12988:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   1298c:	9125a000 	add	x0, x0, #0x968
   12990:	f9400000 	ldr	x0, [x0]
   12994:	f100001f 	cmp	x0, #0x0
   12998:	54000521 	b.ne	12a3c <xTaskResumeFromISR+0xe4>  // b.any
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1299c:	f9401ba0 	ldr	x0, [x29, #48]
   129a0:	f9402c01 	ldr	x1, [x0, #88]
   129a4:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   129a8:	911da000 	add	x0, x0, #0x768
   129ac:	f9400000 	ldr	x0, [x0]
   129b0:	f9402c00 	ldr	x0, [x0, #88]
   129b4:	eb00003f 	cmp	x1, x0
   129b8:	54000063 	b.cc	129c4 <xTaskResumeFromISR+0x6c>  // b.lo, b.ul, b.last
					{
						xYieldRequired = pdTRUE;
   129bc:	d2800020 	mov	x0, #0x1                   	// #1
   129c0:	f9001fa0 	str	x0, [x29, #56]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   129c4:	f9401ba0 	ldr	x0, [x29, #48]
   129c8:	91002000 	add	x0, x0, #0x8
   129cc:	97fff952 	bl	10f14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
   129d0:	f9401ba0 	ldr	x0, [x29, #48]
   129d4:	f9402c00 	ldr	x0, [x0, #88]
   129d8:	2a0003e1 	mov	w1, w0
   129dc:	d2800020 	mov	x0, #0x1                   	// #1
   129e0:	9ac12001 	lsl	x1, x0, x1
   129e4:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   129e8:	9124a000 	add	x0, x0, #0x928
   129ec:	f9400000 	ldr	x0, [x0]
   129f0:	aa000021 	orr	x1, x1, x0
   129f4:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   129f8:	9124a000 	add	x0, x0, #0x928
   129fc:	f9000001 	str	x1, [x0]
   12a00:	f9401ba0 	ldr	x0, [x29, #48]
   12a04:	f9402c01 	ldr	x1, [x0, #88]
   12a08:	aa0103e0 	mov	x0, x1
   12a0c:	d37ef400 	lsl	x0, x0, #2
   12a10:	8b010000 	add	x0, x0, x1
   12a14:	d37df000 	lsl	x0, x0, #3
   12a18:	f0000001 	adrp	x1, 15000 <prvHeapInit+0x50>
   12a1c:	911dc021 	add	x1, x1, #0x770
   12a20:	8b010002 	add	x2, x0, x1
   12a24:	f9401ba0 	ldr	x0, [x29, #48]
   12a28:	91002000 	add	x0, x0, #0x8
   12a2c:	aa0003e1 	mov	x1, x0
   12a30:	aa0203e0 	mov	x0, x2
   12a34:	97fff8e6 	bl	10dcc <vListInsertEnd>
   12a38:	14000006 	b	12a50 <xTaskResumeFromISR+0xf8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
   12a3c:	f9401ba0 	ldr	x0, [x29, #48]
   12a40:	9100c001 	add	x1, x0, #0x30
   12a44:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12a48:	91226000 	add	x0, x0, #0x898
   12a4c:	97fff8e0 	bl	10dcc <vListInsertEnd>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   12a50:	f94017a0 	ldr	x0, [x29, #40]
   12a54:	97fff6e9 	bl	105f8 <vPortClearInterruptMask>

		return xYieldRequired;
   12a58:	f9401fa0 	ldr	x0, [x29, #56]
	}
   12a5c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   12a60:	d65f03c0 	ret

0000000000012a64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   12a64:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   12a68:	910003fd 	mov	x29, sp
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   12a6c:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12a70:	91258002 	add	x2, x0, #0x960
   12a74:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12a78:	91116001 	add	x1, x0, #0x458
   12a7c:	b0000000 	adrp	x0, 13000 <xTaskIncrementTick+0x25c>
   12a80:	91184000 	add	x0, x0, #0x610
   12a84:	aa0203e5 	mov	x5, x2
   12a88:	d2800004 	mov	x4, #0x0                   	// #0
   12a8c:	d2800003 	mov	x3, #0x0                   	// #0
   12a90:	52801002 	mov	w2, #0x80                  	// #128
   12a94:	97fffc93 	bl	11ce0 <xTaskCreate>
   12a98:	f9000fa0 	str	x0, [x29, #24]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   12a9c:	f9400fa0 	ldr	x0, [x29, #24]
   12aa0:	f100041f 	cmp	x0, #0x1
   12aa4:	54000201 	b.ne	12ae4 <vTaskStartScheduler+0x80>  // b.any
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   12aa8:	d50342df 	msr	daifset, #0x2
   12aac:	d5033f9f 	dsb	sy
   12ab0:	d5033fdf 	isb
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   12ab4:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12ab8:	91256000 	add	x0, x0, #0x958
   12abc:	92800001 	mov	x1, #0xffffffffffffffff    	// #-1
   12ac0:	f9000001 	str	x1, [x0]
		xSchedulerRunning = pdTRUE;
   12ac4:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12ac8:	9124c000 	add	x0, x0, #0x930
   12acc:	d2800021 	mov	x1, #0x1                   	// #1
   12ad0:	f9000001 	str	x1, [x0]
		xTickCount = ( TickType_t ) 0U;
   12ad4:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12ad8:	91248000 	add	x0, x0, #0x920
   12adc:	f900001f 	str	xzr, [x0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   12ae0:	97fff656 	bl	10438 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   12ae4:	d503201f 	nop
   12ae8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   12aec:	d65f03c0 	ret

0000000000012af0 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
   12af0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   12af4:	910003fd 	mov	x29, sp
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
   12af8:	d50342df 	msr	daifset, #0x2
   12afc:	d5033f9f 	dsb	sy
   12b00:	d5033fdf 	isb
	xSchedulerRunning = pdFALSE;
   12b04:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12b08:	9124c000 	add	x0, x0, #0x930
   12b0c:	f900001f 	str	xzr, [x0]
	vPortEndScheduler();
   12b10:	97fff662 	bl	10498 <vPortEndScheduler>
}
   12b14:	d503201f 	nop
   12b18:	a8c17bfd 	ldp	x29, x30, [sp], #16
   12b1c:	d65f03c0 	ret

0000000000012b20 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   12b20:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12b24:	9125a000 	add	x0, x0, #0x968
   12b28:	f9400000 	ldr	x0, [x0]
   12b2c:	91000401 	add	x1, x0, #0x1
   12b30:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12b34:	9125a000 	add	x0, x0, #0x968
   12b38:	f9000001 	str	x1, [x0]
}
   12b3c:	d503201f 	nop
   12b40:	d65f03c0 	ret

0000000000012b44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   12b44:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   12b48:	910003fd 	mov	x29, sp
TCB_t *pxTCB = NULL;
   12b4c:	f90017bf 	str	xzr, [x29, #40]
BaseType_t xAlreadyYielded = pdFALSE;
   12b50:	f90013bf 	str	xzr, [x29, #32]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   12b54:	97fff653 	bl	104a0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
   12b58:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12b5c:	9125a000 	add	x0, x0, #0x968
   12b60:	f9400000 	ldr	x0, [x0]
   12b64:	d1000401 	sub	x1, x0, #0x1
   12b68:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12b6c:	9125a000 	add	x0, x0, #0x968
   12b70:	f9000001 	str	x1, [x0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   12b74:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12b78:	9125a000 	add	x0, x0, #0x968
   12b7c:	f9400000 	ldr	x0, [x0]
   12b80:	f100001f 	cmp	x0, #0x0
   12b84:	54000c01 	b.ne	12d04 <xTaskResumeAll+0x1c0>  // b.any
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   12b88:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12b8c:	91246000 	add	x0, x0, #0x918
   12b90:	f9400000 	ldr	x0, [x0]
   12b94:	f100001f 	cmp	x0, #0x0
   12b98:	54000b60 	b.eq	12d04 <xTaskResumeAll+0x1c0>  // b.none
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   12b9c:	14000032 	b	12c64 <xTaskResumeAll+0x120>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   12ba0:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12ba4:	91226000 	add	x0, x0, #0x898
   12ba8:	f9400c00 	ldr	x0, [x0, #24]
   12bac:	f9400c00 	ldr	x0, [x0, #24]
   12bb0:	f90017a0 	str	x0, [x29, #40]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   12bb4:	f94017a0 	ldr	x0, [x29, #40]
   12bb8:	9100c000 	add	x0, x0, #0x30
   12bbc:	97fff8d6 	bl	10f14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   12bc0:	f94017a0 	ldr	x0, [x29, #40]
   12bc4:	91002000 	add	x0, x0, #0x8
   12bc8:	97fff8d3 	bl	10f14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
   12bcc:	f94017a0 	ldr	x0, [x29, #40]
   12bd0:	f9402c00 	ldr	x0, [x0, #88]
   12bd4:	2a0003e1 	mov	w1, w0
   12bd8:	d2800020 	mov	x0, #0x1                   	// #1
   12bdc:	9ac12001 	lsl	x1, x0, x1
   12be0:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12be4:	9124a000 	add	x0, x0, #0x928
   12be8:	f9400000 	ldr	x0, [x0]
   12bec:	aa000021 	orr	x1, x1, x0
   12bf0:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12bf4:	9124a000 	add	x0, x0, #0x928
   12bf8:	f9000001 	str	x1, [x0]
   12bfc:	f94017a0 	ldr	x0, [x29, #40]
   12c00:	f9402c01 	ldr	x1, [x0, #88]
   12c04:	aa0103e0 	mov	x0, x1
   12c08:	d37ef400 	lsl	x0, x0, #2
   12c0c:	8b010000 	add	x0, x0, x1
   12c10:	d37df000 	lsl	x0, x0, #3
   12c14:	f0000001 	adrp	x1, 15000 <prvHeapInit+0x50>
   12c18:	911dc021 	add	x1, x1, #0x770
   12c1c:	8b010002 	add	x2, x0, x1
   12c20:	f94017a0 	ldr	x0, [x29, #40]
   12c24:	91002000 	add	x0, x0, #0x8
   12c28:	aa0003e1 	mov	x1, x0
   12c2c:	aa0203e0 	mov	x0, x2
   12c30:	97fff867 	bl	10dcc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   12c34:	f94017a0 	ldr	x0, [x29, #40]
   12c38:	f9402c01 	ldr	x1, [x0, #88]
   12c3c:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12c40:	911da000 	add	x0, x0, #0x768
   12c44:	f9400000 	ldr	x0, [x0]
   12c48:	f9402c00 	ldr	x0, [x0, #88]
   12c4c:	eb00003f 	cmp	x1, x0
   12c50:	540000a3 	b.cc	12c64 <xTaskResumeAll+0x120>  // b.lo, b.ul, b.last
					{
						xYieldPending = pdTRUE;
   12c54:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12c58:	91250000 	add	x0, x0, #0x940
   12c5c:	d2800021 	mov	x1, #0x1                   	// #1
   12c60:	f9000001 	str	x1, [x0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   12c64:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12c68:	91226000 	add	x0, x0, #0x898
   12c6c:	f9400000 	ldr	x0, [x0]
   12c70:	f100001f 	cmp	x0, #0x0
   12c74:	54fff961 	b.ne	12ba0 <xTaskResumeAll+0x5c>  // b.any
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   12c78:	f94017a0 	ldr	x0, [x29, #40]
   12c7c:	f100001f 	cmp	x0, #0x0
   12c80:	54000040 	b.eq	12c88 <xTaskResumeAll+0x144>  // b.none
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   12c84:	940002da 	bl	137ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   12c88:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12c8c:	9124e000 	add	x0, x0, #0x938
   12c90:	f9400000 	ldr	x0, [x0]
   12c94:	f9000fa0 	str	x0, [x29, #24]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   12c98:	f9400fa0 	ldr	x0, [x29, #24]
   12c9c:	f100001f 	cmp	x0, #0x0
   12ca0:	54000220 	b.eq	12ce4 <xTaskResumeAll+0x1a0>  // b.none
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   12ca4:	94000040 	bl	12da4 <xTaskIncrementTick>
   12ca8:	f100001f 	cmp	x0, #0x0
   12cac:	540000a0 	b.eq	12cc0 <xTaskResumeAll+0x17c>  // b.none
							{
								xYieldPending = pdTRUE;
   12cb0:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12cb4:	91250000 	add	x0, x0, #0x940
   12cb8:	d2800021 	mov	x1, #0x1                   	// #1
   12cbc:	f9000001 	str	x1, [x0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   12cc0:	f9400fa0 	ldr	x0, [x29, #24]
   12cc4:	d1000400 	sub	x0, x0, #0x1
   12cc8:	f9000fa0 	str	x0, [x29, #24]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   12ccc:	f9400fa0 	ldr	x0, [x29, #24]
   12cd0:	f100001f 	cmp	x0, #0x0
   12cd4:	54fffe81 	b.ne	12ca4 <xTaskResumeAll+0x160>  // b.any

						uxPendedTicks = 0;
   12cd8:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12cdc:	9124e000 	add	x0, x0, #0x938
   12ce0:	f900001f 	str	xzr, [x0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   12ce4:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12ce8:	91250000 	add	x0, x0, #0x940
   12cec:	f9400000 	ldr	x0, [x0]
   12cf0:	f100001f 	cmp	x0, #0x0
   12cf4:	54000080 	b.eq	12d04 <xTaskResumeAll+0x1c0>  // b.none
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   12cf8:	d2800020 	mov	x0, #0x1                   	// #1
   12cfc:	f90013a0 	str	x0, [x29, #32]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   12d00:	d4000003 	smc	#0x0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   12d04:	97fff5f7 	bl	104e0 <vPortExitCritical>

	return xAlreadyYielded;
   12d08:	f94013a0 	ldr	x0, [x29, #32]
}
   12d0c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   12d10:	d65f03c0 	ret

0000000000012d14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   12d14:	d10043ff 	sub	sp, sp, #0x10
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   12d18:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12d1c:	91248000 	add	x0, x0, #0x920
   12d20:	f9400000 	ldr	x0, [x0]
   12d24:	f90007e0 	str	x0, [sp, #8]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   12d28:	f94007e0 	ldr	x0, [sp, #8]
}
   12d2c:	910043ff 	add	sp, sp, #0x10
   12d30:	d65f03c0 	ret

0000000000012d34 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
   12d34:	d10043ff 	sub	sp, sp, #0x10
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
   12d38:	f90007ff 	str	xzr, [sp, #8]
	{
		xReturn = xTickCount;
   12d3c:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12d40:	91248000 	add	x0, x0, #0x920
   12d44:	f9400000 	ldr	x0, [x0]
   12d48:	f90003e0 	str	x0, [sp]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   12d4c:	f94003e0 	ldr	x0, [sp]
}
   12d50:	910043ff 	add	sp, sp, #0x10
   12d54:	d65f03c0 	ret

0000000000012d58 <uxTaskGetNumberOfTasks>:

UBaseType_t uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
   12d58:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12d5c:	91246000 	add	x0, x0, #0x918
   12d60:	f9400000 	ldr	x0, [x0]
}
   12d64:	d65f03c0 	ret

0000000000012d68 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   12d68:	d10083ff 	sub	sp, sp, #0x20
   12d6c:	f90007e0 	str	x0, [sp, #8]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
   12d70:	f94007e0 	ldr	x0, [sp, #8]
   12d74:	f100001f 	cmp	x0, #0x0
   12d78:	540000a1 	b.ne	12d8c <pcTaskGetName+0x24>  // b.any
   12d7c:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12d80:	911da000 	add	x0, x0, #0x768
   12d84:	f9400000 	ldr	x0, [x0]
   12d88:	14000002 	b	12d90 <pcTaskGetName+0x28>
   12d8c:	f94007e0 	ldr	x0, [sp, #8]
   12d90:	f9000fe0 	str	x0, [sp, #24]
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
   12d94:	f9400fe0 	ldr	x0, [sp, #24]
   12d98:	9101a000 	add	x0, x0, #0x68
}
   12d9c:	910083ff 	add	sp, sp, #0x20
   12da0:	d65f03c0 	ret

0000000000012da4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   12da4:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   12da8:	910003fd 	mov	x29, sp
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   12dac:	f9001fbf 	str	xzr, [x29, #56]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   12db0:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12db4:	9125a000 	add	x0, x0, #0x968
   12db8:	f9400000 	ldr	x0, [x0]
   12dbc:	f100001f 	cmp	x0, #0x0
   12dc0:	54001161 	b.ne	12fec <xTaskIncrementTick+0x248>  // b.any
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
   12dc4:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12dc8:	91248000 	add	x0, x0, #0x920
   12dcc:	f9400000 	ldr	x0, [x0]
   12dd0:	91000400 	add	x0, x0, #0x1
   12dd4:	f9001ba0 	str	x0, [x29, #48]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   12dd8:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12ddc:	91248000 	add	x0, x0, #0x920
   12de0:	f9401ba1 	ldr	x1, [x29, #48]
   12de4:	f9000001 	str	x1, [x0]

		if( xConstTickCount == ( TickType_t ) 0U )
   12de8:	f9401ba0 	ldr	x0, [x29, #48]
   12dec:	f100001f 	cmp	x0, #0x0
   12df0:	540002e1 	b.ne	12e4c <xTaskIncrementTick+0xa8>  // b.any
		{
			taskSWITCH_DELAYED_LISTS();
   12df4:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12df8:	91222000 	add	x0, x0, #0x888
   12dfc:	f9400000 	ldr	x0, [x0]
   12e00:	f90017a0 	str	x0, [x29, #40]
   12e04:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12e08:	91224000 	add	x0, x0, #0x890
   12e0c:	f9400001 	ldr	x1, [x0]
   12e10:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12e14:	91222000 	add	x0, x0, #0x888
   12e18:	f9000001 	str	x1, [x0]
   12e1c:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12e20:	91224000 	add	x0, x0, #0x890
   12e24:	f94017a1 	ldr	x1, [x29, #40]
   12e28:	f9000001 	str	x1, [x0]
   12e2c:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12e30:	91252000 	add	x0, x0, #0x948
   12e34:	f9400000 	ldr	x0, [x0]
   12e38:	91000401 	add	x1, x0, #0x1
   12e3c:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12e40:	91252000 	add	x0, x0, #0x948
   12e44:	f9000001 	str	x1, [x0]
   12e48:	94000269 	bl	137ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   12e4c:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12e50:	91256000 	add	x0, x0, #0x958
   12e54:	f9400000 	ldr	x0, [x0]
   12e58:	f9401ba1 	ldr	x1, [x29, #48]
   12e5c:	eb00003f 	cmp	x1, x0
   12e60:	54000a43 	b.cc	12fa8 <xTaskIncrementTick+0x204>  // b.lo, b.ul, b.last
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   12e64:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12e68:	91222000 	add	x0, x0, #0x888
   12e6c:	f9400000 	ldr	x0, [x0]
   12e70:	f9400000 	ldr	x0, [x0]
   12e74:	f100001f 	cmp	x0, #0x0
   12e78:	54000061 	b.ne	12e84 <xTaskIncrementTick+0xe0>  // b.any
   12e7c:	52800020 	mov	w0, #0x1                   	// #1
   12e80:	14000002 	b	12e88 <xTaskIncrementTick+0xe4>
   12e84:	52800000 	mov	w0, #0x0                   	// #0
   12e88:	7100001f 	cmp	w0, #0x0
   12e8c:	540000c0 	b.eq	12ea4 <xTaskIncrementTick+0x100>  // b.none
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   12e90:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12e94:	91256000 	add	x0, x0, #0x958
   12e98:	92800001 	mov	x1, #0xffffffffffffffff    	// #-1
   12e9c:	f9000001 	str	x1, [x0]
					break;
   12ea0:	14000042 	b	12fa8 <xTaskIncrementTick+0x204>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   12ea4:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12ea8:	91222000 	add	x0, x0, #0x888
   12eac:	f9400000 	ldr	x0, [x0]
   12eb0:	f9400c00 	ldr	x0, [x0, #24]
   12eb4:	f9400c00 	ldr	x0, [x0, #24]
   12eb8:	f90013a0 	str	x0, [x29, #32]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   12ebc:	f94013a0 	ldr	x0, [x29, #32]
   12ec0:	f9400400 	ldr	x0, [x0, #8]
   12ec4:	f9000fa0 	str	x0, [x29, #24]

					if( xConstTickCount < xItemValue )
   12ec8:	f9401ba1 	ldr	x1, [x29, #48]
   12ecc:	f9400fa0 	ldr	x0, [x29, #24]
   12ed0:	eb00003f 	cmp	x1, x0
   12ed4:	540000c2 	b.cs	12eec <xTaskIncrementTick+0x148>  // b.hs, b.nlast
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   12ed8:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12edc:	91256000 	add	x0, x0, #0x958
   12ee0:	f9400fa1 	ldr	x1, [x29, #24]
   12ee4:	f9000001 	str	x1, [x0]
						break;
   12ee8:	14000030 	b	12fa8 <xTaskIncrementTick+0x204>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   12eec:	f94013a0 	ldr	x0, [x29, #32]
   12ef0:	91002000 	add	x0, x0, #0x8
   12ef4:	97fff808 	bl	10f14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   12ef8:	f94013a0 	ldr	x0, [x29, #32]
   12efc:	f9402800 	ldr	x0, [x0, #80]
   12f00:	f100001f 	cmp	x0, #0x0
   12f04:	54000080 	b.eq	12f14 <xTaskIncrementTick+0x170>  // b.none
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   12f08:	f94013a0 	ldr	x0, [x29, #32]
   12f0c:	9100c000 	add	x0, x0, #0x30
   12f10:	97fff801 	bl	10f14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   12f14:	f94013a0 	ldr	x0, [x29, #32]
   12f18:	f9402c00 	ldr	x0, [x0, #88]
   12f1c:	2a0003e1 	mov	w1, w0
   12f20:	d2800020 	mov	x0, #0x1                   	// #1
   12f24:	9ac12001 	lsl	x1, x0, x1
   12f28:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12f2c:	9124a000 	add	x0, x0, #0x928
   12f30:	f9400000 	ldr	x0, [x0]
   12f34:	aa000021 	orr	x1, x1, x0
   12f38:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12f3c:	9124a000 	add	x0, x0, #0x928
   12f40:	f9000001 	str	x1, [x0]
   12f44:	f94013a0 	ldr	x0, [x29, #32]
   12f48:	f9402c01 	ldr	x1, [x0, #88]
   12f4c:	aa0103e0 	mov	x0, x1
   12f50:	d37ef400 	lsl	x0, x0, #2
   12f54:	8b010000 	add	x0, x0, x1
   12f58:	d37df000 	lsl	x0, x0, #3
   12f5c:	f0000001 	adrp	x1, 15000 <prvHeapInit+0x50>
   12f60:	911dc021 	add	x1, x1, #0x770
   12f64:	8b010002 	add	x2, x0, x1
   12f68:	f94013a0 	ldr	x0, [x29, #32]
   12f6c:	91002000 	add	x0, x0, #0x8
   12f70:	aa0003e1 	mov	x1, x0
   12f74:	aa0203e0 	mov	x0, x2
   12f78:	97fff795 	bl	10dcc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   12f7c:	f94013a0 	ldr	x0, [x29, #32]
   12f80:	f9402c01 	ldr	x1, [x0, #88]
   12f84:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12f88:	911da000 	add	x0, x0, #0x768
   12f8c:	f9400000 	ldr	x0, [x0]
   12f90:	f9402c00 	ldr	x0, [x0, #88]
   12f94:	eb00003f 	cmp	x1, x0
   12f98:	54fff663 	b.cc	12e64 <xTaskIncrementTick+0xc0>  // b.lo, b.ul, b.last
						{
							xSwitchRequired = pdTRUE;
   12f9c:	d2800020 	mov	x0, #0x1                   	// #1
   12fa0:	f9001fa0 	str	x0, [x29, #56]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   12fa4:	17ffffb0 	b	12e64 <xTaskIncrementTick+0xc0>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   12fa8:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12fac:	911da000 	add	x0, x0, #0x768
   12fb0:	f9400000 	ldr	x0, [x0]
   12fb4:	f9402c01 	ldr	x1, [x0, #88]
   12fb8:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12fbc:	911dc002 	add	x2, x0, #0x770
   12fc0:	aa0103e0 	mov	x0, x1
   12fc4:	d37ef400 	lsl	x0, x0, #2
   12fc8:	8b010000 	add	x0, x0, x1
   12fcc:	d37df000 	lsl	x0, x0, #3
   12fd0:	8b000040 	add	x0, x2, x0
   12fd4:	f9400000 	ldr	x0, [x0]
   12fd8:	f100041f 	cmp	x0, #0x1
   12fdc:	54000169 	b.ls	13008 <xTaskIncrementTick+0x264>  // b.plast
			{
				xSwitchRequired = pdTRUE;
   12fe0:	d2800020 	mov	x0, #0x1                   	// #1
   12fe4:	f9001fa0 	str	x0, [x29, #56]
   12fe8:	14000008 	b	13008 <xTaskIncrementTick+0x264>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   12fec:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   12ff0:	9124e000 	add	x0, x0, #0x938
   12ff4:	f9400000 	ldr	x0, [x0]
   12ff8:	91000401 	add	x1, x0, #0x1
   12ffc:	f0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13000:	9124e000 	add	x0, x0, #0x938
   13004:	f9000001 	str	x1, [x0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   13008:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   1300c:	91250000 	add	x0, x0, #0x940
   13010:	f9400000 	ldr	x0, [x0]
   13014:	f100001f 	cmp	x0, #0x0
   13018:	54000060 	b.eq	13024 <xTaskIncrementTick+0x280>  // b.none
		{
			xSwitchRequired = pdTRUE;
   1301c:	d2800020 	mov	x0, #0x1                   	// #1
   13020:	f9001fa0 	str	x0, [x29, #56]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   13024:	f9401fa0 	ldr	x0, [x29, #56]
}
   13028:	a8c47bfd 	ldp	x29, x30, [sp], #64
   1302c:	d65f03c0 	ret

0000000000013030 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
   13030:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   13034:	910003fd 	mov	x29, sp
   13038:	f9000fa0 	str	x0, [x29, #24]
   1303c:	f9000ba1 	str	x1, [x29, #16]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
   13040:	f9400fa0 	ldr	x0, [x29, #24]
   13044:	f100001f 	cmp	x0, #0x0
   13048:	540000c1 	b.ne	13060 <vTaskSetApplicationTaskTag+0x30>  // b.any
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
   1304c:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13050:	911da000 	add	x0, x0, #0x768
   13054:	f9400000 	ldr	x0, [x0]
   13058:	f90017a0 	str	x0, [x29, #40]
   1305c:	14000003 	b	13068 <vTaskSetApplicationTaskTag+0x38>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
   13060:	f9400fa0 	ldr	x0, [x29, #24]
   13064:	f90017a0 	str	x0, [x29, #40]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   13068:	97fff50e 	bl	104a0 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
   1306c:	f94017a0 	ldr	x0, [x29, #40]
   13070:	f9400ba1 	ldr	x1, [x29, #16]
   13074:	f9003c01 	str	x1, [x0, #120]
		taskEXIT_CRITICAL();
   13078:	97fff51a 	bl	104e0 <vPortExitCritical>
	}
   1307c:	d503201f 	nop
   13080:	a8c37bfd 	ldp	x29, x30, [sp], #48
   13084:	d65f03c0 	ret

0000000000013088 <xTaskGetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
	{
   13088:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   1308c:	910003fd 	mov	x29, sp
   13090:	f9000fa0 	str	x0, [x29, #24]
	TCB_t *xTCB;
	TaskHookFunction_t xReturn;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
   13094:	f9400fa0 	ldr	x0, [x29, #24]
   13098:	f100001f 	cmp	x0, #0x0
   1309c:	540000c1 	b.ne	130b4 <xTaskGetApplicationTaskTag+0x2c>  // b.any
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
   130a0:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   130a4:	911da000 	add	x0, x0, #0x768
   130a8:	f9400000 	ldr	x0, [x0]
   130ac:	f90017a0 	str	x0, [x29, #40]
   130b0:	14000003 	b	130bc <xTaskGetApplicationTaskTag+0x34>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
   130b4:	f9400fa0 	ldr	x0, [x29, #24]
   130b8:	f90017a0 	str	x0, [x29, #40]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   130bc:	97fff4f9 	bl	104a0 <vPortEnterCritical>
		{
			xReturn = xTCB->pxTaskTag;
   130c0:	f94017a0 	ldr	x0, [x29, #40]
   130c4:	f9403c00 	ldr	x0, [x0, #120]
   130c8:	f90013a0 	str	x0, [x29, #32]
		}
		taskEXIT_CRITICAL();
   130cc:	97fff505 	bl	104e0 <vPortExitCritical>

		return xReturn;
   130d0:	f94013a0 	ldr	x0, [x29, #32]
	}
   130d4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   130d8:	d65f03c0 	ret

00000000000130dc <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
	{
   130dc:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   130e0:	910003fd 	mov	x29, sp
   130e4:	f9000fa0 	str	x0, [x29, #24]
   130e8:	f9000ba1 	str	x1, [x29, #16]
	TCB_t *xTCB;
	BaseType_t xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
   130ec:	f9400fa0 	ldr	x0, [x29, #24]
   130f0:	f100001f 	cmp	x0, #0x0
   130f4:	540000c1 	b.ne	1310c <xTaskCallApplicationTaskHook+0x30>  // b.any
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
   130f8:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   130fc:	911da000 	add	x0, x0, #0x768
   13100:	f9400000 	ldr	x0, [x0]
   13104:	f90017a0 	str	x0, [x29, #40]
   13108:	14000003 	b	13114 <xTaskCallApplicationTaskHook+0x38>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
   1310c:	f9400fa0 	ldr	x0, [x29, #24]
   13110:	f90017a0 	str	x0, [x29, #40]
		}

		if( xTCB->pxTaskTag != NULL )
   13114:	f94017a0 	ldr	x0, [x29, #40]
   13118:	f9403c00 	ldr	x0, [x0, #120]
   1311c:	f100001f 	cmp	x0, #0x0
   13120:	540000e0 	b.eq	1313c <xTaskCallApplicationTaskHook+0x60>  // b.none
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
   13124:	f94017a0 	ldr	x0, [x29, #40]
   13128:	f9403c01 	ldr	x1, [x0, #120]
   1312c:	f9400ba0 	ldr	x0, [x29, #16]
   13130:	d63f0020 	blr	x1
   13134:	f90013a0 	str	x0, [x29, #32]
   13138:	14000002 	b	13140 <xTaskCallApplicationTaskHook+0x64>
		}
		else
		{
			xReturn = pdFAIL;
   1313c:	f90013bf 	str	xzr, [x29, #32]
		}

		return xReturn;
   13140:	f94013a0 	ldr	x0, [x29, #32]
	}
   13144:	a8c37bfd 	ldp	x29, x30, [sp], #48
   13148:	d65f03c0 	ret

000000000001314c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1314c:	d10043ff 	sub	sp, sp, #0x10
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   13150:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13154:	9125a000 	add	x0, x0, #0x968
   13158:	f9400000 	ldr	x0, [x0]
   1315c:	f100001f 	cmp	x0, #0x0
   13160:	540000c0 	b.eq	13178 <vTaskSwitchContext+0x2c>  // b.none
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   13164:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13168:	91250000 	add	x0, x0, #0x940
   1316c:	d2800021 	mov	x1, #0x1                   	// #1
   13170:	f9000001 	str	x1, [x0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   13174:	1400002b 	b	13220 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
   13178:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   1317c:	91250000 	add	x0, x0, #0x940
   13180:	f900001f 	str	xzr, [x0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   13184:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13188:	9124a000 	add	x0, x0, #0x928
   1318c:	f9400000 	ldr	x0, [x0]
   13190:	5ac01000 	clz	w0, w0
   13194:	528003e1 	mov	w1, #0x1f                  	// #31
   13198:	4b000020 	sub	w0, w1, w0
   1319c:	93407c00 	sxtw	x0, w0
   131a0:	f90007e0 	str	x0, [sp, #8]
   131a4:	f94007e1 	ldr	x1, [sp, #8]
   131a8:	aa0103e0 	mov	x0, x1
   131ac:	d37ef400 	lsl	x0, x0, #2
   131b0:	8b010000 	add	x0, x0, x1
   131b4:	d37df000 	lsl	x0, x0, #3
   131b8:	d0000001 	adrp	x1, 15000 <prvHeapInit+0x50>
   131bc:	911dc021 	add	x1, x1, #0x770
   131c0:	8b010000 	add	x0, x0, x1
   131c4:	f90003e0 	str	x0, [sp]
   131c8:	f94003e0 	ldr	x0, [sp]
   131cc:	f9400400 	ldr	x0, [x0, #8]
   131d0:	f9400401 	ldr	x1, [x0, #8]
   131d4:	f94003e0 	ldr	x0, [sp]
   131d8:	f9000401 	str	x1, [x0, #8]
   131dc:	f94003e0 	ldr	x0, [sp]
   131e0:	f9400401 	ldr	x1, [x0, #8]
   131e4:	f94003e0 	ldr	x0, [sp]
   131e8:	91004000 	add	x0, x0, #0x10
   131ec:	eb00003f 	cmp	x1, x0
   131f0:	540000c1 	b.ne	13208 <vTaskSwitchContext+0xbc>  // b.any
   131f4:	f94003e0 	ldr	x0, [sp]
   131f8:	f9400400 	ldr	x0, [x0, #8]
   131fc:	f9400401 	ldr	x1, [x0, #8]
   13200:	f94003e0 	ldr	x0, [sp]
   13204:	f9000401 	str	x1, [x0, #8]
   13208:	f94003e0 	ldr	x0, [sp]
   1320c:	f9400400 	ldr	x0, [x0, #8]
   13210:	f9400c01 	ldr	x1, [x0, #24]
   13214:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13218:	911da000 	add	x0, x0, #0x768
   1321c:	f9000001 	str	x1, [x0]
}
   13220:	d503201f 	nop
   13224:	910043ff 	add	sp, sp, #0x10
   13228:	d65f03c0 	ret

000000000001322c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1322c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   13230:	910003fd 	mov	x29, sp
   13234:	f9000fa0 	str	x0, [x29, #24]
   13238:	f9000ba1 	str	x1, [x29, #16]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1323c:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13240:	911da000 	add	x0, x0, #0x768
   13244:	f9400000 	ldr	x0, [x0]
   13248:	9100c000 	add	x0, x0, #0x30
   1324c:	aa0003e1 	mov	x1, x0
   13250:	f9400fa0 	ldr	x0, [x29, #24]
   13254:	97fff6fd 	bl	10e48 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   13258:	d2800021 	mov	x1, #0x1                   	// #1
   1325c:	f9400ba0 	ldr	x0, [x29, #16]
   13260:	94000370 	bl	14020 <prvAddCurrentTaskToDelayedList>
}
   13264:	d503201f 	nop
   13268:	a8c27bfd 	ldp	x29, x30, [sp], #32
   1326c:	d65f03c0 	ret

0000000000013270 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
   13270:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   13274:	910003fd 	mov	x29, sp
   13278:	f90017a0 	str	x0, [x29, #40]
   1327c:	f90013a1 	str	x1, [x29, #32]
   13280:	f9000fa2 	str	x2, [x29, #24]
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   13284:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13288:	911da000 	add	x0, x0, #0x768
   1328c:	f9400000 	ldr	x0, [x0]
   13290:	f94013a1 	ldr	x1, [x29, #32]
   13294:	b2610021 	orr	x1, x1, #0x80000000
   13298:	f9001801 	str	x1, [x0, #48]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1329c:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   132a0:	911da000 	add	x0, x0, #0x768
   132a4:	f9400000 	ldr	x0, [x0]
   132a8:	9100c000 	add	x0, x0, #0x30
   132ac:	aa0003e1 	mov	x1, x0
   132b0:	f94017a0 	ldr	x0, [x29, #40]
   132b4:	97fff6c6 	bl	10dcc <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   132b8:	d2800021 	mov	x1, #0x1                   	// #1
   132bc:	f9400fa0 	ldr	x0, [x29, #24]
   132c0:	94000358 	bl	14020 <prvAddCurrentTaskToDelayedList>
}
   132c4:	d503201f 	nop
   132c8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   132cc:	d65f03c0 	ret

00000000000132d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   132d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   132d4:	910003fd 	mov	x29, sp
   132d8:	f9000fa0 	str	x0, [x29, #24]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   132dc:	f9400fa0 	ldr	x0, [x29, #24]
   132e0:	f9400c00 	ldr	x0, [x0, #24]
   132e4:	f9400c00 	ldr	x0, [x0, #24]
   132e8:	f90013a0 	str	x0, [x29, #32]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   132ec:	f94013a0 	ldr	x0, [x29, #32]
   132f0:	9100c000 	add	x0, x0, #0x30
   132f4:	97fff708 	bl	10f14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   132f8:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   132fc:	9125a000 	add	x0, x0, #0x968
   13300:	f9400000 	ldr	x0, [x0]
   13304:	f100001f 	cmp	x0, #0x0
   13308:	540003e1 	b.ne	13384 <xTaskRemoveFromEventList+0xb4>  // b.any
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1330c:	f94013a0 	ldr	x0, [x29, #32]
   13310:	91002000 	add	x0, x0, #0x8
   13314:	97fff700 	bl	10f14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
   13318:	f94013a0 	ldr	x0, [x29, #32]
   1331c:	f9402c00 	ldr	x0, [x0, #88]
   13320:	2a0003e1 	mov	w1, w0
   13324:	d2800020 	mov	x0, #0x1                   	// #1
   13328:	9ac12001 	lsl	x1, x0, x1
   1332c:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13330:	9124a000 	add	x0, x0, #0x928
   13334:	f9400000 	ldr	x0, [x0]
   13338:	aa000021 	orr	x1, x1, x0
   1333c:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13340:	9124a000 	add	x0, x0, #0x928
   13344:	f9000001 	str	x1, [x0]
   13348:	f94013a0 	ldr	x0, [x29, #32]
   1334c:	f9402c01 	ldr	x1, [x0, #88]
   13350:	aa0103e0 	mov	x0, x1
   13354:	d37ef400 	lsl	x0, x0, #2
   13358:	8b010000 	add	x0, x0, x1
   1335c:	d37df000 	lsl	x0, x0, #3
   13360:	d0000001 	adrp	x1, 15000 <prvHeapInit+0x50>
   13364:	911dc021 	add	x1, x1, #0x770
   13368:	8b010002 	add	x2, x0, x1
   1336c:	f94013a0 	ldr	x0, [x29, #32]
   13370:	91002000 	add	x0, x0, #0x8
   13374:	aa0003e1 	mov	x1, x0
   13378:	aa0203e0 	mov	x0, x2
   1337c:	97fff694 	bl	10dcc <vListInsertEnd>
   13380:	14000006 	b	13398 <xTaskRemoveFromEventList+0xc8>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   13384:	f94013a0 	ldr	x0, [x29, #32]
   13388:	9100c001 	add	x1, x0, #0x30
   1338c:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13390:	91226000 	add	x0, x0, #0x898
   13394:	97fff68e 	bl	10dcc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   13398:	f94013a0 	ldr	x0, [x29, #32]
   1339c:	f9402c01 	ldr	x1, [x0, #88]
   133a0:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   133a4:	911da000 	add	x0, x0, #0x768
   133a8:	f9400000 	ldr	x0, [x0]
   133ac:	f9402c00 	ldr	x0, [x0, #88]
   133b0:	eb00003f 	cmp	x1, x0
   133b4:	54000109 	b.ls	133d4 <xTaskRemoveFromEventList+0x104>  // b.plast
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   133b8:	d2800020 	mov	x0, #0x1                   	// #1
   133bc:	f90017a0 	str	x0, [x29, #40]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   133c0:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   133c4:	91250000 	add	x0, x0, #0x940
   133c8:	d2800021 	mov	x1, #0x1                   	// #1
   133cc:	f9000001 	str	x1, [x0]
   133d0:	14000002 	b	133d8 <xTaskRemoveFromEventList+0x108>
	}
	else
	{
		xReturn = pdFALSE;
   133d4:	f90017bf 	str	xzr, [x29, #40]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   133d8:	f94017a0 	ldr	x0, [x29, #40]
}
   133dc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   133e0:	d65f03c0 	ret

00000000000133e4 <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
   133e4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   133e8:	910003fd 	mov	x29, sp
   133ec:	f9000fa0 	str	x0, [x29, #24]
   133f0:	f9000ba1 	str	x1, [x29, #16]
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   133f4:	f9400ba0 	ldr	x0, [x29, #16]
   133f8:	b2610001 	orr	x1, x0, #0x80000000
   133fc:	f9400fa0 	ldr	x0, [x29, #24]
   13400:	f9000001 	str	x1, [x0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
   13404:	f9400fa0 	ldr	x0, [x29, #24]
   13408:	f9400c00 	ldr	x0, [x0, #24]
   1340c:	f90013a0 	str	x0, [x29, #32]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
   13410:	f9400fa0 	ldr	x0, [x29, #24]
   13414:	97fff6c0 	bl	10f14 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   13418:	f94013a0 	ldr	x0, [x29, #32]
   1341c:	91002000 	add	x0, x0, #0x8
   13420:	97fff6bd 	bl	10f14 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
   13424:	f94013a0 	ldr	x0, [x29, #32]
   13428:	f9402c00 	ldr	x0, [x0, #88]
   1342c:	2a0003e1 	mov	w1, w0
   13430:	d2800020 	mov	x0, #0x1                   	// #1
   13434:	9ac12001 	lsl	x1, x0, x1
   13438:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   1343c:	9124a000 	add	x0, x0, #0x928
   13440:	f9400000 	ldr	x0, [x0]
   13444:	aa000021 	orr	x1, x1, x0
   13448:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   1344c:	9124a000 	add	x0, x0, #0x928
   13450:	f9000001 	str	x1, [x0]
   13454:	f94013a0 	ldr	x0, [x29, #32]
   13458:	f9402c01 	ldr	x1, [x0, #88]
   1345c:	aa0103e0 	mov	x0, x1
   13460:	d37ef400 	lsl	x0, x0, #2
   13464:	8b010000 	add	x0, x0, x1
   13468:	d37df000 	lsl	x0, x0, #3
   1346c:	d0000001 	adrp	x1, 15000 <prvHeapInit+0x50>
   13470:	911dc021 	add	x1, x1, #0x770
   13474:	8b010002 	add	x2, x0, x1
   13478:	f94013a0 	ldr	x0, [x29, #32]
   1347c:	91002000 	add	x0, x0, #0x8
   13480:	aa0003e1 	mov	x1, x0
   13484:	aa0203e0 	mov	x0, x2
   13488:	97fff651 	bl	10dcc <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1348c:	f94013a0 	ldr	x0, [x29, #32]
   13490:	f9402c01 	ldr	x1, [x0, #88]
   13494:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13498:	911da000 	add	x0, x0, #0x768
   1349c:	f9400000 	ldr	x0, [x0]
   134a0:	f9402c00 	ldr	x0, [x0, #88]
   134a4:	eb00003f 	cmp	x1, x0
   134a8:	54000109 	b.ls	134c8 <xTaskRemoveFromUnorderedEventList+0xe4>  // b.plast
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
   134ac:	d2800020 	mov	x0, #0x1                   	// #1
   134b0:	f90017a0 	str	x0, [x29, #40]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   134b4:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   134b8:	91250000 	add	x0, x0, #0x940
   134bc:	d2800021 	mov	x1, #0x1                   	// #1
   134c0:	f9000001 	str	x1, [x0]
   134c4:	14000002 	b	134cc <xTaskRemoveFromUnorderedEventList+0xe8>
	}
	else
	{
		xReturn = pdFALSE;
   134c8:	f90017bf 	str	xzr, [x29, #40]
	}

	return xReturn;
   134cc:	f94017a0 	ldr	x0, [x29, #40]
}
   134d0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   134d4:	d65f03c0 	ret

00000000000134d8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   134d8:	d10043ff 	sub	sp, sp, #0x10
   134dc:	f90007e0 	str	x0, [sp, #8]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   134e0:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   134e4:	91252000 	add	x0, x0, #0x948
   134e8:	f9400001 	ldr	x1, [x0]
   134ec:	f94007e0 	ldr	x0, [sp, #8]
   134f0:	f9000001 	str	x1, [x0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   134f4:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   134f8:	91248000 	add	x0, x0, #0x920
   134fc:	f9400001 	ldr	x1, [x0]
   13500:	f94007e0 	ldr	x0, [sp, #8]
   13504:	f9000401 	str	x1, [x0, #8]
}
   13508:	d503201f 	nop
   1350c:	910043ff 	add	sp, sp, #0x10
   13510:	d65f03c0 	ret

0000000000013514 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   13514:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   13518:	910003fd 	mov	x29, sp
   1351c:	f9000fa0 	str	x0, [x29, #24]
   13520:	f9000ba1 	str	x1, [x29, #16]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
   13524:	97fff3df 	bl	104a0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   13528:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   1352c:	91248000 	add	x0, x0, #0x920
   13530:	f9400000 	ldr	x0, [x0]
   13534:	f90013a0 	str	x0, [x29, #32]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   13538:	f9400ba0 	ldr	x0, [x29, #16]
   1353c:	f9400000 	ldr	x0, [x0]
   13540:	b100041f 	cmn	x0, #0x1
   13544:	54000061 	b.ne	13550 <xTaskCheckForTimeOut+0x3c>  // b.any
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   13548:	f90017bf 	str	xzr, [x29, #40]
   1354c:	14000027 	b	135e8 <xTaskCheckForTimeOut+0xd4>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   13550:	f9400fa0 	ldr	x0, [x29, #24]
   13554:	f9400001 	ldr	x1, [x0]
   13558:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   1355c:	91252000 	add	x0, x0, #0x948
   13560:	f9400000 	ldr	x0, [x0]
   13564:	eb00003f 	cmp	x1, x0
   13568:	54000120 	b.eq	1358c <xTaskCheckForTimeOut+0x78>  // b.none
   1356c:	f9400fa0 	ldr	x0, [x29, #24]
   13570:	f9400401 	ldr	x1, [x0, #8]
   13574:	f94013a0 	ldr	x0, [x29, #32]
   13578:	eb00003f 	cmp	x1, x0
   1357c:	54000088 	b.hi	1358c <xTaskCheckForTimeOut+0x78>  // b.pmore
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   13580:	d2800020 	mov	x0, #0x1                   	// #1
   13584:	f90017a0 	str	x0, [x29, #40]
   13588:	14000018 	b	135e8 <xTaskCheckForTimeOut+0xd4>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1358c:	f9400fa0 	ldr	x0, [x29, #24]
   13590:	f9400400 	ldr	x0, [x0, #8]
   13594:	f94013a1 	ldr	x1, [x29, #32]
   13598:	cb000021 	sub	x1, x1, x0
   1359c:	f9400ba0 	ldr	x0, [x29, #16]
   135a0:	f9400000 	ldr	x0, [x0]
   135a4:	eb00003f 	cmp	x1, x0
   135a8:	540001c2 	b.cs	135e0 <xTaskCheckForTimeOut+0xcc>  // b.hs, b.nlast
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
   135ac:	f9400ba0 	ldr	x0, [x29, #16]
   135b0:	f9400001 	ldr	x1, [x0]
   135b4:	f9400fa0 	ldr	x0, [x29, #24]
   135b8:	f9400402 	ldr	x2, [x0, #8]
   135bc:	f94013a0 	ldr	x0, [x29, #32]
   135c0:	cb000040 	sub	x0, x2, x0
   135c4:	8b000021 	add	x1, x1, x0
   135c8:	f9400ba0 	ldr	x0, [x29, #16]
   135cc:	f9000001 	str	x1, [x0]
			vTaskSetTimeOutState( pxTimeOut );
   135d0:	f9400fa0 	ldr	x0, [x29, #24]
   135d4:	97ffffc1 	bl	134d8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
   135d8:	f90017bf 	str	xzr, [x29, #40]
   135dc:	14000003 	b	135e8 <xTaskCheckForTimeOut+0xd4>
		}
		else
		{
			xReturn = pdTRUE;
   135e0:	d2800020 	mov	x0, #0x1                   	// #1
   135e4:	f90017a0 	str	x0, [x29, #40]
		}
	}
	taskEXIT_CRITICAL();
   135e8:	97fff3be 	bl	104e0 <vPortExitCritical>

	return xReturn;
   135ec:	f94017a0 	ldr	x0, [x29, #40]
}
   135f0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   135f4:	d65f03c0 	ret

00000000000135f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
   135f8:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   135fc:	91250000 	add	x0, x0, #0x940
   13600:	d2800021 	mov	x1, #0x1                   	// #1
   13604:	f9000001 	str	x1, [x0]
}
   13608:	d503201f 	nop
   1360c:	d65f03c0 	ret

0000000000013610 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   13610:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   13614:	910003fd 	mov	x29, sp
   13618:	f9000fa0 	str	x0, [x29, #24]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1361c:	94000037 	bl	136f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   13620:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13624:	911dc000 	add	x0, x0, #0x770
   13628:	f9400000 	ldr	x0, [x0]
   1362c:	f100041f 	cmp	x0, #0x1
   13630:	54ffff69 	b.ls	1361c <prvIdleTask+0xc>  // b.plast
			{
				taskYIELD();
   13634:	d4000003 	smc	#0x0
		prvCheckTasksWaitingTermination();
   13638:	17fffff9 	b	1361c <prvIdleTask+0xc>

000000000001363c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1363c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   13640:	910003fd 	mov	x29, sp
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   13644:	f9000fbf 	str	xzr, [x29, #24]
   13648:	1400000d 	b	1367c <prvInitialiseTaskLists+0x40>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1364c:	f9400fa1 	ldr	x1, [x29, #24]
   13650:	aa0103e0 	mov	x0, x1
   13654:	d37ef400 	lsl	x0, x0, #2
   13658:	8b010000 	add	x0, x0, x1
   1365c:	d37df000 	lsl	x0, x0, #3
   13660:	d0000001 	adrp	x1, 15000 <prvHeapInit+0x50>
   13664:	911dc021 	add	x1, x1, #0x770
   13668:	8b010000 	add	x0, x0, x1
   1366c:	97fff5bb 	bl	10d58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   13670:	f9400fa0 	ldr	x0, [x29, #24]
   13674:	91000400 	add	x0, x0, #0x1
   13678:	f9000fa0 	str	x0, [x29, #24]
   1367c:	f9400fa0 	ldr	x0, [x29, #24]
   13680:	f100101f 	cmp	x0, #0x4
   13684:	54fffe49 	b.ls	1364c <prvInitialiseTaskLists+0x10>  // b.plast
	}

	vListInitialise( &xDelayedTaskList1 );
   13688:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   1368c:	9120e000 	add	x0, x0, #0x838
   13690:	97fff5b2 	bl	10d58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
   13694:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13698:	91218000 	add	x0, x0, #0x860
   1369c:	97fff5af 	bl	10d58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
   136a0:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   136a4:	91226000 	add	x0, x0, #0x898
   136a8:	97fff5ac 	bl	10d58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   136ac:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   136b0:	91230000 	add	x0, x0, #0x8c0
   136b4:	97fff5a9 	bl	10d58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   136b8:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   136bc:	9123c000 	add	x0, x0, #0x8f0
   136c0:	97fff5a6 	bl	10d58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   136c4:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   136c8:	91222000 	add	x0, x0, #0x888
   136cc:	d0000001 	adrp	x1, 15000 <prvHeapInit+0x50>
   136d0:	9120e021 	add	x1, x1, #0x838
   136d4:	f9000001 	str	x1, [x0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   136d8:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   136dc:	91224000 	add	x0, x0, #0x890
   136e0:	d0000001 	adrp	x1, 15000 <prvHeapInit+0x50>
   136e4:	91218021 	add	x1, x1, #0x860
   136e8:	f9000001 	str	x1, [x0]
}
   136ec:	d503201f 	nop
   136f0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   136f4:	d65f03c0 	ret

00000000000136f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   136f8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   136fc:	910003fd 	mov	x29, sp
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   13700:	14000028 	b	137a0 <prvCheckTasksWaitingTermination+0xa8>
		{
			vTaskSuspendAll();
   13704:	97fffd07 	bl	12b20 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   13708:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   1370c:	91230000 	add	x0, x0, #0x8c0
   13710:	f9400000 	ldr	x0, [x0]
   13714:	f100001f 	cmp	x0, #0x0
   13718:	1a9f17e0 	cset	w0, eq  // eq = none
   1371c:	53001c00 	uxtb	w0, w0
   13720:	53001c00 	uxtb	w0, w0
   13724:	f9000fa0 	str	x0, [x29, #24]
			}
			( void ) xTaskResumeAll();
   13728:	97fffd07 	bl	12b44 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
   1372c:	f9400fa0 	ldr	x0, [x29, #24]
   13730:	f100001f 	cmp	x0, #0x0
   13734:	54000361 	b.ne	137a0 <prvCheckTasksWaitingTermination+0xa8>  // b.any
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
   13738:	97fff35a 	bl	104a0 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1373c:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13740:	91230000 	add	x0, x0, #0x8c0
   13744:	f9400c00 	ldr	x0, [x0, #24]
   13748:	f9400c00 	ldr	x0, [x0, #24]
   1374c:	f9000ba0 	str	x0, [x29, #16]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   13750:	f9400ba0 	ldr	x0, [x29, #16]
   13754:	91002000 	add	x0, x0, #0x8
   13758:	97fff5ef 	bl	10f14 <uxListRemove>
					--uxCurrentNumberOfTasks;
   1375c:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13760:	91246000 	add	x0, x0, #0x918
   13764:	f9400000 	ldr	x0, [x0]
   13768:	d1000401 	sub	x1, x0, #0x1
   1376c:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13770:	91246000 	add	x0, x0, #0x918
   13774:	f9000001 	str	x1, [x0]
					--uxDeletedTasksWaitingCleanUp;
   13778:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   1377c:	9123a000 	add	x0, x0, #0x8e8
   13780:	f9400000 	ldr	x0, [x0]
   13784:	d1000401 	sub	x1, x0, #0x1
   13788:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   1378c:	9123a000 	add	x0, x0, #0x8e8
   13790:	f9000001 	str	x1, [x0]
				}
				taskEXIT_CRITICAL();
   13794:	97fff353 	bl	104e0 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
   13798:	f9400ba0 	ldr	x0, [x29, #16]
   1379c:	94000009 	bl	137c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   137a0:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   137a4:	9123a000 	add	x0, x0, #0x8e8
   137a8:	f9400000 	ldr	x0, [x0]
   137ac:	f100001f 	cmp	x0, #0x0
   137b0:	54fffaa1 	b.ne	13704 <prvCheckTasksWaitingTermination+0xc>  // b.any
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   137b4:	d503201f 	nop
   137b8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   137bc:	d65f03c0 	ret

00000000000137c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   137c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   137c4:	910003fd 	mov	x29, sp
   137c8:	f9000fa0 	str	x0, [x29, #24]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   137cc:	f9400fa0 	ldr	x0, [x29, #24]
   137d0:	f9403000 	ldr	x0, [x0, #96]
   137d4:	940005d1 	bl	14f18 <vPortFree>
			vPortFree( pxTCB );
   137d8:	f9400fa0 	ldr	x0, [x29, #24]
   137dc:	940005cf 	bl	14f18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   137e0:	d503201f 	nop
   137e4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   137e8:	d65f03c0 	ret

00000000000137ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   137ec:	d10043ff 	sub	sp, sp, #0x10
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   137f0:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   137f4:	91222000 	add	x0, x0, #0x888
   137f8:	f9400000 	ldr	x0, [x0]
   137fc:	f9400000 	ldr	x0, [x0]
   13800:	f100001f 	cmp	x0, #0x0
   13804:	54000061 	b.ne	13810 <prvResetNextTaskUnblockTime+0x24>  // b.any
   13808:	52800020 	mov	w0, #0x1                   	// #1
   1380c:	14000002 	b	13814 <prvResetNextTaskUnblockTime+0x28>
   13810:	52800000 	mov	w0, #0x0                   	// #0
   13814:	7100001f 	cmp	w0, #0x0
   13818:	540000c0 	b.eq	13830 <prvResetNextTaskUnblockTime+0x44>  // b.none
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1381c:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13820:	91256000 	add	x0, x0, #0x958
   13824:	92800001 	mov	x1, #0xffffffffffffffff    	// #-1
   13828:	f9000001 	str	x1, [x0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1382c:	1400000c 	b	1385c <prvResetNextTaskUnblockTime+0x70>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   13830:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13834:	91222000 	add	x0, x0, #0x888
   13838:	f9400000 	ldr	x0, [x0]
   1383c:	f9400c00 	ldr	x0, [x0, #24]
   13840:	f9400c00 	ldr	x0, [x0, #24]
   13844:	f90007e0 	str	x0, [sp, #8]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   13848:	f94007e0 	ldr	x0, [sp, #8]
   1384c:	f9400401 	ldr	x1, [x0, #8]
   13850:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13854:	91256000 	add	x0, x0, #0x958
   13858:	f9000001 	str	x1, [x0]
}
   1385c:	d503201f 	nop
   13860:	910043ff 	add	sp, sp, #0x10
   13864:	d65f03c0 	ret

0000000000013868 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
   13868:	d10043ff 	sub	sp, sp, #0x10
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
   1386c:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13870:	911da000 	add	x0, x0, #0x768
   13874:	f9400000 	ldr	x0, [x0]
   13878:	f9401800 	ldr	x0, [x0, #48]
   1387c:	f90007e0 	str	x0, [sp, #8]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   13880:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13884:	911da000 	add	x0, x0, #0x768
   13888:	f9400000 	ldr	x0, [x0]
   1388c:	d0000001 	adrp	x1, 15000 <prvHeapInit+0x50>
   13890:	911da021 	add	x1, x1, #0x768
   13894:	f9400021 	ldr	x1, [x1]
   13898:	f9402c21 	ldr	x1, [x1, #88]
   1389c:	d28000a2 	mov	x2, #0x5                   	// #5
   138a0:	cb010041 	sub	x1, x2, x1
   138a4:	f9001801 	str	x1, [x0, #48]

	return uxReturn;
   138a8:	f94007e0 	ldr	x0, [sp, #8]
}
   138ac:	910043ff 	add	sp, sp, #0x10
   138b0:	d65f03c0 	ret

00000000000138b4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
   138b4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   138b8:	910003fd 	mov	x29, sp
   138bc:	f9000fa0 	str	x0, [x29, #24]
   138c0:	f9000ba1 	str	x1, [x29, #16]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
   138c4:	97fff2f7 	bl	104a0 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
   138c8:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   138cc:	911da000 	add	x0, x0, #0x768
   138d0:	f9400000 	ldr	x0, [x0]
   138d4:	b9408000 	ldr	w0, [x0, #128]
   138d8:	7100001f 	cmp	w0, #0x0
   138dc:	540001a1 	b.ne	13910 <ulTaskNotifyTake+0x5c>  // b.any
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
   138e0:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   138e4:	911da000 	add	x0, x0, #0x768
   138e8:	f9400000 	ldr	x0, [x0]
   138ec:	52800021 	mov	w1, #0x1                   	// #1
   138f0:	39021001 	strb	w1, [x0, #132]

				if( xTicksToWait > ( TickType_t ) 0 )
   138f4:	f9400ba0 	ldr	x0, [x29, #16]
   138f8:	f100001f 	cmp	x0, #0x0
   138fc:	540000a0 	b.eq	13910 <ulTaskNotifyTake+0x5c>  // b.none
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   13900:	d2800021 	mov	x1, #0x1                   	// #1
   13904:	f9400ba0 	ldr	x0, [x29, #16]
   13908:	940001c6 	bl	14020 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
   1390c:	d4000003 	smc	#0x0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
   13910:	97fff2f4 	bl	104e0 <vPortExitCritical>

		taskENTER_CRITICAL();
   13914:	97fff2e3 	bl	104a0 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
   13918:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   1391c:	911da000 	add	x0, x0, #0x768
   13920:	f9400000 	ldr	x0, [x0]
   13924:	b9408000 	ldr	w0, [x0, #128]
   13928:	b9002fa0 	str	w0, [x29, #44]

			if( ulReturn != 0UL )
   1392c:	b9402fa0 	ldr	w0, [x29, #44]
   13930:	7100001f 	cmp	w0, #0x0
   13934:	540001e0 	b.eq	13970 <ulTaskNotifyTake+0xbc>  // b.none
			{
				if( xClearCountOnExit != pdFALSE )
   13938:	f9400fa0 	ldr	x0, [x29, #24]
   1393c:	f100001f 	cmp	x0, #0x0
   13940:	540000c0 	b.eq	13958 <ulTaskNotifyTake+0xa4>  // b.none
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
   13944:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13948:	911da000 	add	x0, x0, #0x768
   1394c:	f9400000 	ldr	x0, [x0]
   13950:	b900801f 	str	wzr, [x0, #128]
   13954:	14000007 	b	13970 <ulTaskNotifyTake+0xbc>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
   13958:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   1395c:	911da000 	add	x0, x0, #0x768
   13960:	f9400000 	ldr	x0, [x0]
   13964:	b9402fa1 	ldr	w1, [x29, #44]
   13968:	51000421 	sub	w1, w1, #0x1
   1396c:	b9008001 	str	w1, [x0, #128]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   13970:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13974:	911da000 	add	x0, x0, #0x768
   13978:	f9400000 	ldr	x0, [x0]
   1397c:	3902101f 	strb	wzr, [x0, #132]
		}
		taskEXIT_CRITICAL();
   13980:	97fff2d8 	bl	104e0 <vPortExitCritical>

		return ulReturn;
   13984:	b9402fa0 	ldr	w0, [x29, #44]
	}
   13988:	a8c37bfd 	ldp	x29, x30, [sp], #48
   1398c:	d65f03c0 	ret

0000000000013990 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
   13990:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   13994:	910003fd 	mov	x29, sp
   13998:	b9002fa0 	str	w0, [x29, #44]
   1399c:	b9002ba1 	str	w1, [x29, #40]
   139a0:	f90013a2 	str	x2, [x29, #32]
   139a4:	f9000fa3 	str	x3, [x29, #24]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
   139a8:	97fff2be 	bl	104a0 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
   139ac:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   139b0:	911da000 	add	x0, x0, #0x768
   139b4:	f9400000 	ldr	x0, [x0]
   139b8:	39421000 	ldrb	w0, [x0, #132]
   139bc:	53001c00 	uxtb	w0, w0
   139c0:	7100081f 	cmp	w0, #0x2
   139c4:	540002a0 	b.eq	13a18 <xTaskNotifyWait+0x88>  // b.none
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
   139c8:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   139cc:	911da000 	add	x0, x0, #0x768
   139d0:	f9400000 	ldr	x0, [x0]
   139d4:	b9408002 	ldr	w2, [x0, #128]
   139d8:	b9402fa1 	ldr	w1, [x29, #44]
   139dc:	2a2103e1 	mvn	w1, w1
   139e0:	0a010041 	and	w1, w2, w1
   139e4:	b9008001 	str	w1, [x0, #128]

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
   139e8:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   139ec:	911da000 	add	x0, x0, #0x768
   139f0:	f9400000 	ldr	x0, [x0]
   139f4:	52800021 	mov	w1, #0x1                   	// #1
   139f8:	39021001 	strb	w1, [x0, #132]

				if( xTicksToWait > ( TickType_t ) 0 )
   139fc:	f9400fa0 	ldr	x0, [x29, #24]
   13a00:	f100001f 	cmp	x0, #0x0
   13a04:	540000a0 	b.eq	13a18 <xTaskNotifyWait+0x88>  // b.none
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   13a08:	d2800021 	mov	x1, #0x1                   	// #1
   13a0c:	f9400fa0 	ldr	x0, [x29, #24]
   13a10:	94000184 	bl	14020 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
   13a14:	d4000003 	smc	#0x0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
   13a18:	97fff2b2 	bl	104e0 <vPortExitCritical>

		taskENTER_CRITICAL();
   13a1c:	97fff2a1 	bl	104a0 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
   13a20:	f94013a0 	ldr	x0, [x29, #32]
   13a24:	f100001f 	cmp	x0, #0x0
   13a28:	540000e0 	b.eq	13a44 <xTaskNotifyWait+0xb4>  // b.none
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
   13a2c:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13a30:	911da000 	add	x0, x0, #0x768
   13a34:	f9400000 	ldr	x0, [x0]
   13a38:	b9408001 	ldr	w1, [x0, #128]
   13a3c:	f94013a0 	ldr	x0, [x29, #32]
   13a40:	b9000001 	str	w1, [x0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   13a44:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13a48:	911da000 	add	x0, x0, #0x768
   13a4c:	f9400000 	ldr	x0, [x0]
   13a50:	39421000 	ldrb	w0, [x0, #132]
   13a54:	53001c00 	uxtb	w0, w0
   13a58:	7100041f 	cmp	w0, #0x1
   13a5c:	54000061 	b.ne	13a68 <xTaskNotifyWait+0xd8>  // b.any
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
   13a60:	f9001fbf 	str	xzr, [x29, #56]
   13a64:	1400000b 	b	13a90 <xTaskNotifyWait+0x100>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
   13a68:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13a6c:	911da000 	add	x0, x0, #0x768
   13a70:	f9400000 	ldr	x0, [x0]
   13a74:	b9408002 	ldr	w2, [x0, #128]
   13a78:	b9402ba1 	ldr	w1, [x29, #40]
   13a7c:	2a2103e1 	mvn	w1, w1
   13a80:	0a010041 	and	w1, w2, w1
   13a84:	b9008001 	str	w1, [x0, #128]
				xReturn = pdTRUE;
   13a88:	d2800020 	mov	x0, #0x1                   	// #1
   13a8c:	f9001fa0 	str	x0, [x29, #56]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   13a90:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13a94:	911da000 	add	x0, x0, #0x768
   13a98:	f9400000 	ldr	x0, [x0]
   13a9c:	3902101f 	strb	wzr, [x0, #132]
		}
		taskEXIT_CRITICAL();
   13aa0:	97fff290 	bl	104e0 <vPortExitCritical>

		return xReturn;
   13aa4:	f9401fa0 	ldr	x0, [x29, #56]
	}
   13aa8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   13aac:	d65f03c0 	ret

0000000000013ab0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
   13ab0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   13ab4:	910003fd 	mov	x29, sp
   13ab8:	f90017a0 	str	x0, [x29, #40]
   13abc:	b90027a1 	str	w1, [x29, #36]
   13ac0:	b90023a2 	str	w2, [x29, #32]
   13ac4:	f9000fa3 	str	x3, [x29, #24]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
   13ac8:	d2800020 	mov	x0, #0x1                   	// #1
   13acc:	f90027a0 	str	x0, [x29, #72]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
   13ad0:	f94017a0 	ldr	x0, [x29, #40]
   13ad4:	f90023a0 	str	x0, [x29, #64]

		taskENTER_CRITICAL();
   13ad8:	97fff272 	bl	104a0 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
   13adc:	f9400fa0 	ldr	x0, [x29, #24]
   13ae0:	f100001f 	cmp	x0, #0x0
   13ae4:	540000a0 	b.eq	13af8 <xTaskGenericNotify+0x48>  // b.none
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
   13ae8:	f94023a0 	ldr	x0, [x29, #64]
   13aec:	b9408001 	ldr	w1, [x0, #128]
   13af0:	f9400fa0 	ldr	x0, [x29, #24]
   13af4:	b9000001 	str	w1, [x0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
   13af8:	f94023a0 	ldr	x0, [x29, #64]
   13afc:	39421000 	ldrb	w0, [x0, #132]
   13b00:	3900ffa0 	strb	w0, [x29, #63]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
   13b04:	f94023a0 	ldr	x0, [x29, #64]
   13b08:	52800041 	mov	w1, #0x2                   	// #2
   13b0c:	39021001 	strb	w1, [x0, #132]

			switch( eAction )
   13b10:	b94023a0 	ldr	w0, [x29, #32]
   13b14:	7100101f 	cmp	w0, #0x4
   13b18:	54000448 	b.hi	13ba0 <xTaskGenericNotify+0xf0>  // b.pmore
   13b1c:	d0000001 	adrp	x1, 15000 <prvHeapInit+0x50>
   13b20:	91118021 	add	x1, x1, #0x460
   13b24:	b8605820 	ldr	w0, [x1, w0, uxtw #2]
   13b28:	10000061 	adr	x1, 13b34 <xTaskGenericNotify+0x84>
   13b2c:	8b20c820 	add	x0, x1, w0, sxtw #2
   13b30:	d61f0000 	br	x0
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
   13b34:	f94023a0 	ldr	x0, [x29, #64]
   13b38:	b9408001 	ldr	w1, [x0, #128]
   13b3c:	b94027a0 	ldr	w0, [x29, #36]
   13b40:	2a000021 	orr	w1, w1, w0
   13b44:	f94023a0 	ldr	x0, [x29, #64]
   13b48:	b9008001 	str	w1, [x0, #128]
					break;
   13b4c:	14000015 	b	13ba0 <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
   13b50:	f94023a0 	ldr	x0, [x29, #64]
   13b54:	b9408000 	ldr	w0, [x0, #128]
   13b58:	11000401 	add	w1, w0, #0x1
   13b5c:	f94023a0 	ldr	x0, [x29, #64]
   13b60:	b9008001 	str	w1, [x0, #128]
					break;
   13b64:	1400000f 	b	13ba0 <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
   13b68:	f94023a0 	ldr	x0, [x29, #64]
   13b6c:	b94027a1 	ldr	w1, [x29, #36]
   13b70:	b9008001 	str	w1, [x0, #128]
					break;
   13b74:	1400000b 	b	13ba0 <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
   13b78:	3940ffa0 	ldrb	w0, [x29, #63]
   13b7c:	7100081f 	cmp	w0, #0x2
   13b80:	540000a0 	b.eq	13b94 <xTaskGenericNotify+0xe4>  // b.none
					{
						pxTCB->ulNotifiedValue = ulValue;
   13b84:	f94023a0 	ldr	x0, [x29, #64]
   13b88:	b94027a1 	ldr	w1, [x29, #36]
   13b8c:	b9008001 	str	w1, [x0, #128]
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
   13b90:	14000004 	b	13ba0 <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
   13b94:	f90027bf 	str	xzr, [x29, #72]
					break;
   13b98:	14000002 	b	13ba0 <xTaskGenericNotify+0xf0>

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
   13b9c:	d503201f 	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
   13ba0:	3940ffa0 	ldrb	w0, [x29, #63]
   13ba4:	7100041f 	cmp	w0, #0x1
   13ba8:	540004e1 	b.ne	13c44 <xTaskGenericNotify+0x194>  // b.any
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   13bac:	f94023a0 	ldr	x0, [x29, #64]
   13bb0:	91002000 	add	x0, x0, #0x8
   13bb4:	97fff4d8 	bl	10f14 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
   13bb8:	f94023a0 	ldr	x0, [x29, #64]
   13bbc:	f9402c00 	ldr	x0, [x0, #88]
   13bc0:	2a0003e1 	mov	w1, w0
   13bc4:	d2800020 	mov	x0, #0x1                   	// #1
   13bc8:	9ac12001 	lsl	x1, x0, x1
   13bcc:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13bd0:	9124a000 	add	x0, x0, #0x928
   13bd4:	f9400000 	ldr	x0, [x0]
   13bd8:	aa000021 	orr	x1, x1, x0
   13bdc:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13be0:	9124a000 	add	x0, x0, #0x928
   13be4:	f9000001 	str	x1, [x0]
   13be8:	f94023a0 	ldr	x0, [x29, #64]
   13bec:	f9402c01 	ldr	x1, [x0, #88]
   13bf0:	aa0103e0 	mov	x0, x1
   13bf4:	d37ef400 	lsl	x0, x0, #2
   13bf8:	8b010000 	add	x0, x0, x1
   13bfc:	d37df000 	lsl	x0, x0, #3
   13c00:	d0000001 	adrp	x1, 15000 <prvHeapInit+0x50>
   13c04:	911dc021 	add	x1, x1, #0x770
   13c08:	8b010002 	add	x2, x0, x1
   13c0c:	f94023a0 	ldr	x0, [x29, #64]
   13c10:	91002000 	add	x0, x0, #0x8
   13c14:	aa0003e1 	mov	x1, x0
   13c18:	aa0203e0 	mov	x0, x2
   13c1c:	97fff46c 	bl	10dcc <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
   13c20:	f94023a0 	ldr	x0, [x29, #64]
   13c24:	f9402c01 	ldr	x1, [x0, #88]
   13c28:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13c2c:	911da000 	add	x0, x0, #0x768
   13c30:	f9400000 	ldr	x0, [x0]
   13c34:	f9402c00 	ldr	x0, [x0, #88]
   13c38:	eb00003f 	cmp	x1, x0
   13c3c:	54000049 	b.ls	13c44 <xTaskGenericNotify+0x194>  // b.plast
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
   13c40:	d4000003 	smc	#0x0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
   13c44:	97fff227 	bl	104e0 <vPortExitCritical>

		return xReturn;
   13c48:	f94027a0 	ldr	x0, [x29, #72]
	}
   13c4c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   13c50:	d65f03c0 	ret

0000000000013c54 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
   13c54:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   13c58:	910003fd 	mov	x29, sp
   13c5c:	f90017a0 	str	x0, [x29, #40]
   13c60:	b90027a1 	str	w1, [x29, #36]
   13c64:	b90023a2 	str	w2, [x29, #32]
   13c68:	f9000fa3 	str	x3, [x29, #24]
   13c6c:	f9000ba4 	str	x4, [x29, #16]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
   13c70:	d2800020 	mov	x0, #0x1                   	// #1
   13c74:	f90027a0 	str	x0, [x29, #72]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
   13c78:	f94017a0 	ldr	x0, [x29, #40]
   13c7c:	f90023a0 	str	x0, [x29, #64]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   13c80:	97fff272 	bl	10648 <uxPortSetInterruptMask>
   13c84:	f9001fa0 	str	x0, [x29, #56]
		{
			if( pulPreviousNotificationValue != NULL )
   13c88:	f9400fa0 	ldr	x0, [x29, #24]
   13c8c:	f100001f 	cmp	x0, #0x0
   13c90:	540000a0 	b.eq	13ca4 <xTaskGenericNotifyFromISR+0x50>  // b.none
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
   13c94:	f94023a0 	ldr	x0, [x29, #64]
   13c98:	b9408001 	ldr	w1, [x0, #128]
   13c9c:	f9400fa0 	ldr	x0, [x29, #24]
   13ca0:	b9000001 	str	w1, [x0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
   13ca4:	f94023a0 	ldr	x0, [x29, #64]
   13ca8:	39421000 	ldrb	w0, [x0, #132]
   13cac:	3900dfa0 	strb	w0, [x29, #55]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
   13cb0:	f94023a0 	ldr	x0, [x29, #64]
   13cb4:	52800041 	mov	w1, #0x2                   	// #2
   13cb8:	39021001 	strb	w1, [x0, #132]

			switch( eAction )
   13cbc:	b94023a0 	ldr	w0, [x29, #32]
   13cc0:	7100101f 	cmp	w0, #0x4
   13cc4:	54000448 	b.hi	13d4c <xTaskGenericNotifyFromISR+0xf8>  // b.pmore
   13cc8:	d0000001 	adrp	x1, 15000 <prvHeapInit+0x50>
   13ccc:	9111d021 	add	x1, x1, #0x474
   13cd0:	b8605820 	ldr	w0, [x1, w0, uxtw #2]
   13cd4:	10000061 	adr	x1, 13ce0 <xTaskGenericNotifyFromISR+0x8c>
   13cd8:	8b20c820 	add	x0, x1, w0, sxtw #2
   13cdc:	d61f0000 	br	x0
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
   13ce0:	f94023a0 	ldr	x0, [x29, #64]
   13ce4:	b9408001 	ldr	w1, [x0, #128]
   13ce8:	b94027a0 	ldr	w0, [x29, #36]
   13cec:	2a000021 	orr	w1, w1, w0
   13cf0:	f94023a0 	ldr	x0, [x29, #64]
   13cf4:	b9008001 	str	w1, [x0, #128]
					break;
   13cf8:	14000015 	b	13d4c <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
   13cfc:	f94023a0 	ldr	x0, [x29, #64]
   13d00:	b9408000 	ldr	w0, [x0, #128]
   13d04:	11000401 	add	w1, w0, #0x1
   13d08:	f94023a0 	ldr	x0, [x29, #64]
   13d0c:	b9008001 	str	w1, [x0, #128]
					break;
   13d10:	1400000f 	b	13d4c <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
   13d14:	f94023a0 	ldr	x0, [x29, #64]
   13d18:	b94027a1 	ldr	w1, [x29, #36]
   13d1c:	b9008001 	str	w1, [x0, #128]
					break;
   13d20:	1400000b 	b	13d4c <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
   13d24:	3940dfa0 	ldrb	w0, [x29, #55]
   13d28:	7100081f 	cmp	w0, #0x2
   13d2c:	540000a0 	b.eq	13d40 <xTaskGenericNotifyFromISR+0xec>  // b.none
					{
						pxTCB->ulNotifiedValue = ulValue;
   13d30:	f94023a0 	ldr	x0, [x29, #64]
   13d34:	b94027a1 	ldr	w1, [x29, #36]
   13d38:	b9008001 	str	w1, [x0, #128]
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
   13d3c:	14000004 	b	13d4c <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
   13d40:	f90027bf 	str	xzr, [x29, #72]
					break;
   13d44:	14000002 	b	13d4c <xTaskGenericNotifyFromISR+0xf8>

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
   13d48:	d503201f 	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
   13d4c:	3940dfa0 	ldrb	w0, [x29, #55]
   13d50:	7100041f 	cmp	w0, #0x1
   13d54:	54000781 	b.ne	13e44 <xTaskGenericNotifyFromISR+0x1f0>  // b.any
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   13d58:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13d5c:	9125a000 	add	x0, x0, #0x968
   13d60:	f9400000 	ldr	x0, [x0]
   13d64:	f100001f 	cmp	x0, #0x0
   13d68:	540003e1 	b.ne	13de4 <xTaskGenericNotifyFromISR+0x190>  // b.any
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   13d6c:	f94023a0 	ldr	x0, [x29, #64]
   13d70:	91002000 	add	x0, x0, #0x8
   13d74:	97fff468 	bl	10f14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
   13d78:	f94023a0 	ldr	x0, [x29, #64]
   13d7c:	f9402c00 	ldr	x0, [x0, #88]
   13d80:	2a0003e1 	mov	w1, w0
   13d84:	d2800020 	mov	x0, #0x1                   	// #1
   13d88:	9ac12001 	lsl	x1, x0, x1
   13d8c:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13d90:	9124a000 	add	x0, x0, #0x928
   13d94:	f9400000 	ldr	x0, [x0]
   13d98:	aa000021 	orr	x1, x1, x0
   13d9c:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13da0:	9124a000 	add	x0, x0, #0x928
   13da4:	f9000001 	str	x1, [x0]
   13da8:	f94023a0 	ldr	x0, [x29, #64]
   13dac:	f9402c01 	ldr	x1, [x0, #88]
   13db0:	aa0103e0 	mov	x0, x1
   13db4:	d37ef400 	lsl	x0, x0, #2
   13db8:	8b010000 	add	x0, x0, x1
   13dbc:	d37df000 	lsl	x0, x0, #3
   13dc0:	d0000001 	adrp	x1, 15000 <prvHeapInit+0x50>
   13dc4:	911dc021 	add	x1, x1, #0x770
   13dc8:	8b010002 	add	x2, x0, x1
   13dcc:	f94023a0 	ldr	x0, [x29, #64]
   13dd0:	91002000 	add	x0, x0, #0x8
   13dd4:	aa0003e1 	mov	x1, x0
   13dd8:	aa0203e0 	mov	x0, x2
   13ddc:	97fff3fc 	bl	10dcc <vListInsertEnd>
   13de0:	14000006 	b	13df8 <xTaskGenericNotifyFromISR+0x1a4>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
   13de4:	f94023a0 	ldr	x0, [x29, #64]
   13de8:	9100c001 	add	x1, x0, #0x30
   13dec:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13df0:	91226000 	add	x0, x0, #0x898
   13df4:	97fff3f6 	bl	10dcc <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
   13df8:	f94023a0 	ldr	x0, [x29, #64]
   13dfc:	f9402c01 	ldr	x1, [x0, #88]
   13e00:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13e04:	911da000 	add	x0, x0, #0x768
   13e08:	f9400000 	ldr	x0, [x0]
   13e0c:	f9402c00 	ldr	x0, [x0, #88]
   13e10:	eb00003f 	cmp	x1, x0
   13e14:	54000189 	b.ls	13e44 <xTaskGenericNotifyFromISR+0x1f0>  // b.plast
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
   13e18:	f9400ba0 	ldr	x0, [x29, #16]
   13e1c:	f100001f 	cmp	x0, #0x0
   13e20:	540000a0 	b.eq	13e34 <xTaskGenericNotifyFromISR+0x1e0>  // b.none
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
   13e24:	f9400ba0 	ldr	x0, [x29, #16]
   13e28:	d2800021 	mov	x1, #0x1                   	// #1
   13e2c:	f9000001 	str	x1, [x0]
   13e30:	14000005 	b	13e44 <xTaskGenericNotifyFromISR+0x1f0>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
   13e34:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13e38:	91250000 	add	x0, x0, #0x940
   13e3c:	d2800021 	mov	x1, #0x1                   	// #1
   13e40:	f9000001 	str	x1, [x0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   13e44:	f9401fa0 	ldr	x0, [x29, #56]
   13e48:	97fff1ec 	bl	105f8 <vPortClearInterruptMask>

		return xReturn;
   13e4c:	f94027a0 	ldr	x0, [x29, #72]
	}
   13e50:	a8c57bfd 	ldp	x29, x30, [sp], #80
   13e54:	d65f03c0 	ret

0000000000013e58 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
   13e58:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   13e5c:	910003fd 	mov	x29, sp
   13e60:	f9000fa0 	str	x0, [x29, #24]
   13e64:	f9000ba1 	str	x1, [x29, #16]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
   13e68:	f9400fa0 	ldr	x0, [x29, #24]
   13e6c:	f9001fa0 	str	x0, [x29, #56]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   13e70:	97fff1f6 	bl	10648 <uxPortSetInterruptMask>
   13e74:	f9001ba0 	str	x0, [x29, #48]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
   13e78:	f9401fa0 	ldr	x0, [x29, #56]
   13e7c:	39421000 	ldrb	w0, [x0, #132]
   13e80:	3900bfa0 	strb	w0, [x29, #47]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
   13e84:	f9401fa0 	ldr	x0, [x29, #56]
   13e88:	52800041 	mov	w1, #0x2                   	// #2
   13e8c:	39021001 	strb	w1, [x0, #132]

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
   13e90:	f9401fa0 	ldr	x0, [x29, #56]
   13e94:	b9408000 	ldr	w0, [x0, #128]
   13e98:	11000401 	add	w1, w0, #0x1
   13e9c:	f9401fa0 	ldr	x0, [x29, #56]
   13ea0:	b9008001 	str	w1, [x0, #128]

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
   13ea4:	3940bfa0 	ldrb	w0, [x29, #47]
   13ea8:	7100041f 	cmp	w0, #0x1
   13eac:	54000781 	b.ne	13f9c <vTaskNotifyGiveFromISR+0x144>  // b.any
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   13eb0:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13eb4:	9125a000 	add	x0, x0, #0x968
   13eb8:	f9400000 	ldr	x0, [x0]
   13ebc:	f100001f 	cmp	x0, #0x0
   13ec0:	540003e1 	b.ne	13f3c <vTaskNotifyGiveFromISR+0xe4>  // b.any
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   13ec4:	f9401fa0 	ldr	x0, [x29, #56]
   13ec8:	91002000 	add	x0, x0, #0x8
   13ecc:	97fff412 	bl	10f14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
   13ed0:	f9401fa0 	ldr	x0, [x29, #56]
   13ed4:	f9402c00 	ldr	x0, [x0, #88]
   13ed8:	2a0003e1 	mov	w1, w0
   13edc:	d2800020 	mov	x0, #0x1                   	// #1
   13ee0:	9ac12001 	lsl	x1, x0, x1
   13ee4:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13ee8:	9124a000 	add	x0, x0, #0x928
   13eec:	f9400000 	ldr	x0, [x0]
   13ef0:	aa000021 	orr	x1, x1, x0
   13ef4:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13ef8:	9124a000 	add	x0, x0, #0x928
   13efc:	f9000001 	str	x1, [x0]
   13f00:	f9401fa0 	ldr	x0, [x29, #56]
   13f04:	f9402c01 	ldr	x1, [x0, #88]
   13f08:	aa0103e0 	mov	x0, x1
   13f0c:	d37ef400 	lsl	x0, x0, #2
   13f10:	8b010000 	add	x0, x0, x1
   13f14:	d37df000 	lsl	x0, x0, #3
   13f18:	d0000001 	adrp	x1, 15000 <prvHeapInit+0x50>
   13f1c:	911dc021 	add	x1, x1, #0x770
   13f20:	8b010002 	add	x2, x0, x1
   13f24:	f9401fa0 	ldr	x0, [x29, #56]
   13f28:	91002000 	add	x0, x0, #0x8
   13f2c:	aa0003e1 	mov	x1, x0
   13f30:	aa0203e0 	mov	x0, x2
   13f34:	97fff3a6 	bl	10dcc <vListInsertEnd>
   13f38:	14000006 	b	13f50 <vTaskNotifyGiveFromISR+0xf8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
   13f3c:	f9401fa0 	ldr	x0, [x29, #56]
   13f40:	9100c001 	add	x1, x0, #0x30
   13f44:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13f48:	91226000 	add	x0, x0, #0x898
   13f4c:	97fff3a0 	bl	10dcc <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
   13f50:	f9401fa0 	ldr	x0, [x29, #56]
   13f54:	f9402c01 	ldr	x1, [x0, #88]
   13f58:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13f5c:	911da000 	add	x0, x0, #0x768
   13f60:	f9400000 	ldr	x0, [x0]
   13f64:	f9402c00 	ldr	x0, [x0, #88]
   13f68:	eb00003f 	cmp	x1, x0
   13f6c:	54000189 	b.ls	13f9c <vTaskNotifyGiveFromISR+0x144>  // b.plast
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
   13f70:	f9400ba0 	ldr	x0, [x29, #16]
   13f74:	f100001f 	cmp	x0, #0x0
   13f78:	540000a0 	b.eq	13f8c <vTaskNotifyGiveFromISR+0x134>  // b.none
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
   13f7c:	f9400ba0 	ldr	x0, [x29, #16]
   13f80:	d2800021 	mov	x1, #0x1                   	// #1
   13f84:	f9000001 	str	x1, [x0]
   13f88:	14000005 	b	13f9c <vTaskNotifyGiveFromISR+0x144>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
   13f8c:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13f90:	91250000 	add	x0, x0, #0x940
   13f94:	d2800021 	mov	x1, #0x1                   	// #1
   13f98:	f9000001 	str	x1, [x0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   13f9c:	f9401ba0 	ldr	x0, [x29, #48]
   13fa0:	97fff196 	bl	105f8 <vPortClearInterruptMask>
	}
   13fa4:	d503201f 	nop
   13fa8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   13fac:	d65f03c0 	ret

0000000000013fb0 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
   13fb0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   13fb4:	910003fd 	mov	x29, sp
   13fb8:	f9000fa0 	str	x0, [x29, #24]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
   13fbc:	f9400fa0 	ldr	x0, [x29, #24]
   13fc0:	f100001f 	cmp	x0, #0x0
   13fc4:	540000a1 	b.ne	13fd8 <xTaskNotifyStateClear+0x28>  // b.any
   13fc8:	d0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   13fcc:	911da000 	add	x0, x0, #0x768
   13fd0:	f9400000 	ldr	x0, [x0]
   13fd4:	14000002 	b	13fdc <xTaskNotifyStateClear+0x2c>
   13fd8:	f9400fa0 	ldr	x0, [x29, #24]
   13fdc:	f90013a0 	str	x0, [x29, #32]

		taskENTER_CRITICAL();
   13fe0:	97fff130 	bl	104a0 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
   13fe4:	f94013a0 	ldr	x0, [x29, #32]
   13fe8:	39421000 	ldrb	w0, [x0, #132]
   13fec:	53001c00 	uxtb	w0, w0
   13ff0:	7100081f 	cmp	w0, #0x2
   13ff4:	540000c1 	b.ne	1400c <xTaskNotifyStateClear+0x5c>  // b.any
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   13ff8:	f94013a0 	ldr	x0, [x29, #32]
   13ffc:	3902101f 	strb	wzr, [x0, #132]
				xReturn = pdPASS;
   14000:	d2800020 	mov	x0, #0x1                   	// #1
   14004:	f90017a0 	str	x0, [x29, #40]
   14008:	14000002 	b	14010 <xTaskNotifyStateClear+0x60>
			}
			else
			{
				xReturn = pdFAIL;
   1400c:	f90017bf 	str	xzr, [x29, #40]
			}
		}
		taskEXIT_CRITICAL();
   14010:	97fff134 	bl	104e0 <vPortExitCritical>

		return xReturn;
   14014:	f94017a0 	ldr	x0, [x29, #40]
	}
   14018:	a8c37bfd 	ldp	x29, x30, [sp], #48
   1401c:	d65f03c0 	ret

0000000000014020 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   14020:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   14024:	910003fd 	mov	x29, sp
   14028:	f9000fa0 	str	x0, [x29, #24]
   1402c:	f9000ba1 	str	x1, [x29, #16]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   14030:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14034:	91248000 	add	x0, x0, #0x920
   14038:	f9400000 	ldr	x0, [x0]
   1403c:	f90017a0 	str	x0, [x29, #40]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   14040:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14044:	911da000 	add	x0, x0, #0x768
   14048:	f9400000 	ldr	x0, [x0]
   1404c:	91002000 	add	x0, x0, #0x8
   14050:	97fff3b1 	bl	10f14 <uxListRemove>
   14054:	f100001f 	cmp	x0, #0x0
   14058:	54000201 	b.ne	14098 <prvAddCurrentTaskToDelayedList+0x78>  // b.any
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   1405c:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14060:	911da000 	add	x0, x0, #0x768
   14064:	f9400000 	ldr	x0, [x0]
   14068:	f9402c00 	ldr	x0, [x0, #88]
   1406c:	2a0003e1 	mov	w1, w0
   14070:	d2800020 	mov	x0, #0x1                   	// #1
   14074:	9ac12000 	lsl	x0, x0, x1
   14078:	aa2003e1 	mvn	x1, x0
   1407c:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14080:	9124a000 	add	x0, x0, #0x928
   14084:	f9400000 	ldr	x0, [x0]
   14088:	8a000021 	and	x1, x1, x0
   1408c:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14090:	9124a000 	add	x0, x0, #0x928
   14094:	f9000001 	str	x1, [x0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   14098:	f9400fa0 	ldr	x0, [x29, #24]
   1409c:	b100041f 	cmn	x0, #0x1
   140a0:	54000181 	b.ne	140d0 <prvAddCurrentTaskToDelayedList+0xb0>  // b.any
   140a4:	f9400ba0 	ldr	x0, [x29, #16]
   140a8:	f100001f 	cmp	x0, #0x0
   140ac:	54000120 	b.eq	140d0 <prvAddCurrentTaskToDelayedList+0xb0>  // b.none
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   140b0:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   140b4:	911da000 	add	x0, x0, #0x768
   140b8:	f9400000 	ldr	x0, [x0]
   140bc:	91002001 	add	x1, x0, #0x8
   140c0:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   140c4:	9123c000 	add	x0, x0, #0x8f0
   140c8:	97fff341 	bl	10dcc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   140cc:	1400002d 	b	14180 <prvAddCurrentTaskToDelayedList+0x160>
			xTimeToWake = xConstTickCount + xTicksToWait;
   140d0:	f94017a1 	ldr	x1, [x29, #40]
   140d4:	f9400fa0 	ldr	x0, [x29, #24]
   140d8:	8b000020 	add	x0, x1, x0
   140dc:	f90013a0 	str	x0, [x29, #32]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   140e0:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   140e4:	911da000 	add	x0, x0, #0x768
   140e8:	f9400000 	ldr	x0, [x0]
   140ec:	f94013a1 	ldr	x1, [x29, #32]
   140f0:	f9000401 	str	x1, [x0, #8]
			if( xTimeToWake < xConstTickCount )
   140f4:	f94013a1 	ldr	x1, [x29, #32]
   140f8:	f94017a0 	ldr	x0, [x29, #40]
   140fc:	eb00003f 	cmp	x1, x0
   14100:	54000182 	b.cs	14130 <prvAddCurrentTaskToDelayedList+0x110>  // b.hs, b.nlast
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   14104:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14108:	91224000 	add	x0, x0, #0x890
   1410c:	f9400002 	ldr	x2, [x0]
   14110:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14114:	911da000 	add	x0, x0, #0x768
   14118:	f9400000 	ldr	x0, [x0]
   1411c:	91002000 	add	x0, x0, #0x8
   14120:	aa0003e1 	mov	x1, x0
   14124:	aa0203e0 	mov	x0, x2
   14128:	97fff348 	bl	10e48 <vListInsert>
}
   1412c:	14000015 	b	14180 <prvAddCurrentTaskToDelayedList+0x160>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   14130:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14134:	91222000 	add	x0, x0, #0x888
   14138:	f9400002 	ldr	x2, [x0]
   1413c:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14140:	911da000 	add	x0, x0, #0x768
   14144:	f9400000 	ldr	x0, [x0]
   14148:	91002000 	add	x0, x0, #0x8
   1414c:	aa0003e1 	mov	x1, x0
   14150:	aa0203e0 	mov	x0, x2
   14154:	97fff33d 	bl	10e48 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
   14158:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   1415c:	91256000 	add	x0, x0, #0x958
   14160:	f9400000 	ldr	x0, [x0]
   14164:	f94013a1 	ldr	x1, [x29, #32]
   14168:	eb00003f 	cmp	x1, x0
   1416c:	540000a2 	b.cs	14180 <prvAddCurrentTaskToDelayedList+0x160>  // b.hs, b.nlast
					xNextTaskUnblockTime = xTimeToWake;
   14170:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14174:	91256000 	add	x0, x0, #0x958
   14178:	f94013a1 	ldr	x1, [x29, #32]
   1417c:	f9000001 	str	x1, [x0]
}
   14180:	d503201f 	nop
   14184:	a8c37bfd 	ldp	x29, x30, [sp], #48
   14188:	d65f03c0 	ret

000000000001418c <handleRange>:

// Remember which interrupts have been enabled:
static unsigned long enabled[3];

static void handleRange (unsigned long pending, const unsigned int base)
{
   1418c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   14190:	910003fd 	mov	x29, sp
   14194:	f9000fa0 	str	x0, [x29, #24]
   14198:	b90017a1 	str	w1, [x29, #20]
	while (pending)
   1419c:	14000028 	b	1423c <handleRange+0xb0>
	{
		// Get index of first set bit:
		unsigned int bit = 31 - __builtin_clz(pending);
   141a0:	f9400fa0 	ldr	x0, [x29, #24]
   141a4:	5ac01000 	clz	w0, w0
   141a8:	528003e1 	mov	w1, #0x1f                  	// #31
   141ac:	4b000020 	sub	w0, w1, w0
   141b0:	b9002fa0 	str	w0, [x29, #44]

		// Map to IRQ number:
		unsigned int irq = base + bit;
   141b4:	b94017a1 	ldr	w1, [x29, #20]
   141b8:	b9402fa0 	ldr	w0, [x29, #44]
   141bc:	0b000020 	add	w0, w1, w0
   141c0:	b9002ba0 	str	w0, [x29, #40]

		// Call interrupt handler, if enabled:
		if (g_VectorTable[irq].pfnHandler)
   141c4:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   141c8:	9125c001 	add	x1, x0, #0x970
   141cc:	b9402ba0 	ldr	w0, [x29, #40]
   141d0:	d37cec00 	lsl	x0, x0, #4
   141d4:	8b000020 	add	x0, x1, x0
   141d8:	f9400000 	ldr	x0, [x0]
   141dc:	f100001f 	cmp	x0, #0x0
   141e0:	54000200 	b.eq	14220 <handleRange+0x94>  // b.none
			g_VectorTable[irq].pfnHandler(irq, g_VectorTable[irq].pParam);
   141e4:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   141e8:	9125c001 	add	x1, x0, #0x970
   141ec:	b9402ba0 	ldr	w0, [x29, #40]
   141f0:	d37cec00 	lsl	x0, x0, #4
   141f4:	8b000020 	add	x0, x1, x0
   141f8:	f9400002 	ldr	x2, [x0]
   141fc:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14200:	9125c001 	add	x1, x0, #0x970
   14204:	b9402ba0 	ldr	w0, [x29, #40]
   14208:	d37cec00 	lsl	x0, x0, #4
   1420c:	8b000020 	add	x0, x1, x0
   14210:	f9400400 	ldr	x0, [x0, #8]
   14214:	aa0003e1 	mov	x1, x0
   14218:	b9402ba0 	ldr	w0, [x29, #40]
   1421c:	d63f0040 	blr	x2

		// Clear bit in bitfield:
		pending &= ~(1UL << bit);
   14220:	b9402fa0 	ldr	w0, [x29, #44]
   14224:	d2800021 	mov	x1, #0x1                   	// #1
   14228:	9ac02020 	lsl	x0, x1, x0
   1422c:	aa2003e0 	mvn	x0, x0
   14230:	f9400fa1 	ldr	x1, [x29, #24]
   14234:	8a000020 	and	x0, x1, x0
   14238:	f9000fa0 	str	x0, [x29, #24]
	while (pending)
   1423c:	f9400fa0 	ldr	x0, [x29, #24]
   14240:	f100001f 	cmp	x0, #0x0
   14244:	54fffae1 	b.ne	141a0 <handleRange+0x14>  // b.any
	}
}
   14248:	d503201f 	nop
   1424c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   14250:	d65f03c0 	ret

0000000000014254 <irqHandler>:
 *	This is the global IRQ handler on this platform!
 *	It is based on the assembler code found in the Broadcom datasheet.
 *
 **/
void irqHandler (void)
{
   14254:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   14258:	910003fd 	mov	x29, sp
   1425c:	f9000bf3 	str	x19, [sp, #16]
	register unsigned long ulMaskedStatus = pRegs->IRQBasic;
   14260:	d2964000 	mov	x0, #0xb200                	// #45568
   14264:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   14268:	f9400013 	ldr	x19, [x0]

	// Bit 8 in IRQBasic indicates interrupts in Pending1 (interrupts 31-0):
	if (ulMaskedStatus & (1UL << 8))
   1426c:	92780260 	and	x0, x19, #0x100
   14270:	f100001f 	cmp	x0, #0x0
   14274:	54000140 	b.eq	1429c <irqHandler+0x48>  // b.none
		handleRange(pRegs->Pending1 & enabled[0], 0);
   14278:	d2964000 	mov	x0, #0xb200                	// #45568
   1427c:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   14280:	f9400401 	ldr	x1, [x0, #8]
   14284:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14288:	9137c000 	add	x0, x0, #0xdf0
   1428c:	f9400000 	ldr	x0, [x0]
   14290:	8a000020 	and	x0, x1, x0
   14294:	52800001 	mov	w1, #0x0                   	// #0
   14298:	97ffffbd 	bl	1418c <handleRange>

	// Bit 9 in IRQBasic indicates interrupts in Pending2 (interrupts 63-32):
	if (ulMaskedStatus & (1UL << 9))
   1429c:	92770260 	and	x0, x19, #0x200
   142a0:	f100001f 	cmp	x0, #0x0
   142a4:	54000140 	b.eq	142cc <irqHandler+0x78>  // b.none
		handleRange(pRegs->Pending2 & enabled[1], 32);
   142a8:	d2964000 	mov	x0, #0xb200                	// #45568
   142ac:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   142b0:	f9400801 	ldr	x1, [x0, #16]
   142b4:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   142b8:	9137c000 	add	x0, x0, #0xdf0
   142bc:	f9400400 	ldr	x0, [x0, #8]
   142c0:	8a000020 	and	x0, x1, x0
   142c4:	52800401 	mov	w1, #0x20                  	// #32
   142c8:	97ffffb1 	bl	1418c <handleRange>

	// Bits 7 through 0 in IRQBasic represent interrupts 64-71:
	if (ulMaskedStatus & 0xFF)
   142cc:	92401e60 	and	x0, x19, #0xff
   142d0:	f100001f 	cmp	x0, #0x0
   142d4:	54000100 	b.eq	142f4 <irqHandler+0xa0>  // b.none
		handleRange(ulMaskedStatus & 0xFF & enabled[2], 64);
   142d8:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   142dc:	9137c000 	add	x0, x0, #0xdf0
   142e0:	f9400800 	ldr	x0, [x0, #16]
   142e4:	8a130000 	and	x0, x0, x19
   142e8:	92401c00 	and	x0, x0, #0xff
   142ec:	52800801 	mov	w1, #0x40                  	// #64
   142f0:	97ffffa7 	bl	1418c <handleRange>
}
   142f4:	d503201f 	nop
   142f8:	f9400bf3 	ldr	x19, [sp, #16]
   142fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   14300:	d65f03c0 	ret

0000000000014304 <irqUnblock>:

void irqUnblock (void)
{
	asm volatile ("MSR DAIFCLR, #2" ::: "memory");
   14304:	d50342ff 	msr	daifclr, #0x2
}
   14308:	d503201f 	nop
   1430c:	d65f03c0 	ret

0000000000014310 <irqBlock>:

void irqBlock (void)
{
	asm volatile ("MSR DAIFSET, #2" ::: "memory");
   14310:	d50342df 	msr	daifset, #0x2
}
   14314:	d503201f 	nop
   14318:	d65f03c0 	ret

000000000001431c <irqRegister>:

void irqRegister (const unsigned int irq, FN_INTERRUPT_HANDLER pfnHandler, void *pParam)
{
   1431c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   14320:	910003fd 	mov	x29, sp
   14324:	b9002fa0 	str	w0, [x29, #44]
   14328:	f90013a1 	str	x1, [x29, #32]
   1432c:	f9000fa2 	str	x2, [x29, #24]
	if (irq < BCM2835_INTC_TOTAL_IRQ) {
   14330:	b9402fa0 	ldr	w0, [x29, #44]
   14334:	71011c1f 	cmp	w0, #0x47
   14338:	54000228 	b.hi	1437c <irqRegister+0x60>  // b.pmore
		irqBlock();
   1433c:	97fffff5 	bl	14310 <irqBlock>
		g_VectorTable[irq].pfnHandler = pfnHandler;
   14340:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14344:	9125c001 	add	x1, x0, #0x970
   14348:	b9402fa0 	ldr	w0, [x29, #44]
   1434c:	d37cec00 	lsl	x0, x0, #4
   14350:	8b000020 	add	x0, x1, x0
   14354:	f94013a1 	ldr	x1, [x29, #32]
   14358:	f9000001 	str	x1, [x0]
		g_VectorTable[irq].pParam     = pParam;
   1435c:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14360:	9125c001 	add	x1, x0, #0x970
   14364:	b9402fa0 	ldr	w0, [x29, #44]
   14368:	d37cec00 	lsl	x0, x0, #4
   1436c:	8b000020 	add	x0, x1, x0
   14370:	f9400fa1 	ldr	x1, [x29, #24]
   14374:	f9000401 	str	x1, [x0, #8]
		irqUnblock();
   14378:	97ffffe3 	bl	14304 <irqUnblock>
	}
}
   1437c:	d503201f 	nop
   14380:	a8c37bfd 	ldp	x29, x30, [sp], #48
   14384:	d65f03c0 	ret

0000000000014388 <irqEnable>:

void irqEnable (const unsigned int irq)
{
   14388:	d10083ff 	sub	sp, sp, #0x20
   1438c:	b9000fe0 	str	w0, [sp, #12]
	unsigned long mask = 1UL << (irq % 32);
   14390:	b9400fe0 	ldr	w0, [sp, #12]
   14394:	12001000 	and	w0, w0, #0x1f
   14398:	d2800021 	mov	x1, #0x1                   	// #1
   1439c:	9ac02020 	lsl	x0, x1, x0
   143a0:	f9000fe0 	str	x0, [sp, #24]

	if (irq <= 31) {
   143a4:	b9400fe0 	ldr	w0, [sp, #12]
   143a8:	71007c1f 	cmp	w0, #0x1f
   143ac:	540001c8 	b.hi	143e4 <irqEnable+0x5c>  // b.pmore
		pRegs->Enable1 = mask;
   143b0:	d2964000 	mov	x0, #0xb200                	// #45568
   143b4:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   143b8:	f9400fe1 	ldr	x1, [sp, #24]
   143bc:	f9001001 	str	x1, [x0, #32]
		enabled[0] |= mask;
   143c0:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   143c4:	9137c000 	add	x0, x0, #0xdf0
   143c8:	f9400001 	ldr	x1, [x0]
   143cc:	f9400fe0 	ldr	x0, [sp, #24]
   143d0:	aa000021 	orr	x1, x1, x0
   143d4:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   143d8:	9137c000 	add	x0, x0, #0xdf0
   143dc:	f9000001 	str	x1, [x0]
	}
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
		pRegs->EnableBasic = mask;
		enabled[2] |= mask;
	}
}
   143e0:	14000020 	b	14460 <irqEnable+0xd8>
	else if (irq <= 63) {
   143e4:	b9400fe0 	ldr	w0, [sp, #12]
   143e8:	7100fc1f 	cmp	w0, #0x3f
   143ec:	540001c8 	b.hi	14424 <irqEnable+0x9c>  // b.pmore
		pRegs->Enable2 = mask;
   143f0:	d2964000 	mov	x0, #0xb200                	// #45568
   143f4:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   143f8:	f9400fe1 	ldr	x1, [sp, #24]
   143fc:	f9001401 	str	x1, [x0, #40]
		enabled[1] |= mask;
   14400:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14404:	9137c000 	add	x0, x0, #0xdf0
   14408:	f9400401 	ldr	x1, [x0, #8]
   1440c:	f9400fe0 	ldr	x0, [sp, #24]
   14410:	aa000021 	orr	x1, x1, x0
   14414:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14418:	9137c000 	add	x0, x0, #0xdf0
   1441c:	f9000401 	str	x1, [x0, #8]
}
   14420:	14000010 	b	14460 <irqEnable+0xd8>
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
   14424:	b9400fe0 	ldr	w0, [sp, #12]
   14428:	71011c1f 	cmp	w0, #0x47
   1442c:	540001a8 	b.hi	14460 <irqEnable+0xd8>  // b.pmore
		pRegs->EnableBasic = mask;
   14430:	d2964000 	mov	x0, #0xb200                	// #45568
   14434:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   14438:	f9400fe1 	ldr	x1, [sp, #24]
   1443c:	f9001801 	str	x1, [x0, #48]
		enabled[2] |= mask;
   14440:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14444:	9137c000 	add	x0, x0, #0xdf0
   14448:	f9400801 	ldr	x1, [x0, #16]
   1444c:	f9400fe0 	ldr	x0, [sp, #24]
   14450:	aa000021 	orr	x1, x1, x0
   14454:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14458:	9137c000 	add	x0, x0, #0xdf0
   1445c:	f9000801 	str	x1, [x0, #16]
}
   14460:	d503201f 	nop
   14464:	910083ff 	add	sp, sp, #0x20
   14468:	d65f03c0 	ret

000000000001446c <irqDisable>:

void irqDisable (const unsigned int irq)
{
   1446c:	d10083ff 	sub	sp, sp, #0x20
   14470:	b9000fe0 	str	w0, [sp, #12]
	unsigned long mask = 1UL << (irq % 32);
   14474:	b9400fe0 	ldr	w0, [sp, #12]
   14478:	12001000 	and	w0, w0, #0x1f
   1447c:	d2800021 	mov	x1, #0x1                   	// #1
   14480:	9ac02020 	lsl	x0, x1, x0
   14484:	f9000fe0 	str	x0, [sp, #24]

	if (irq <= 31) {
   14488:	b9400fe0 	ldr	w0, [sp, #12]
   1448c:	71007c1f 	cmp	w0, #0x1f
   14490:	540001e8 	b.hi	144cc <irqDisable+0x60>  // b.pmore
		pRegs->Disable1 = mask;
   14494:	d2964000 	mov	x0, #0xb200                	// #45568
   14498:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   1449c:	f9400fe1 	ldr	x1, [sp, #24]
   144a0:	f9001c01 	str	x1, [x0, #56]
		enabled[0] &= ~mask;
   144a4:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   144a8:	9137c000 	add	x0, x0, #0xdf0
   144ac:	f9400001 	ldr	x1, [x0]
   144b0:	f9400fe0 	ldr	x0, [sp, #24]
   144b4:	aa2003e0 	mvn	x0, x0
   144b8:	8a000021 	and	x1, x1, x0
   144bc:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   144c0:	9137c000 	add	x0, x0, #0xdf0
   144c4:	f9000001 	str	x1, [x0]
	}
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
		pRegs->DisableBasic = mask;
		enabled[2] &= ~mask;
	}
}
   144c8:	14000022 	b	14550 <irqDisable+0xe4>
	else if (irq <= 63) {
   144cc:	b9400fe0 	ldr	w0, [sp, #12]
   144d0:	7100fc1f 	cmp	w0, #0x3f
   144d4:	540001e8 	b.hi	14510 <irqDisable+0xa4>  // b.pmore
		pRegs->Disable2 = mask;
   144d8:	d2964000 	mov	x0, #0xb200                	// #45568
   144dc:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   144e0:	f9400fe1 	ldr	x1, [sp, #24]
   144e4:	f9002001 	str	x1, [x0, #64]
		enabled[1] &= ~mask;
   144e8:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   144ec:	9137c000 	add	x0, x0, #0xdf0
   144f0:	f9400401 	ldr	x1, [x0, #8]
   144f4:	f9400fe0 	ldr	x0, [sp, #24]
   144f8:	aa2003e0 	mvn	x0, x0
   144fc:	8a000021 	and	x1, x1, x0
   14500:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14504:	9137c000 	add	x0, x0, #0xdf0
   14508:	f9000401 	str	x1, [x0, #8]
}
   1450c:	14000011 	b	14550 <irqDisable+0xe4>
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
   14510:	b9400fe0 	ldr	w0, [sp, #12]
   14514:	71011c1f 	cmp	w0, #0x47
   14518:	540001c8 	b.hi	14550 <irqDisable+0xe4>  // b.pmore
		pRegs->DisableBasic = mask;
   1451c:	d2964000 	mov	x0, #0xb200                	// #45568
   14520:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   14524:	f9400fe1 	ldr	x1, [sp, #24]
   14528:	f9002401 	str	x1, [x0, #72]
		enabled[2] &= ~mask;
   1452c:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14530:	9137c000 	add	x0, x0, #0xdf0
   14534:	f9400801 	ldr	x1, [x0, #16]
   14538:	f9400fe0 	ldr	x0, [sp, #24]
   1453c:	aa2003e0 	mvn	x0, x0
   14540:	8a000021 	and	x1, x1, x0
   14544:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14548:	9137c000 	add	x0, x0, #0xdf0
   1454c:	f9000801 	str	x1, [x0, #16]
}
   14550:	d503201f 	nop
   14554:	910083ff 	add	sp, sp, #0x20
   14558:	d65f03c0 	ret

000000000001455c <SetGpioFunction>:
} BCM2835_GPIO_REGS;

volatile BCM2835_GPIO_REGS * const pRegs = (BCM2835_GPIO_REGS *) (0x20200000);


void SetGpioFunction(unsigned int pinNum, unsigned int funcNum) {
   1455c:	d100c3ff 	sub	sp, sp, #0x30
   14560:	b9000fe0 	str	w0, [sp, #12]
   14564:	b9000be1 	str	w1, [sp, #8]

	int offset = pinNum / 10;
   14568:	b9400fe1 	ldr	w1, [sp, #12]
   1456c:	529999a0 	mov	w0, #0xcccd                	// #52429
   14570:	72b99980 	movk	w0, #0xcccc, lsl #16
   14574:	9ba07c20 	umull	x0, w1, w0
   14578:	d360fc00 	lsr	x0, x0, #32
   1457c:	53037c00 	lsr	w0, w0, #3
   14580:	b9002fe0 	str	w0, [sp, #44]

	unsigned long val = pRegs->GPFSEL[offset];	// Read in the original register value.
   14584:	d2a40400 	mov	x0, #0x20200000            	// #538968064
   14588:	b9802fe1 	ldrsw	x1, [sp, #44]
   1458c:	f8617800 	ldr	x0, [x0, x1, lsl #3]
   14590:	f90013e0 	str	x0, [sp, #32]

	int item = pinNum % 10;
   14594:	b9400fe2 	ldr	w2, [sp, #12]
   14598:	529999a0 	mov	w0, #0xcccd                	// #52429
   1459c:	72b99980 	movk	w0, #0xcccc, lsl #16
   145a0:	9ba07c40 	umull	x0, w2, w0
   145a4:	d360fc00 	lsr	x0, x0, #32
   145a8:	53037c01 	lsr	w1, w0, #3
   145ac:	2a0103e0 	mov	w0, w1
   145b0:	531e7400 	lsl	w0, w0, #2
   145b4:	0b010000 	add	w0, w0, w1
   145b8:	531f7800 	lsl	w0, w0, #1
   145bc:	4b000041 	sub	w1, w2, w0
   145c0:	b9001fe1 	str	w1, [sp, #28]
	val &= ~(0x7 << (item * 3));
   145c4:	b9401fe1 	ldr	w1, [sp, #28]
   145c8:	2a0103e0 	mov	w0, w1
   145cc:	531f7800 	lsl	w0, w0, #1
   145d0:	0b010000 	add	w0, w0, w1
   145d4:	528000e1 	mov	w1, #0x7                   	// #7
   145d8:	1ac02020 	lsl	w0, w1, w0
   145dc:	2a2003e0 	mvn	w0, w0
   145e0:	93407c00 	sxtw	x0, w0
   145e4:	f94013e1 	ldr	x1, [sp, #32]
   145e8:	8a000020 	and	x0, x1, x0
   145ec:	f90013e0 	str	x0, [sp, #32]
	val |= ((funcNum & 0x7) << (item * 3));
   145f0:	b9400be0 	ldr	w0, [sp, #8]
   145f4:	12000802 	and	w2, w0, #0x7
   145f8:	b9401fe1 	ldr	w1, [sp, #28]
   145fc:	2a0103e0 	mov	w0, w1
   14600:	531f7800 	lsl	w0, w0, #1
   14604:	0b010000 	add	w0, w0, w1
   14608:	1ac02040 	lsl	w0, w2, w0
   1460c:	2a0003e0 	mov	w0, w0
   14610:	f94013e1 	ldr	x1, [sp, #32]
   14614:	aa000020 	orr	x0, x1, x0
   14618:	f90013e0 	str	x0, [sp, #32]
	pRegs->GPFSEL[offset] = val;
   1461c:	d2a40400 	mov	x0, #0x20200000            	// #538968064
   14620:	b9802fe1 	ldrsw	x1, [sp, #44]
   14624:	f94013e2 	ldr	x2, [sp, #32]
   14628:	f8217802 	str	x2, [x0, x1, lsl #3]
}
   1462c:	d503201f 	nop
   14630:	9100c3ff 	add	sp, sp, #0x30
   14634:	d65f03c0 	ret

0000000000014638 <SetGpioDirection>:

void SetGpioDirection(unsigned int pinNum, enum GPIO_DIR dir) {
   14638:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   1463c:	910003fd 	mov	x29, sp
   14640:	b9001fa0 	str	w0, [x29, #28]
   14644:	b9001ba1 	str	w1, [x29, #24]
	SetGpioFunction(pinNum,dir);
   14648:	b9401ba1 	ldr	w1, [x29, #24]
   1464c:	b9401fa0 	ldr	w0, [x29, #28]
   14650:	97ffffc3 	bl	1455c <SetGpioFunction>
}
   14654:	d503201f 	nop
   14658:	a8c27bfd 	ldp	x29, x30, [sp], #32
   1465c:	d65f03c0 	ret

0000000000014660 <SetGpio>:

void SetGpio(unsigned int pinNum, unsigned int pinVal) {
   14660:	d10083ff 	sub	sp, sp, #0x20
   14664:	b9000fe0 	str	w0, [sp, #12]
   14668:	b9000be1 	str	w1, [sp, #8]
	unsigned long offset=pinNum/32;
   1466c:	b9400fe0 	ldr	w0, [sp, #12]
   14670:	53057c00 	lsr	w0, w0, #5
   14674:	2a0003e0 	mov	w0, w0
   14678:	f9000fe0 	str	x0, [sp, #24]
	unsigned long mask=(1<<(pinNum%32));
   1467c:	b9400fe0 	ldr	w0, [sp, #12]
   14680:	12001000 	and	w0, w0, #0x1f
   14684:	52800021 	mov	w1, #0x1                   	// #1
   14688:	1ac02020 	lsl	w0, w1, w0
   1468c:	93407c00 	sxtw	x0, w0
   14690:	f9000be0 	str	x0, [sp, #16]

	if(pinVal) {
   14694:	b9400be0 	ldr	w0, [sp, #8]
   14698:	7100001f 	cmp	w0, #0x0
   1469c:	54000200 	b.eq	146dc <SetGpio+0x7c>  // b.none
		pRegs->GPSET[offset]|=mask;
   146a0:	d2a40402 	mov	x2, #0x20200000            	// #538968064
   146a4:	d2a40401 	mov	x1, #0x20200000            	// #538968064
   146a8:	f9400fe0 	ldr	x0, [sp, #24]
   146ac:	91001800 	add	x0, x0, #0x6
   146b0:	d37df000 	lsl	x0, x0, #3
   146b4:	8b000020 	add	x0, x1, x0
   146b8:	f9400401 	ldr	x1, [x0, #8]
   146bc:	f9400be0 	ldr	x0, [sp, #16]
   146c0:	aa000021 	orr	x1, x1, x0
   146c4:	f9400fe0 	ldr	x0, [sp, #24]
   146c8:	91001800 	add	x0, x0, #0x6
   146cc:	d37df000 	lsl	x0, x0, #3
   146d0:	8b000040 	add	x0, x2, x0
   146d4:	f9000401 	str	x1, [x0, #8]
	} else {
		pRegs->GPCLR[offset]|=mask;
	}
}
   146d8:	1400000b 	b	14704 <SetGpio+0xa4>
		pRegs->GPCLR[offset]|=mask;
   146dc:	d2a40400 	mov	x0, #0x20200000            	// #538968064
   146e0:	d2a40401 	mov	x1, #0x20200000            	// #538968064
   146e4:	f9400fe2 	ldr	x2, [sp, #24]
   146e8:	91002842 	add	x2, x2, #0xa
   146ec:	f8627822 	ldr	x2, [x1, x2, lsl #3]
   146f0:	f9400be1 	ldr	x1, [sp, #16]
   146f4:	aa010042 	orr	x2, x2, x1
   146f8:	f9400fe1 	ldr	x1, [sp, #24]
   146fc:	91002821 	add	x1, x1, #0xa
   14700:	f8217802 	str	x2, [x0, x1, lsl #3]
}
   14704:	d503201f 	nop
   14708:	910083ff 	add	sp, sp, #0x20
   1470c:	d65f03c0 	ret

0000000000014710 <ReadGpio>:

int ReadGpio(unsigned int pinNum) {
   14710:	d10043ff 	sub	sp, sp, #0x10
   14714:	b9000fe0 	str	w0, [sp, #12]
	return ((pRegs->GPLEV[pinNum/32])>>(pinNum%32))&1;
   14718:	d2a40401 	mov	x1, #0x20200000            	// #538968064
   1471c:	b9400fe0 	ldr	w0, [sp, #12]
   14720:	53057c00 	lsr	w0, w0, #5
   14724:	2a0003e0 	mov	w0, w0
   14728:	91003000 	add	x0, x0, #0xc
   1472c:	d37df000 	lsl	x0, x0, #3
   14730:	8b000020 	add	x0, x1, x0
   14734:	f9400401 	ldr	x1, [x0, #8]
   14738:	b9400fe0 	ldr	w0, [sp, #12]
   1473c:	12001000 	and	w0, w0, #0x1f
   14740:	9ac02420 	lsr	x0, x1, x0
   14744:	12000000 	and	w0, w0, #0x1
}
   14748:	910043ff 	add	sp, sp, #0x10
   1474c:	d65f03c0 	ret

0000000000014750 <EnableGpioDetect>:

void EnableGpioDetect(unsigned int pinNum, enum DETECT_TYPE type)
{
   14750:	d10083ff 	sub	sp, sp, #0x20
   14754:	b9000fe0 	str	w0, [sp, #12]
   14758:	b9000be1 	str	w1, [sp, #8]
	unsigned long mask=(1<<pinNum);
   1475c:	b9400fe0 	ldr	w0, [sp, #12]
   14760:	52800021 	mov	w1, #0x1                   	// #1
   14764:	1ac02020 	lsl	w0, w1, w0
   14768:	93407c00 	sxtw	x0, w0
   1476c:	f9000fe0 	str	x0, [sp, #24]
	unsigned long offset=pinNum/32;
   14770:	b9400fe0 	ldr	w0, [sp, #12]
   14774:	53057c00 	lsr	w0, w0, #5
   14778:	2a0003e0 	mov	w0, w0
   1477c:	f9000be0 	str	x0, [sp, #16]
	
	switch(type) {
   14780:	b9400be0 	ldr	w0, [sp, #8]
   14784:	7100181f 	cmp	w0, #0x6
   14788:	54000ac8 	b.hi	148e0 <EnableGpioDetect+0x190>  // b.pmore
   1478c:	b0000001 	adrp	x1, 15000 <prvHeapInit+0x50>
   14790:	91126021 	add	x1, x1, #0x498
   14794:	b8605820 	ldr	w0, [x1, w0, uxtw #2]
   14798:	10000061 	adr	x1, 147a4 <EnableGpioDetect+0x54>
   1479c:	8b20c820 	add	x0, x1, w0, sxtw #2
   147a0:	d61f0000 	br	x0
	case DETECT_RISING:
		pRegs->GPREN[offset]|=mask;
   147a4:	d2a40402 	mov	x2, #0x20200000            	// #538968064
   147a8:	d2a40401 	mov	x1, #0x20200000            	// #538968064
   147ac:	f9400be0 	ldr	x0, [sp, #16]
   147b0:	91004800 	add	x0, x0, #0x12
   147b4:	d37df000 	lsl	x0, x0, #3
   147b8:	8b000020 	add	x0, x1, x0
   147bc:	f9400401 	ldr	x1, [x0, #8]
   147c0:	f9400fe0 	ldr	x0, [sp, #24]
   147c4:	aa000021 	orr	x1, x1, x0
   147c8:	f9400be0 	ldr	x0, [sp, #16]
   147cc:	91004800 	add	x0, x0, #0x12
   147d0:	d37df000 	lsl	x0, x0, #3
   147d4:	8b000040 	add	x0, x2, x0
   147d8:	f9000401 	str	x1, [x0, #8]
		break;
   147dc:	14000041 	b	148e0 <EnableGpioDetect+0x190>
	case DETECT_FALLING:
		pRegs->GPFEN[offset]|=mask;
   147e0:	d2a40400 	mov	x0, #0x20200000            	// #538968064
   147e4:	d2a40401 	mov	x1, #0x20200000            	// #538968064
   147e8:	f9400be2 	ldr	x2, [sp, #16]
   147ec:	91005842 	add	x2, x2, #0x16
   147f0:	f8627822 	ldr	x2, [x1, x2, lsl #3]
   147f4:	f9400fe1 	ldr	x1, [sp, #24]
   147f8:	aa010042 	orr	x2, x2, x1
   147fc:	f9400be1 	ldr	x1, [sp, #16]
   14800:	91005821 	add	x1, x1, #0x16
   14804:	f8217802 	str	x2, [x0, x1, lsl #3]
		break;
   14808:	14000036 	b	148e0 <EnableGpioDetect+0x190>
	case DETECT_HIGH:
		pRegs->GPHEN[offset]|=mask;
   1480c:	d2a40402 	mov	x2, #0x20200000            	// #538968064
   14810:	d2a40401 	mov	x1, #0x20200000            	// #538968064
   14814:	f9400be0 	ldr	x0, [sp, #16]
   14818:	91006000 	add	x0, x0, #0x18
   1481c:	d37df000 	lsl	x0, x0, #3
   14820:	8b000020 	add	x0, x1, x0
   14824:	f9400401 	ldr	x1, [x0, #8]
   14828:	f9400fe0 	ldr	x0, [sp, #24]
   1482c:	aa000021 	orr	x1, x1, x0
   14830:	f9400be0 	ldr	x0, [sp, #16]
   14834:	91006000 	add	x0, x0, #0x18
   14838:	d37df000 	lsl	x0, x0, #3
   1483c:	8b000040 	add	x0, x2, x0
   14840:	f9000401 	str	x1, [x0, #8]
		break;
   14844:	14000027 	b	148e0 <EnableGpioDetect+0x190>
	case DETECT_LOW:
		pRegs->GPLEN[offset]|=mask;
   14848:	d2a40400 	mov	x0, #0x20200000            	// #538968064
   1484c:	d2a40401 	mov	x1, #0x20200000            	// #538968064
   14850:	f9400be2 	ldr	x2, [sp, #16]
   14854:	91007042 	add	x2, x2, #0x1c
   14858:	f8627822 	ldr	x2, [x1, x2, lsl #3]
   1485c:	f9400fe1 	ldr	x1, [sp, #24]
   14860:	aa010042 	orr	x2, x2, x1
   14864:	f9400be1 	ldr	x1, [sp, #16]
   14868:	91007021 	add	x1, x1, #0x1c
   1486c:	f8217802 	str	x2, [x0, x1, lsl #3]
		break;
   14870:	1400001c 	b	148e0 <EnableGpioDetect+0x190>
	case DETECT_RISING_ASYNC:
		pRegs->GPAREN[offset]|=mask;
   14874:	d2a40402 	mov	x2, #0x20200000            	// #538968064
   14878:	d2a40401 	mov	x1, #0x20200000            	// #538968064
   1487c:	f9400be0 	ldr	x0, [sp, #16]
   14880:	91007800 	add	x0, x0, #0x1e
   14884:	d37df000 	lsl	x0, x0, #3
   14888:	8b000020 	add	x0, x1, x0
   1488c:	f9400401 	ldr	x1, [x0, #8]
   14890:	f9400fe0 	ldr	x0, [sp, #24]
   14894:	aa000021 	orr	x1, x1, x0
   14898:	f9400be0 	ldr	x0, [sp, #16]
   1489c:	91007800 	add	x0, x0, #0x1e
   148a0:	d37df000 	lsl	x0, x0, #3
   148a4:	8b000040 	add	x0, x2, x0
   148a8:	f9000401 	str	x1, [x0, #8]
		break;
   148ac:	1400000d 	b	148e0 <EnableGpioDetect+0x190>
	case DETECT_FALLING_ASYNC:
		pRegs->GPAFEN[offset]|=mask;
   148b0:	d2a40400 	mov	x0, #0x20200000            	// #538968064
   148b4:	d2a40401 	mov	x1, #0x20200000            	// #538968064
   148b8:	f9400be2 	ldr	x2, [sp, #16]
   148bc:	91008842 	add	x2, x2, #0x22
   148c0:	f8627822 	ldr	x2, [x1, x2, lsl #3]
   148c4:	f9400fe1 	ldr	x1, [sp, #24]
   148c8:	aa010042 	orr	x2, x2, x1
   148cc:	f9400be1 	ldr	x1, [sp, #16]
   148d0:	91008821 	add	x1, x1, #0x22
   148d4:	f8217802 	str	x2, [x0, x1, lsl #3]
		break;
   148d8:	14000002 	b	148e0 <EnableGpioDetect+0x190>
	case DETECT_NONE:
		break;
   148dc:	d503201f 	nop
	}
}
   148e0:	d503201f 	nop
   148e4:	910083ff 	add	sp, sp, #0x20
   148e8:	d65f03c0 	ret

00000000000148ec <DisableGpioDetect>:

void DisableGpioDetect(unsigned int pinNum, enum DETECT_TYPE type)
{
   148ec:	d10083ff 	sub	sp, sp, #0x20
   148f0:	b9000fe0 	str	w0, [sp, #12]
   148f4:	b9000be1 	str	w1, [sp, #8]
	unsigned long mask=~(1<<(pinNum%32));
   148f8:	b9400fe0 	ldr	w0, [sp, #12]
   148fc:	12001000 	and	w0, w0, #0x1f
   14900:	52800021 	mov	w1, #0x1                   	// #1
   14904:	1ac02020 	lsl	w0, w1, w0
   14908:	2a2003e0 	mvn	w0, w0
   1490c:	93407c00 	sxtw	x0, w0
   14910:	f9000fe0 	str	x0, [sp, #24]
	unsigned long offset=pinNum/32;
   14914:	b9400fe0 	ldr	w0, [sp, #12]
   14918:	53057c00 	lsr	w0, w0, #5
   1491c:	2a0003e0 	mov	w0, w0
   14920:	f9000be0 	str	x0, [sp, #16]
	
	switch(type) {
   14924:	b9400be0 	ldr	w0, [sp, #8]
   14928:	7100181f 	cmp	w0, #0x6
   1492c:	54000ac8 	b.hi	14a84 <DisableGpioDetect+0x198>  // b.pmore
   14930:	b0000001 	adrp	x1, 15000 <prvHeapInit+0x50>
   14934:	9112d021 	add	x1, x1, #0x4b4
   14938:	b8605820 	ldr	w0, [x1, w0, uxtw #2]
   1493c:	10000061 	adr	x1, 14948 <DisableGpioDetect+0x5c>
   14940:	8b20c820 	add	x0, x1, w0, sxtw #2
   14944:	d61f0000 	br	x0
	case DETECT_RISING:
		pRegs->GPREN[offset]&=mask;
   14948:	d2a40402 	mov	x2, #0x20200000            	// #538968064
   1494c:	d2a40401 	mov	x1, #0x20200000            	// #538968064
   14950:	f9400be0 	ldr	x0, [sp, #16]
   14954:	91004800 	add	x0, x0, #0x12
   14958:	d37df000 	lsl	x0, x0, #3
   1495c:	8b000020 	add	x0, x1, x0
   14960:	f9400401 	ldr	x1, [x0, #8]
   14964:	f9400fe0 	ldr	x0, [sp, #24]
   14968:	8a000021 	and	x1, x1, x0
   1496c:	f9400be0 	ldr	x0, [sp, #16]
   14970:	91004800 	add	x0, x0, #0x12
   14974:	d37df000 	lsl	x0, x0, #3
   14978:	8b000040 	add	x0, x2, x0
   1497c:	f9000401 	str	x1, [x0, #8]
		break;
   14980:	14000041 	b	14a84 <DisableGpioDetect+0x198>
	case DETECT_FALLING:
		pRegs->GPFEN[offset]&=mask;
   14984:	d2a40400 	mov	x0, #0x20200000            	// #538968064
   14988:	d2a40401 	mov	x1, #0x20200000            	// #538968064
   1498c:	f9400be2 	ldr	x2, [sp, #16]
   14990:	91005842 	add	x2, x2, #0x16
   14994:	f8627822 	ldr	x2, [x1, x2, lsl #3]
   14998:	f9400fe1 	ldr	x1, [sp, #24]
   1499c:	8a010042 	and	x2, x2, x1
   149a0:	f9400be1 	ldr	x1, [sp, #16]
   149a4:	91005821 	add	x1, x1, #0x16
   149a8:	f8217802 	str	x2, [x0, x1, lsl #3]
		break;
   149ac:	14000036 	b	14a84 <DisableGpioDetect+0x198>
	case DETECT_HIGH:
		pRegs->GPHEN[offset]&=mask;
   149b0:	d2a40402 	mov	x2, #0x20200000            	// #538968064
   149b4:	d2a40401 	mov	x1, #0x20200000            	// #538968064
   149b8:	f9400be0 	ldr	x0, [sp, #16]
   149bc:	91006000 	add	x0, x0, #0x18
   149c0:	d37df000 	lsl	x0, x0, #3
   149c4:	8b000020 	add	x0, x1, x0
   149c8:	f9400401 	ldr	x1, [x0, #8]
   149cc:	f9400fe0 	ldr	x0, [sp, #24]
   149d0:	8a000021 	and	x1, x1, x0
   149d4:	f9400be0 	ldr	x0, [sp, #16]
   149d8:	91006000 	add	x0, x0, #0x18
   149dc:	d37df000 	lsl	x0, x0, #3
   149e0:	8b000040 	add	x0, x2, x0
   149e4:	f9000401 	str	x1, [x0, #8]
		break;
   149e8:	14000027 	b	14a84 <DisableGpioDetect+0x198>
	case DETECT_LOW:
		pRegs->GPLEN[offset]&=mask;
   149ec:	d2a40400 	mov	x0, #0x20200000            	// #538968064
   149f0:	d2a40401 	mov	x1, #0x20200000            	// #538968064
   149f4:	f9400be2 	ldr	x2, [sp, #16]
   149f8:	91007042 	add	x2, x2, #0x1c
   149fc:	f8627822 	ldr	x2, [x1, x2, lsl #3]
   14a00:	f9400fe1 	ldr	x1, [sp, #24]
   14a04:	8a010042 	and	x2, x2, x1
   14a08:	f9400be1 	ldr	x1, [sp, #16]
   14a0c:	91007021 	add	x1, x1, #0x1c
   14a10:	f8217802 	str	x2, [x0, x1, lsl #3]
		break;
   14a14:	1400001c 	b	14a84 <DisableGpioDetect+0x198>
	case DETECT_RISING_ASYNC:
		pRegs->GPAREN[offset]&=mask;
   14a18:	d2a40402 	mov	x2, #0x20200000            	// #538968064
   14a1c:	d2a40401 	mov	x1, #0x20200000            	// #538968064
   14a20:	f9400be0 	ldr	x0, [sp, #16]
   14a24:	91007800 	add	x0, x0, #0x1e
   14a28:	d37df000 	lsl	x0, x0, #3
   14a2c:	8b000020 	add	x0, x1, x0
   14a30:	f9400401 	ldr	x1, [x0, #8]
   14a34:	f9400fe0 	ldr	x0, [sp, #24]
   14a38:	8a000021 	and	x1, x1, x0
   14a3c:	f9400be0 	ldr	x0, [sp, #16]
   14a40:	91007800 	add	x0, x0, #0x1e
   14a44:	d37df000 	lsl	x0, x0, #3
   14a48:	8b000040 	add	x0, x2, x0
   14a4c:	f9000401 	str	x1, [x0, #8]
		break;
   14a50:	1400000d 	b	14a84 <DisableGpioDetect+0x198>
	case DETECT_FALLING_ASYNC:
		pRegs->GPAFEN[offset]&=mask;
   14a54:	d2a40400 	mov	x0, #0x20200000            	// #538968064
   14a58:	d2a40401 	mov	x1, #0x20200000            	// #538968064
   14a5c:	f9400be2 	ldr	x2, [sp, #16]
   14a60:	91008842 	add	x2, x2, #0x22
   14a64:	f8627822 	ldr	x2, [x1, x2, lsl #3]
   14a68:	f9400fe1 	ldr	x1, [sp, #24]
   14a6c:	8a010042 	and	x2, x2, x1
   14a70:	f9400be1 	ldr	x1, [sp, #16]
   14a74:	91008821 	add	x1, x1, #0x22
   14a78:	f8217802 	str	x2, [x0, x1, lsl #3]
		break;
   14a7c:	14000002 	b	14a84 <DisableGpioDetect+0x198>
	case DETECT_NONE:
		break;
   14a80:	d503201f 	nop
	}
}
   14a84:	d503201f 	nop
   14a88:	910083ff 	add	sp, sp, #0x20
   14a8c:	d65f03c0 	ret

0000000000014a90 <ClearGpioInterrupt>:

void ClearGpioInterrupt(unsigned int pinNum)
{
   14a90:	d10083ff 	sub	sp, sp, #0x20
   14a94:	b9000fe0 	str	w0, [sp, #12]
	unsigned long mask=(1<<(pinNum%32));
   14a98:	b9400fe0 	ldr	w0, [sp, #12]
   14a9c:	12001000 	and	w0, w0, #0x1f
   14aa0:	52800021 	mov	w1, #0x1                   	// #1
   14aa4:	1ac02020 	lsl	w0, w1, w0
   14aa8:	93407c00 	sxtw	x0, w0
   14aac:	f9000fe0 	str	x0, [sp, #24]
	unsigned long offset=pinNum/32;
   14ab0:	b9400fe0 	ldr	w0, [sp, #12]
   14ab4:	53057c00 	lsr	w0, w0, #5
   14ab8:	2a0003e0 	mov	w0, w0
   14abc:	f9000be0 	str	x0, [sp, #16]

	pRegs->GPEDS[offset]=mask;
   14ac0:	d2a40400 	mov	x0, #0x20200000            	// #538968064
   14ac4:	f9400be1 	ldr	x1, [sp, #16]
   14ac8:	91004021 	add	x1, x1, #0x10
   14acc:	f9400fe2 	ldr	x2, [sp, #24]
   14ad0:	f8217802 	str	x2, [x0, x1, lsl #3]
}
   14ad4:	d503201f 	nop
   14ad8:	910083ff 	add	sp, sp, #0x20
   14adc:	d65f03c0 	ret

0000000000014ae0 <PUT32>:
#include "regs.h"

static void PUT32 ( unsigned int addr, unsigned int value)
{
   14ae0:	d10043ff 	sub	sp, sp, #0x10
   14ae4:	b9000fe0 	str	w0, [sp, #12]
   14ae8:	b9000be1 	str	w1, [sp, #8]
    *(unsigned int *)addr = value;
   14aec:	b9400fe0 	ldr	w0, [sp, #12]
   14af0:	aa0003e1 	mov	x1, x0
   14af4:	b9400be0 	ldr	w0, [sp, #8]
   14af8:	b9000020 	str	w0, [x1]
}
   14afc:	d503201f 	nop
   14b00:	910043ff 	add	sp, sp, #0x10
   14b04:	d65f03c0 	ret

0000000000014b08 <GET32>:

static unsigned int GET32 ( unsigned int addr)
{
   14b08:	d10043ff 	sub	sp, sp, #0x10
   14b0c:	b9000fe0 	str	w0, [sp, #12]
    return *(unsigned int *)addr;
   14b10:	b9400fe0 	ldr	w0, [sp, #12]
   14b14:	b9400000 	ldr	w0, [x0]
}
   14b18:	910043ff 	add	sp, sp, #0x10
   14b1c:	d65f03c0 	ret

0000000000014b20 <dummy>:

static void dummy ( unsigned int value)
{
   14b20:	d10043ff 	sub	sp, sp, #0x10
   14b24:	b9000fe0 	str	w0, [sp, #12]
    (void)value;
    return;
   14b28:	d503201f 	nop
}
   14b2c:	910043ff 	add	sp, sp, #0x10
   14b30:	d65f03c0 	ret

0000000000014b34 <uart_send>:

static void uart_send ( unsigned int c )
{
   14b34:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   14b38:	910003fd 	mov	x29, sp
   14b3c:	b9001fa0 	str	w0, [x29, #28]
    //int i;
    while(1)
    {
        if(GET32(AUX_MU_LSR_REG)&0x20) break;
   14b40:	528a0a80 	mov	w0, #0x5054                	// #20564
   14b44:	72a7e420 	movk	w0, #0x3f21, lsl #16
   14b48:	97fffff0 	bl	14b08 <GET32>
   14b4c:	121b0000 	and	w0, w0, #0x20
   14b50:	7100001f 	cmp	w0, #0x0
   14b54:	54000041 	b.ne	14b5c <uart_send+0x28>  // b.any
   14b58:	17fffffa 	b	14b40 <uart_send+0xc>
   14b5c:	d503201f 	nop
    }
    //for(i=0;i<0x7FF;i++);
    PUT32(AUX_MU_IO_REG,c);
   14b60:	b9401fa1 	ldr	w1, [x29, #28]
   14b64:	528a0800 	mov	w0, #0x5040                	// #20544
   14b68:	72a7e420 	movk	w0, #0x3f21, lsl #16
   14b6c:	97ffffdd 	bl	14ae0 <PUT32>
}
   14b70:	d503201f 	nop
   14b74:	a8c27bfd 	ldp	x29, x30, [sp], #32
   14b78:	d65f03c0 	ret

0000000000014b7c <uart_init>:

void uart_init ( void )
{
   14b7c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   14b80:	910003fd 	mov	x29, sp
    unsigned int ra;

    PUT32(AUX_ENABLES,1);
   14b84:	52800021 	mov	w1, #0x1                   	// #1
   14b88:	528a0080 	mov	w0, #0x5004                	// #20484
   14b8c:	72a7e420 	movk	w0, #0x3f21, lsl #16
   14b90:	97ffffd4 	bl	14ae0 <PUT32>
    PUT32(AUX_MU_IER_REG,0);
   14b94:	52800001 	mov	w1, #0x0                   	// #0
   14b98:	528a0880 	mov	w0, #0x5044                	// #20548
   14b9c:	72a7e420 	movk	w0, #0x3f21, lsl #16
   14ba0:	97ffffd0 	bl	14ae0 <PUT32>
    PUT32(AUX_MU_CNTL_REG,0);
   14ba4:	52800001 	mov	w1, #0x0                   	// #0
   14ba8:	528a0c00 	mov	w0, #0x5060                	// #20576
   14bac:	72a7e420 	movk	w0, #0x3f21, lsl #16
   14bb0:	97ffffcc 	bl	14ae0 <PUT32>
    PUT32(AUX_MU_LCR_REG,3);
   14bb4:	52800061 	mov	w1, #0x3                   	// #3
   14bb8:	528a0980 	mov	w0, #0x504c                	// #20556
   14bbc:	72a7e420 	movk	w0, #0x3f21, lsl #16
   14bc0:	97ffffc8 	bl	14ae0 <PUT32>
    PUT32(AUX_MU_MCR_REG,0);
   14bc4:	52800001 	mov	w1, #0x0                   	// #0
   14bc8:	528a0a00 	mov	w0, #0x5050                	// #20560
   14bcc:	72a7e420 	movk	w0, #0x3f21, lsl #16
   14bd0:	97ffffc4 	bl	14ae0 <PUT32>
    PUT32(AUX_MU_IER_REG,0);
   14bd4:	52800001 	mov	w1, #0x0                   	// #0
   14bd8:	528a0880 	mov	w0, #0x5044                	// #20548
   14bdc:	72a7e420 	movk	w0, #0x3f21, lsl #16
   14be0:	97ffffc0 	bl	14ae0 <PUT32>
    PUT32(AUX_MU_IIR_REG,0xC6);
   14be4:	528018c1 	mov	w1, #0xc6                  	// #198
   14be8:	528a0900 	mov	w0, #0x5048                	// #20552
   14bec:	72a7e420 	movk	w0, #0x3f21, lsl #16
   14bf0:	97ffffbc 	bl	14ae0 <PUT32>
    PUT32(AUX_MU_BAUD_REG,270);
   14bf4:	528021c1 	mov	w1, #0x10e                 	// #270
   14bf8:	528a0d00 	mov	w0, #0x5068                	// #20584
   14bfc:	72a7e420 	movk	w0, #0x3f21, lsl #16
   14c00:	97ffffb8 	bl	14ae0 <PUT32>
    ra=GET32(GPFSEL1);
   14c04:	52800080 	mov	w0, #0x4                   	// #4
   14c08:	72a7e400 	movk	w0, #0x3f20, lsl #16
   14c0c:	97ffffbf 	bl	14b08 <GET32>
   14c10:	b9001fa0 	str	w0, [x29, #28]
    ra&=~(7<<12); //gpio14
   14c14:	b9401fa0 	ldr	w0, [x29, #28]
   14c18:	12117000 	and	w0, w0, #0xffff8fff
   14c1c:	b9001fa0 	str	w0, [x29, #28]
    ra|=2<<12;    //alt5
   14c20:	b9401fa0 	ldr	w0, [x29, #28]
   14c24:	32130000 	orr	w0, w0, #0x2000
   14c28:	b9001fa0 	str	w0, [x29, #28]
    ra&=~(7<<15); //gpio15
   14c2c:	b9401fa0 	ldr	w0, [x29, #28]
   14c30:	120e7000 	and	w0, w0, #0xfffc7fff
   14c34:	b9001fa0 	str	w0, [x29, #28]
    ra|=2<<15;    //alt5
   14c38:	b9401fa0 	ldr	w0, [x29, #28]
   14c3c:	32100000 	orr	w0, w0, #0x10000
   14c40:	b9001fa0 	str	w0, [x29, #28]
    PUT32(GPFSEL1,ra);
   14c44:	b9401fa1 	ldr	w1, [x29, #28]
   14c48:	52800080 	mov	w0, #0x4                   	// #4
   14c4c:	72a7e400 	movk	w0, #0x3f20, lsl #16
   14c50:	97ffffa4 	bl	14ae0 <PUT32>
    PUT32(GPPUD,0);
   14c54:	52800001 	mov	w1, #0x0                   	// #0
   14c58:	52801280 	mov	w0, #0x94                  	// #148
   14c5c:	72a7e400 	movk	w0, #0x3f20, lsl #16
   14c60:	97ffffa0 	bl	14ae0 <PUT32>
    for(ra=0;ra<150;ra++) dummy(ra);
   14c64:	b9001fbf 	str	wzr, [x29, #28]
   14c68:	14000006 	b	14c80 <uart_init+0x104>
   14c6c:	b9401fa0 	ldr	w0, [x29, #28]
   14c70:	97ffffac 	bl	14b20 <dummy>
   14c74:	b9401fa0 	ldr	w0, [x29, #28]
   14c78:	11000400 	add	w0, w0, #0x1
   14c7c:	b9001fa0 	str	w0, [x29, #28]
   14c80:	b9401fa0 	ldr	w0, [x29, #28]
   14c84:	7102541f 	cmp	w0, #0x95
   14c88:	54ffff29 	b.ls	14c6c <uart_init+0xf0>  // b.plast
    PUT32(GPPUDCLK0,(1<<14)|(1<<15));
   14c8c:	52980001 	mov	w1, #0xc000                	// #49152
   14c90:	52801300 	mov	w0, #0x98                  	// #152
   14c94:	72a7e400 	movk	w0, #0x3f20, lsl #16
   14c98:	97ffff92 	bl	14ae0 <PUT32>
    for(ra=0;ra<150;ra++) dummy(ra);
   14c9c:	b9001fbf 	str	wzr, [x29, #28]
   14ca0:	14000006 	b	14cb8 <uart_init+0x13c>
   14ca4:	b9401fa0 	ldr	w0, [x29, #28]
   14ca8:	97ffff9e 	bl	14b20 <dummy>
   14cac:	b9401fa0 	ldr	w0, [x29, #28]
   14cb0:	11000400 	add	w0, w0, #0x1
   14cb4:	b9001fa0 	str	w0, [x29, #28]
   14cb8:	b9401fa0 	ldr	w0, [x29, #28]
   14cbc:	7102541f 	cmp	w0, #0x95
   14cc0:	54ffff29 	b.ls	14ca4 <uart_init+0x128>  // b.plast
    PUT32(GPPUDCLK0,0);
   14cc4:	52800001 	mov	w1, #0x0                   	// #0
   14cc8:	52801300 	mov	w0, #0x98                  	// #152
   14ccc:	72a7e400 	movk	w0, #0x3f20, lsl #16
   14cd0:	97ffff84 	bl	14ae0 <PUT32>
    PUT32(AUX_MU_CNTL_REG,3);
   14cd4:	52800061 	mov	w1, #0x3                   	// #3
   14cd8:	528a0c00 	mov	w0, #0x5060                	// #20576
   14cdc:	72a7e420 	movk	w0, #0x3f21, lsl #16
   14ce0:	97ffff80 	bl	14ae0 <PUT32>
}
   14ce4:	d503201f 	nop
   14ce8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   14cec:	d65f03c0 	ret

0000000000014cf0 <uart_puts>:

void uart_puts (char* s)
{
   14cf0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   14cf4:	910003fd 	mov	x29, sp
   14cf8:	f9000fa0 	str	x0, [x29, #24]
	while(*s!=0)
   14cfc:	14000007 	b	14d18 <uart_puts+0x28>
    {
    	uart_send((unsigned int)*s);
   14d00:	f9400fa0 	ldr	x0, [x29, #24]
   14d04:	39400000 	ldrb	w0, [x0]
   14d08:	97ffff8b 	bl	14b34 <uart_send>
    	s++;
   14d0c:	f9400fa0 	ldr	x0, [x29, #24]
   14d10:	91000400 	add	x0, x0, #0x1
   14d14:	f9000fa0 	str	x0, [x29, #24]
	while(*s!=0)
   14d18:	f9400fa0 	ldr	x0, [x29, #24]
   14d1c:	39400000 	ldrb	w0, [x0]
   14d20:	7100001f 	cmp	w0, #0x0
   14d24:	54fffee1 	b.ne	14d00 <uart_puts+0x10>  // b.any
    }
	uart_send(0x0D);
   14d28:	528001a0 	mov	w0, #0xd                   	// #13
   14d2c:	97ffff82 	bl	14b34 <uart_send>
	uart_send(0x0A);
   14d30:	52800140 	mov	w0, #0xa                   	// #10
   14d34:	97ffff80 	bl	14b34 <uart_send>
}
   14d38:	d503201f 	nop
   14d3c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   14d40:	d65f03c0 	ret

0000000000014d44 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
size_t allocated = 0;
void *pvPortMalloc( size_t xWantedSize )
{
   14d44:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   14d48:	910003fd 	mov	x29, sp
   14d4c:	f9000fa0 	str	x0, [x29, #24]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   14d50:	f90017bf 	str	xzr, [x29, #40]

	vTaskSuspendAll();
   14d54:	97fff773 	bl	12b20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   14d58:	d0000000 	adrp	x0, 16000 <xHeap+0x1f0>
   14d5c:	91388000 	add	x0, x0, #0xe20
   14d60:	f9400000 	ldr	x0, [x0]
   14d64:	f100001f 	cmp	x0, #0x0
   14d68:	54000041 	b.ne	14d70 <pvPortMalloc+0x2c>  // b.any
		{
			prvHeapInit();
   14d6c:	94000091 	bl	14fb0 <prvHeapInit>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   14d70:	f9400fa0 	ldr	x0, [x29, #24]
   14d74:	f100001f 	cmp	x0, #0x0
   14d78:	540001c0 	b.eq	14db0 <pvPortMalloc+0x6c>  // b.none
		{
			xWantedSize += heapSTRUCT_SIZE;
   14d7c:	52800400 	mov	w0, #0x20                  	// #32
   14d80:	53003c00 	uxth	w0, w0
   14d84:	f9400fa1 	ldr	x1, [x29, #24]
   14d88:	8b000020 	add	x0, x1, x0
   14d8c:	f9000fa0 	str	x0, [x29, #24]

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   14d90:	f9400fa0 	ldr	x0, [x29, #24]
   14d94:	92400c00 	and	x0, x0, #0xf
   14d98:	f100001f 	cmp	x0, #0x0
   14d9c:	540000a0 	b.eq	14db0 <pvPortMalloc+0x6c>  // b.none
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   14da0:	f9400fa0 	ldr	x0, [x29, #24]
   14da4:	927cec00 	and	x0, x0, #0xfffffffffffffff0
   14da8:	91004000 	add	x0, x0, #0x10
   14dac:	f9000fa0 	str	x0, [x29, #24]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   14db0:	f9400fa0 	ldr	x0, [x29, #24]
   14db4:	f100001f 	cmp	x0, #0x0
   14db8:	54000980 	b.eq	14ee8 <pvPortMalloc+0x1a4>  // b.none
   14dbc:	d2820000 	mov	x0, #0x1000                	// #4096
   14dc0:	f9400fa1 	ldr	x1, [x29, #24]
   14dc4:	eb00003f 	cmp	x1, x0
   14dc8:	54000902 	b.cs	14ee8 <pvPortMalloc+0x1a4>  // b.hs, b.nlast
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
   14dcc:	d0000000 	adrp	x0, 16000 <xHeap+0x1f0>
   14dd0:	91384000 	add	x0, x0, #0xe10
   14dd4:	f9001ba0 	str	x0, [x29, #48]
			pxBlock = xStart.pxNextFreeBlock;
   14dd8:	d0000000 	adrp	x0, 16000 <xHeap+0x1f0>
   14ddc:	91384000 	add	x0, x0, #0xe10
   14de0:	f9400000 	ldr	x0, [x0]
   14de4:	f9001fa0 	str	x0, [x29, #56]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   14de8:	14000006 	b	14e00 <pvPortMalloc+0xbc>
			{
				pxPreviousBlock = pxBlock;
   14dec:	f9401fa0 	ldr	x0, [x29, #56]
   14df0:	f9001ba0 	str	x0, [x29, #48]
				pxBlock = pxBlock->pxNextFreeBlock;
   14df4:	f9401fa0 	ldr	x0, [x29, #56]
   14df8:	f9400000 	ldr	x0, [x0]
   14dfc:	f9001fa0 	str	x0, [x29, #56]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   14e00:	f9401fa0 	ldr	x0, [x29, #56]
   14e04:	f9400401 	ldr	x1, [x0, #8]
   14e08:	f9400fa0 	ldr	x0, [x29, #24]
   14e0c:	eb00003f 	cmp	x1, x0
   14e10:	540000a2 	b.cs	14e24 <pvPortMalloc+0xe0>  // b.hs, b.nlast
   14e14:	f9401fa0 	ldr	x0, [x29, #56]
   14e18:	f9400000 	ldr	x0, [x0]
   14e1c:	f100001f 	cmp	x0, #0x0
   14e20:	54fffe61 	b.ne	14dec <pvPortMalloc+0xa8>  // b.any
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   14e24:	d0000000 	adrp	x0, 16000 <xHeap+0x1f0>
   14e28:	91388000 	add	x0, x0, #0xe20
   14e2c:	f9400000 	ldr	x0, [x0]
   14e30:	f9401fa1 	ldr	x1, [x29, #56]
   14e34:	eb00003f 	cmp	x1, x0
   14e38:	54000580 	b.eq	14ee8 <pvPortMalloc+0x1a4>  // b.none
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   14e3c:	f9401ba0 	ldr	x0, [x29, #48]
   14e40:	f9400001 	ldr	x1, [x0]
   14e44:	52800400 	mov	w0, #0x20                  	// #32
   14e48:	53003c00 	uxth	w0, w0
   14e4c:	8b000020 	add	x0, x1, x0
   14e50:	f90017a0 	str	x0, [x29, #40]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   14e54:	f9401fa0 	ldr	x0, [x29, #56]
   14e58:	f9400001 	ldr	x1, [x0]
   14e5c:	f9401ba0 	ldr	x0, [x29, #48]
   14e60:	f9000001 	str	x1, [x0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   14e64:	f9401fa0 	ldr	x0, [x29, #56]
   14e68:	f9400401 	ldr	x1, [x0, #8]
   14e6c:	f9400fa0 	ldr	x0, [x29, #24]
   14e70:	cb000021 	sub	x1, x1, x0
   14e74:	52800400 	mov	w0, #0x20                  	// #32
   14e78:	531f7800 	lsl	w0, w0, #1
   14e7c:	93407c00 	sxtw	x0, w0
   14e80:	eb00003f 	cmp	x1, x0
   14e84:	54000209 	b.ls	14ec4 <pvPortMalloc+0x180>  // b.plast
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   14e88:	f9401fa1 	ldr	x1, [x29, #56]
   14e8c:	f9400fa0 	ldr	x0, [x29, #24]
   14e90:	8b000020 	add	x0, x1, x0
   14e94:	f90013a0 	str	x0, [x29, #32]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   14e98:	f9401fa0 	ldr	x0, [x29, #56]
   14e9c:	f9400401 	ldr	x1, [x0, #8]
   14ea0:	f9400fa0 	ldr	x0, [x29, #24]
   14ea4:	cb000021 	sub	x1, x1, x0
   14ea8:	f94013a0 	ldr	x0, [x29, #32]
   14eac:	f9000401 	str	x1, [x0, #8]
					pxBlock->xBlockSize = xWantedSize;
   14eb0:	f9401fa0 	ldr	x0, [x29, #56]
   14eb4:	f9400fa1 	ldr	x1, [x29, #24]
   14eb8:	f9000401 	str	x1, [x0, #8]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   14ebc:	f94013a0 	ldr	x0, [x29, #32]
   14ec0:	94000076 	bl	15098 <prvInsertBlockIntoFreeList>
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   14ec4:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14ec8:	91178000 	add	x0, x0, #0x5e0
   14ecc:	f9400001 	ldr	x1, [x0]
   14ed0:	f9401fa0 	ldr	x0, [x29, #56]
   14ed4:	f9400400 	ldr	x0, [x0, #8]
   14ed8:	cb000021 	sub	x1, x1, x0
   14edc:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14ee0:	91178000 	add	x0, x0, #0x5e0
   14ee4:	f9000001 	str	x1, [x0]
			}
		}
	}
	xTaskResumeAll();
   14ee8:	97fff717 	bl	12b44 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif
	
	allocated += xWantedSize;
   14eec:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14ef0:	91382000 	add	x0, x0, #0xe08
   14ef4:	f9400001 	ldr	x1, [x0]
   14ef8:	f9400fa0 	ldr	x0, [x29, #24]
   14efc:	8b000021 	add	x1, x1, x0
   14f00:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14f04:	91382000 	add	x0, x0, #0xe08
   14f08:	f9000001 	str	x1, [x0]

	return pvReturn;
   14f0c:	f94017a0 	ldr	x0, [x29, #40]
}
   14f10:	a8c47bfd 	ldp	x29, x30, [sp], #64
   14f14:	d65f03c0 	ret

0000000000014f18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   14f18:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   14f1c:	910003fd 	mov	x29, sp
   14f20:	f9000fa0 	str	x0, [x29, #24]
unsigned char *puc = ( unsigned char * ) pv;
   14f24:	f9400fa0 	ldr	x0, [x29, #24]
   14f28:	f90017a0 	str	x0, [x29, #40]
xBlockLink *pxLink;

	if( pv != NULL )
   14f2c:	f9400fa0 	ldr	x0, [x29, #24]
   14f30:	f100001f 	cmp	x0, #0x0
   14f34:	540002c0 	b.eq	14f8c <vPortFree+0x74>  // b.none
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
   14f38:	52800400 	mov	w0, #0x20                  	// #32
   14f3c:	53003c00 	uxth	w0, w0
   14f40:	cb0003e0 	neg	x0, x0
   14f44:	f94017a1 	ldr	x1, [x29, #40]
   14f48:	8b000020 	add	x0, x1, x0
   14f4c:	f90017a0 	str	x0, [x29, #40]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   14f50:	f94017a0 	ldr	x0, [x29, #40]
   14f54:	f90013a0 	str	x0, [x29, #32]

		vTaskSuspendAll();
   14f58:	97fff6f2 	bl	12b20 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   14f5c:	f94013a0 	ldr	x0, [x29, #32]
   14f60:	f9400401 	ldr	x1, [x0, #8]
   14f64:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14f68:	91178000 	add	x0, x0, #0x5e0
   14f6c:	f9400000 	ldr	x0, [x0]
   14f70:	8b000021 	add	x1, x1, x0
   14f74:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14f78:	91178000 	add	x0, x0, #0x5e0
   14f7c:	f9000001 	str	x1, [x0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   14f80:	f94013a0 	ldr	x0, [x29, #32]
   14f84:	94000045 	bl	15098 <prvInsertBlockIntoFreeList>
		}
		xTaskResumeAll();
   14f88:	97fff6ef 	bl	12b44 <xTaskResumeAll>
	}
}
   14f8c:	d503201f 	nop
   14f90:	a8c37bfd 	ldp	x29, x30, [sp], #48
   14f94:	d65f03c0 	ret

0000000000014f98 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
   14f98:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14f9c:	91178000 	add	x0, x0, #0x5e0
   14fa0:	f9400000 	ldr	x0, [x0]
}
   14fa4:	d65f03c0 	ret

0000000000014fa8 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* This just exists to keep the linker quiet. */
}
   14fa8:	d503201f 	nop
   14fac:	d65f03c0 	ret

0000000000014fb0 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   14fb0:	d10043ff 	sub	sp, sp, #0x10
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   14fb4:	d0000000 	adrp	x0, 16000 <xHeap+0x1f0>
   14fb8:	91384000 	add	x0, x0, #0xe10
   14fbc:	b0000001 	adrp	x1, 15000 <prvHeapInit+0x50>
   14fc0:	91384021 	add	x1, x1, #0xe10
   14fc4:	f9000001 	str	x1, [x0]
	xStart.xBlockSize = ( size_t ) 0;
   14fc8:	d0000000 	adrp	x0, 16000 <xHeap+0x1f0>
   14fcc:	91384000 	add	x0, x0, #0xe10
   14fd0:	f900041f 	str	xzr, [x0, #8]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
   14fd4:	d2820001 	mov	x1, #0x1000                	// #4096
   14fd8:	b0000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   14fdc:	91384000 	add	x0, x0, #0xe10
   14fe0:	8b000020 	add	x0, x1, x0
   14fe4:	f90007e0 	str	x0, [sp, #8]
	pucHeapEnd -= heapSTRUCT_SIZE;
   14fe8:	52800400 	mov	w0, #0x20                  	// #32
   14fec:	53003c00 	uxth	w0, w0
   14ff0:	cb0003e0 	neg	x0, x0
   14ff4:	f94007e1 	ldr	x1, [sp, #8]
   14ff8:	8b000020 	add	x0, x1, x0
   14ffc:	f90007e0 	str	x0, [sp, #8]
	pxEnd = ( void * ) pucHeapEnd;
   15000:	b0000000 	adrp	x0, 16000 <xHeap+0x1f0>
   15004:	91388000 	add	x0, x0, #0xe20
   15008:	f94007e1 	ldr	x1, [sp, #8]
   1500c:	f9000001 	str	x1, [x0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   15010:	b0000000 	adrp	x0, 16000 <xHeap+0x1f0>
   15014:	91388000 	add	x0, x0, #0xe20
   15018:	f9400000 	ldr	x0, [x0]
   1501c:	f900041f 	str	xzr, [x0, #8]
	pxEnd->pxNextFreeBlock = NULL;
   15020:	b0000000 	adrp	x0, 16000 <xHeap+0x1f0>
   15024:	91388000 	add	x0, x0, #0xe20
   15028:	f9400000 	ldr	x0, [x0]
   1502c:	f900001f 	str	xzr, [x0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
   15030:	90000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   15034:	91384000 	add	x0, x0, #0xe10
   15038:	f90003e0 	str	x0, [sp]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   1503c:	d2820001 	mov	x1, #0x1000                	// #4096
   15040:	52800400 	mov	w0, #0x20                  	// #32
   15044:	53003c00 	uxth	w0, w0
   15048:	cb000021 	sub	x1, x1, x0
   1504c:	f94003e0 	ldr	x0, [sp]
   15050:	f9000401 	str	x1, [x0, #8]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   15054:	b0000000 	adrp	x0, 16000 <xHeap+0x1f0>
   15058:	91388000 	add	x0, x0, #0xe20
   1505c:	f9400001 	ldr	x1, [x0]
   15060:	f94003e0 	ldr	x0, [sp]
   15064:	f9000001 	str	x1, [x0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   15068:	90000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   1506c:	91178000 	add	x0, x0, #0x5e0
   15070:	f9400001 	ldr	x1, [x0]
   15074:	52800400 	mov	w0, #0x20                  	// #32
   15078:	53003c00 	uxth	w0, w0
   1507c:	cb000021 	sub	x1, x1, x0
   15080:	90000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   15084:	91178000 	add	x0, x0, #0x5e0
   15088:	f9000001 	str	x1, [x0]
}
   1508c:	d503201f 	nop
   15090:	910043ff 	add	sp, sp, #0x10
   15094:	d65f03c0 	ret

0000000000015098 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   15098:	d10083ff 	sub	sp, sp, #0x20
   1509c:	f90007e0 	str	x0, [sp, #8]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   150a0:	b0000000 	adrp	x0, 16000 <xHeap+0x1f0>
   150a4:	91384000 	add	x0, x0, #0xe10
   150a8:	f9000fe0 	str	x0, [sp, #24]
   150ac:	14000004 	b	150bc <prvInsertBlockIntoFreeList+0x24>
   150b0:	f9400fe0 	ldr	x0, [sp, #24]
   150b4:	f9400000 	ldr	x0, [x0]
   150b8:	f9000fe0 	str	x0, [sp, #24]
   150bc:	f9400fe0 	ldr	x0, [sp, #24]
   150c0:	f9400001 	ldr	x1, [x0]
   150c4:	f94007e0 	ldr	x0, [sp, #8]
   150c8:	eb00003f 	cmp	x1, x0
   150cc:	54ffff23 	b.cc	150b0 <prvInsertBlockIntoFreeList+0x18>  // b.lo, b.ul, b.last
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
   150d0:	f9400fe0 	ldr	x0, [sp, #24]
   150d4:	f9000be0 	str	x0, [sp, #16]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   150d8:	f9400fe0 	ldr	x0, [sp, #24]
   150dc:	f9400400 	ldr	x0, [x0, #8]
   150e0:	f9400be1 	ldr	x1, [sp, #16]
   150e4:	8b000021 	add	x1, x1, x0
   150e8:	f94007e0 	ldr	x0, [sp, #8]
   150ec:	eb00003f 	cmp	x1, x0
   150f0:	54000141 	b.ne	15118 <prvInsertBlockIntoFreeList+0x80>  // b.any
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   150f4:	f9400fe0 	ldr	x0, [sp, #24]
   150f8:	f9400401 	ldr	x1, [x0, #8]
   150fc:	f94007e0 	ldr	x0, [sp, #8]
   15100:	f9400400 	ldr	x0, [x0, #8]
   15104:	8b000021 	add	x1, x1, x0
   15108:	f9400fe0 	ldr	x0, [sp, #24]
   1510c:	f9000401 	str	x1, [x0, #8]
		pxBlockToInsert = pxIterator;
   15110:	f9400fe0 	ldr	x0, [sp, #24]
   15114:	f90007e0 	str	x0, [sp, #8]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
   15118:	f94007e0 	ldr	x0, [sp, #8]
   1511c:	f9000be0 	str	x0, [sp, #16]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   15120:	f94007e0 	ldr	x0, [sp, #8]
   15124:	f9400400 	ldr	x0, [x0, #8]
   15128:	f9400be1 	ldr	x1, [sp, #16]
   1512c:	8b000021 	add	x1, x1, x0
   15130:	f9400fe0 	ldr	x0, [sp, #24]
   15134:	f9400000 	ldr	x0, [x0]
   15138:	eb00003f 	cmp	x1, x0
   1513c:	54000381 	b.ne	151ac <prvInsertBlockIntoFreeList+0x114>  // b.any
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   15140:	f9400fe0 	ldr	x0, [sp, #24]
   15144:	f9400001 	ldr	x1, [x0]
   15148:	b0000000 	adrp	x0, 16000 <xHeap+0x1f0>
   1514c:	91388000 	add	x0, x0, #0xe20
   15150:	f9400000 	ldr	x0, [x0]
   15154:	eb00003f 	cmp	x1, x0
   15158:	540001e0 	b.eq	15194 <prvInsertBlockIntoFreeList+0xfc>  // b.none
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   1515c:	f94007e0 	ldr	x0, [sp, #8]
   15160:	f9400401 	ldr	x1, [x0, #8]
   15164:	f9400fe0 	ldr	x0, [sp, #24]
   15168:	f9400000 	ldr	x0, [x0]
   1516c:	f9400400 	ldr	x0, [x0, #8]
   15170:	8b000021 	add	x1, x1, x0
   15174:	f94007e0 	ldr	x0, [sp, #8]
   15178:	f9000401 	str	x1, [x0, #8]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   1517c:	f9400fe0 	ldr	x0, [sp, #24]
   15180:	f9400000 	ldr	x0, [x0]
   15184:	f9400001 	ldr	x1, [x0]
   15188:	f94007e0 	ldr	x0, [sp, #8]
   1518c:	f9000001 	str	x1, [x0]
   15190:	1400000b 	b	151bc <prvInsertBlockIntoFreeList+0x124>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   15194:	b0000000 	adrp	x0, 16000 <xHeap+0x1f0>
   15198:	91388000 	add	x0, x0, #0xe20
   1519c:	f9400001 	ldr	x1, [x0]
   151a0:	f94007e0 	ldr	x0, [sp, #8]
   151a4:	f9000001 	str	x1, [x0]
   151a8:	14000005 	b	151bc <prvInsertBlockIntoFreeList+0x124>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   151ac:	f9400fe0 	ldr	x0, [sp, #24]
   151b0:	f9400001 	ldr	x1, [x0]
   151b4:	f94007e0 	ldr	x0, [sp, #8]
   151b8:	f9000001 	str	x1, [x0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   151bc:	f9400fe1 	ldr	x1, [sp, #24]
   151c0:	f94007e0 	ldr	x0, [sp, #8]
   151c4:	eb00003f 	cmp	x1, x0
   151c8:	54000080 	b.eq	151d8 <prvInsertBlockIntoFreeList+0x140>  // b.none
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   151cc:	f9400fe0 	ldr	x0, [sp, #24]
   151d0:	f94007e1 	ldr	x1, [sp, #8]
   151d4:	f9000001 	str	x1, [x0]
	}
}
   151d8:	d503201f 	nop
   151dc:	910083ff 	add	sp, sp, #0x20
   151e0:	d65f03c0 	ret

00000000000151e4 <vSetupTickInterrupt>:

static volatile BCM2835_TIMER_REGS * const pRegs = (BCM2835_TIMER_REGS *) (portTIMER_BASE);

void vTickISR (unsigned int nIRQ, void *pParam);

vSetupTickInterrupt(){
   151e4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   151e8:	910003fd 	mov	x29, sp
	// TODO: Configure the timer
	unsigned long ulCompareMatch;
	

	/* Calculate the match value required for our wanted tick rate. */
	ulCompareMatch = 1000000 / configTICK_RATE_HZ;
   151ec:	d2807d00 	mov	x0, #0x3e8                 	// #1000
   151f0:	f9000fa0 	str	x0, [x29, #24]
	{
		ulCompareMatch /= ( portPRESCALE_VALUE + 1 );
	}
	#endif

	irqBlock();
   151f4:	97fffc47 	bl	14310 <irqBlock>

	pRegs->CTL = 0x003E0000;
   151f8:	d2968000 	mov	x0, #0xb400                	// #46080
   151fc:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   15200:	d2a007c1 	mov	x1, #0x3e0000              	// #4063232
   15204:	f9000801 	str	x1, [x0, #16]
	pRegs->LOD = 1000 - 1;
   15208:	d2968000 	mov	x0, #0xb400                	// #46080
   1520c:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   15210:	d2807ce1 	mov	x1, #0x3e7                 	// #999
   15214:	f9000001 	str	x1, [x0]
	pRegs->RLD = 1000 - 1;
   15218:	d2968000 	mov	x0, #0xb400                	// #46080
   1521c:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   15220:	d2807ce1 	mov	x1, #0x3e7                 	// #999
   15224:	f9001801 	str	x1, [x0, #48]
	pRegs->DIV = portTIMER_PRESCALE;
   15228:	d2968000 	mov	x0, #0xb400                	// #46080
   1522c:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   15230:	d2801f21 	mov	x1, #0xf9                  	// #249
   15234:	f9001c01 	str	x1, [x0, #56]
	pRegs->CLI = 0;
   15238:	d2968000 	mov	x0, #0xb400                	// #46080
   1523c:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   15240:	f9000c1f 	str	xzr, [x0, #24]
	pRegs->CTL = 0x003E00A2;
   15244:	d2968000 	mov	x0, #0xb400                	// #46080
   15248:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   1524c:	d2801441 	mov	x1, #0xa2                  	// #162
   15250:	f2a007c1 	movk	x1, #0x3e, lsl #16
   15254:	f9000801 	str	x1, [x0, #16]

	irqRegister(64, vTickISR, NULL);
   15258:	90000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   1525c:	910a9000 	add	x0, x0, #0x2a4
   15260:	d2800002 	mov	x2, #0x0                   	// #0
   15264:	aa0003e1 	mov	x1, x0
   15268:	52800800 	mov	w0, #0x40                  	// #64
   1526c:	97fffc2c 	bl	1431c <irqRegister>

	irqEnable(64);
   15270:	52800800 	mov	w0, #0x40                  	// #64
   15274:	97fffc45 	bl	14388 <irqEnable>

	irqUnblock();
   15278:	97fffc23 	bl	14304 <irqUnblock>
}
   1527c:	d503201f 	nop
   15280:	a8c27bfd 	ldp	x29, x30, [sp], #32
   15284:	d65f03c0 	ret

0000000000015288 <vApplicationIRQHandler>:
vApplicationIRQHandler( uint32_t ulICCIAR ){	
   15288:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   1528c:	910003fd 	mov	x29, sp
   15290:	b9001fa0 	str	w0, [x29, #28]
	// TODO: Configure the IRQHandler
	irqHandler();
   15294:	97fffbf0 	bl	14254 <irqHandler>
}
   15298:	d503201f 	nop
   1529c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   152a0:	d65f03c0 	ret

00000000000152a4 <vTickISR>:




void vTickISR (unsigned int nIRQ, void *pParam)
{
   152a4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   152a8:	910003fd 	mov	x29, sp
   152ac:	b9001fa0 	str	w0, [x29, #28]
   152b0:	f9000ba1 	str	x1, [x29, #16]
	xTaskIncrementTick();
   152b4:	97fff6bc 	bl	12da4 <xTaskIncrementTick>

	#if configUSE_PREEMPTION == 1
	vTaskSwitchContext();
   152b8:	97fff7a5 	bl	1314c <vTaskSwitchContext>
	#endif

	pRegs->CLI = 0;			// Acknowledge the timer interrupt.
   152bc:	d2968000 	mov	x0, #0xb400                	// #46080
   152c0:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   152c4:	f9000c1f 	str	xzr, [x0, #24]
}
   152c8:	d503201f 	nop
   152cc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   152d0:	d65f03c0 	ret

00000000000152d4 <task1>:

#include "Drivers/irq.h"
#include "Drivers/gpio.h"
#include "Drivers/uart.h"

void task1(void *pParam) {
   152d4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   152d8:	910003fd 	mov	x29, sp
   152dc:	f9000fa0 	str	x0, [x29, #24]

	while(1) {
		uart_puts("task 1");
   152e0:	90000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   152e4:	9113e000 	add	x0, x0, #0x4f8
   152e8:	97fffe82 	bl	14cf0 <uart_puts>
		vTaskDelay(200);
   152ec:	d2801900 	mov	x0, #0xc8                  	// #200
   152f0:	97fff413 	bl	1233c <vTaskDelay>
		uart_puts("task 1");
   152f4:	17fffffb 	b	152e0 <task1+0xc>

00000000000152f8 <task2>:
	}
}

void task2(void *pParam) {
   152f8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   152fc:	910003fd 	mov	x29, sp
   15300:	f9000fa0 	str	x0, [x29, #24]

	while(1) {
		vTaskDelay(100);
   15304:	d2800c80 	mov	x0, #0x64                  	// #100
   15308:	97fff40d 	bl	1233c <vTaskDelay>
		uart_puts("task 2");
   1530c:	90000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   15310:	91140000 	add	x0, x0, #0x500
   15314:	97fffe77 	bl	14cf0 <uart_puts>
		vTaskDelay(100);
   15318:	d2800c80 	mov	x0, #0x64                  	// #100
   1531c:	97fff408 	bl	1233c <vTaskDelay>
		vTaskDelay(100);
   15320:	17fffff9 	b	15304 <task2+0xc>

0000000000015324 <main>:
 *
 *	-- Absolutely nothing wrong with this being called main(), just it doesn't have
 *	-- the same prototype as you'd see in a linux program.
 **/
void main (void)
{
   15324:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   15328:	910003fd 	mov	x29, sp
	uart_init();
   1532c:	97fffe14 	bl	14b7c <uart_init>

	xTaskCreate(task1, "LED_0", 128, NULL, 0, NULL);
   15330:	90000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   15334:	91142001 	add	x1, x0, #0x508
   15338:	90000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   1533c:	910b5000 	add	x0, x0, #0x2d4
   15340:	d2800005 	mov	x5, #0x0                   	// #0
   15344:	d2800004 	mov	x4, #0x0                   	// #0
   15348:	d2800003 	mov	x3, #0x0                   	// #0
   1534c:	52801002 	mov	w2, #0x80                  	// #128
   15350:	97fff264 	bl	11ce0 <xTaskCreate>
	xTaskCreate(task2, "LED_1", 128, NULL, 0, NULL);
   15354:	90000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   15358:	91144001 	add	x1, x0, #0x510
   1535c:	90000000 	adrp	x0, 15000 <prvHeapInit+0x50>
   15360:	910be000 	add	x0, x0, #0x2f8
   15364:	d2800005 	mov	x5, #0x0                   	// #0
   15368:	d2800004 	mov	x4, #0x0                   	// #0
   1536c:	d2800003 	mov	x3, #0x0                   	// #0
   15370:	52801002 	mov	w2, #0x80                  	// #128
   15374:	97fff25b 	bl	11ce0 <xTaskCreate>

	vTaskStartScheduler();
   15378:	97fff5bb 	bl	12a64 <vTaskStartScheduler>

	/*
	 *	We should never get here, but just in case something goes wrong,
	 *	we'll place the CPU into a safe loop.
	 */
	while(1) {
   1537c:	14000000 	b	1537c <main+0x58>

Déassemblage de la section .plt :

0000000000015380 <.plt>:
   15380:	a9bf7bf0 	stp	x16, x30, [sp, #-16]!
   15384:	90000010 	adrp	x16, 15000 <prvHeapInit+0x50>
   15388:	f943a211 	ldr	x17, [x16, #1856]
   1538c:	911d0210 	add	x16, x16, #0x740
   15390:	d61f0220 	br	x17
   15394:	d503201f 	nop
   15398:	d503201f 	nop
   1539c:	d503201f 	nop
   153a0:	90000010 	adrp	x16, 15000 <prvHeapInit+0x50>
   153a4:	f943a611 	ldr	x17, [x16, #1864]
   153a8:	911d2210 	add	x16, x16, #0x748
   153ac:	d61f0220 	br	x17

Déassemblage de la section .boot :

00000000000153b0 <_boot>:
   153b0:	d2800000 	mov	x0, #0x0                   	// #0
   153b4:	d2800001 	mov	x1, #0x0                   	// #0
   153b8:	d2800002 	mov	x2, #0x0                   	// #0
   153bc:	d2800003 	mov	x3, #0x0                   	// #0
   153c0:	d2800004 	mov	x4, #0x0                   	// #0
   153c4:	d2800005 	mov	x5, #0x0                   	// #0
   153c8:	d2800006 	mov	x6, #0x0                   	// #0
   153cc:	d2800007 	mov	x7, #0x0                   	// #0
   153d0:	d2800008 	mov	x8, #0x0                   	// #0
   153d4:	d2800009 	mov	x9, #0x0                   	// #0
   153d8:	d280000a 	mov	x10, #0x0                   	// #0
   153dc:	d280000b 	mov	x11, #0x0                   	// #0
   153e0:	d280000c 	mov	x12, #0x0                   	// #0
   153e4:	d280000d 	mov	x13, #0x0                   	// #0
   153e8:	d280000e 	mov	x14, #0x0                   	// #0
   153ec:	d280000f 	mov	x15, #0x0                   	// #0
   153f0:	d2800010 	mov	x16, #0x0                   	// #0
   153f4:	d2800011 	mov	x17, #0x0                   	// #0
   153f8:	d2800012 	mov	x18, #0x0                   	// #0
   153fc:	d2800013 	mov	x19, #0x0                   	// #0
   15400:	d2800014 	mov	x20, #0x0                   	// #0
   15404:	d2800015 	mov	x21, #0x0                   	// #0
   15408:	d2800016 	mov	x22, #0x0                   	// #0
   1540c:	d2800017 	mov	x23, #0x0                   	// #0
   15410:	d2800018 	mov	x24, #0x0                   	// #0
   15414:	d2800019 	mov	x25, #0x0                   	// #0
   15418:	d280001a 	mov	x26, #0x0                   	// #0
   1541c:	d280001b 	mov	x27, #0x0                   	// #0
   15420:	d280001c 	mov	x28, #0x0                   	// #0
   15424:	d280001d 	mov	x29, #0x0                   	// #0
   15428:	d280001e 	mov	x30, #0x0                   	// #0
   1542c:	94000002 	bl	15434 <_startmain>

0000000000015430 <loop>:
   15430:	14000000 	b	15430 <loop>

0000000000015434 <_startmain>:
   15434:	17ffffbc 	b	15324 <main>

Déassemblage de la section .rodata :

0000000000015438 <ullICCEOIR>:
   15438:	3f001010 	.word	0x3f001010
   1543c:	00000000 	.word	0x00000000

0000000000015440 <ullICCIAR>:
   15440:	3f00100c 	.word	0x3f00100c
   15444:	00000000 	.word	0x00000000

0000000000015448 <ullICCPMR>:
   15448:	3f001004 	.word	0x3f001004
   1544c:	00000000 	.word	0x00000000

0000000000015450 <ullMaxAPIPriorityMask>:
   15450:	00000088 	.word	0x00000088
   15454:	00000000 	.word	0x00000000
   15458:	454c4449 	.word	0x454c4449
   1545c:	00000000 	.word	0x00000000
   15460:	0000001a 	.word	0x0000001a
   15464:	00000000 	.word	0x00000000
   15468:	00000007 	.word	0x00000007
   1546c:	0000000d 	.word	0x0000000d
   15470:	00000011 	.word	0x00000011
   15474:	0000001a 	.word	0x0000001a
   15478:	00000000 	.word	0x00000000
   1547c:	00000007 	.word	0x00000007
   15480:	0000000d 	.word	0x0000000d
   15484:	00000011 	.word	0x00000011

0000000000015488 <pRegs>:
   15488:	3f00b200 	.word	0x3f00b200
   1548c:	00000000 	.word	0x00000000

0000000000015490 <pRegs>:
   15490:	20200000 	.word	0x20200000
   15494:	00000000 	.word	0x00000000
   15498:	0000004e 	.word	0x0000004e
   1549c:	00000000 	.word	0x00000000
   154a0:	0000000f 	.word	0x0000000f
   154a4:	0000001a 	.word	0x0000001a
   154a8:	00000029 	.word	0x00000029
   154ac:	00000034 	.word	0x00000034
   154b0:	00000043 	.word	0x00000043
   154b4:	0000004e 	.word	0x0000004e
   154b8:	00000000 	.word	0x00000000
   154bc:	0000000f 	.word	0x0000000f
   154c0:	0000001a 	.word	0x0000001a
   154c4:	00000029 	.word	0x00000029
   154c8:	00000034 	.word	0x00000034
   154cc:	00000043 	.word	0x00000043

00000000000154d0 <intcRegs>:
   154d0:	3f00b200 	.word	0x3f00b200
   154d4:	00000000 	.word	0x00000000

00000000000154d8 <timerRegs>:
   154d8:	3f00b400 	.word	0x3f00b400
   154dc:	00000000 	.word	0x00000000

00000000000154e0 <heapSTRUCT_SIZE>:
   154e0:	00000020 	.word	0x00000020
   154e4:	00000000 	.word	0x00000000

00000000000154e8 <xTotalHeapSize>:
   154e8:	00001000 	.word	0x00001000
   154ec:	00000000 	.word	0x00000000

00000000000154f0 <pRegs>:
   154f0:	3f00b400 	.word	0x3f00b400
   154f4:	00000000 	.word	0x00000000
   154f8:	6b736174 	.word	0x6b736174
   154fc:	00003120 	.word	0x00003120
   15500:	6b736174 	.word	0x6b736174
   15504:	00003220 	.word	0x00003220
   15508:	5f44454c 	.word	0x5f44454c
   1550c:	00000030 	.word	0x00000030
   15510:	5f44454c 	.word	0x5f44454c
   15514:	Adresse 0x0000000000015514 hors intervalle.


Déassemblage de la section .interp :

0000000000015516 <.interp>:
   15516:	6c2f      	.short	0x6c2f
   15518:	6c2f6269 	.word	0x6c2f6269
   1551c:	696c2d64 	.word	0x696c2d64
   15520:	2d78756e 	.word	0x2d78756e
   15524:	63726161 	.word	0x63726161
   15528:	2e343668 	.word	0x2e343668
   1552c:	312e6f73 	.word	0x312e6f73
	...

Déassemblage de la section .gnu.version :

0000000000015532 <.gnu.version>:
   15532:	0000      	.short	0x0000
   15534:	Adresse 0x0000000000015534 hors intervalle.


Déassemblage de la section .gnu.version_r :

0000000000015538 <.gnu.version_r>:
   15538:	00010001 	.word	0x00010001
   1553c:	00000001 	.word	0x00000001
   15540:	00000010 	.word	0x00000010
   15544:	00000000 	.word	0x00000000
   15548:	06969197 	.word	0x06969197
   1554c:	00020000 	.word	0x00020000
   15550:	00000012 	.word	0x00000012
   15554:	00000000 	.word	0x00000000

Déassemblage de la section .dynsym :

0000000000015558 <.dynsym>:
	...
   15570:	0000000b 	.word	0x0000000b
   15574:	00000012 	.word	0x00000012
	...

Déassemblage de la section .dynstr :

0000000000015588 <.dynstr>:
   15588:	62696c00 	.word	0x62696c00
   1558c:	6f732e63 	.word	0x6f732e63
   15590:	6d00362e 	.word	0x6d00362e
   15594:	70636d65 	.word	0x70636d65
   15598:	4c470079 	.word	0x4c470079
   1559c:	5f434249 	.word	0x5f434249
   155a0:	37312e32 	.word	0x37312e32
	...

Déassemblage de la section .hash :

00000000000155a8 <.hash>:
   155a8:	00000001 	.word	0x00000001
   155ac:	00000002 	.word	0x00000002
   155b0:	00000001 	.word	0x00000001
	...

Déassemblage de la section .rela.dyn :

00000000000155c0 <.rela.dyn>:
   155c0:	00015748 	.word	0x00015748
   155c4:	00000000 	.word	0x00000000
   155c8:	00000402 	.word	0x00000402
   155cc:	00000001 	.word	0x00000001
	...

Déassemblage de la section .data :

00000000000155d8 <ullCriticalNesting>:
   155d8:	0000270f 	.word	0x0000270f
   155dc:	00000000 	.word	0x00000000

00000000000155e0 <xFreeBytesRemaining>:
   155e0:	00001000 	.word	0x00001000
   155e4:	00000000 	.word	0x00000000

Déassemblage de la section .dynamic :

00000000000155e8 <_DYNAMIC>:
   155e8:	00000001 	.word	0x00000001
   155ec:	00000000 	.word	0x00000000
   155f0:	00000001 	.word	0x00000001
   155f4:	00000000 	.word	0x00000000
   155f8:	00000004 	.word	0x00000004
   155fc:	00000000 	.word	0x00000000
   15600:	000155a8 	.word	0x000155a8
   15604:	00000000 	.word	0x00000000
   15608:	00000005 	.word	0x00000005
   1560c:	00000000 	.word	0x00000000
   15610:	00015588 	.word	0x00015588
   15614:	00000000 	.word	0x00000000
   15618:	00000006 	.word	0x00000006
   1561c:	00000000 	.word	0x00000000
   15620:	00015558 	.word	0x00015558
   15624:	00000000 	.word	0x00000000
   15628:	0000000a 	.word	0x0000000a
   1562c:	00000000 	.word	0x00000000
   15630:	0000001d 	.word	0x0000001d
   15634:	00000000 	.word	0x00000000
   15638:	0000000b 	.word	0x0000000b
   1563c:	00000000 	.word	0x00000000
   15640:	00000018 	.word	0x00000018
   15644:	00000000 	.word	0x00000000
   15648:	00000015 	.word	0x00000015
	...
   15658:	00000003 	.word	0x00000003
   1565c:	00000000 	.word	0x00000000
   15660:	00015730 	.word	0x00015730
   15664:	00000000 	.word	0x00000000
   15668:	00000002 	.word	0x00000002
   1566c:	00000000 	.word	0x00000000
   15670:	00000018 	.word	0x00000018
   15674:	00000000 	.word	0x00000000
   15678:	00000014 	.word	0x00000014
   1567c:	00000000 	.word	0x00000000
   15680:	00000007 	.word	0x00000007
   15684:	00000000 	.word	0x00000000
   15688:	00000017 	.word	0x00000017
   1568c:	00000000 	.word	0x00000000
   15690:	000155c0 	.word	0x000155c0
   15694:	00000000 	.word	0x00000000
   15698:	6ffffffe 	.word	0x6ffffffe
   1569c:	00000000 	.word	0x00000000
   156a0:	00015538 	.word	0x00015538
   156a4:	00000000 	.word	0x00000000
   156a8:	6fffffff 	.word	0x6fffffff
   156ac:	00000000 	.word	0x00000000
   156b0:	00000001 	.word	0x00000001
   156b4:	00000000 	.word	0x00000000
   156b8:	6ffffff0 	.word	0x6ffffff0
   156bc:	00000000 	.word	0x00000000
   156c0:	00015532 	.word	0x00015532
	...

Déassemblage de la section .got :

0000000000015728 <_GLOBAL_OFFSET_TABLE_>:
   15728:	000155e8 	.word	0x000155e8
   1572c:	00000000 	.word	0x00000000

Déassemblage de la section .got.plt :

0000000000015730 <.got.plt>:
	...
   15748:	00015380 	.word	0x00015380
   1574c:	00000000 	.word	0x00000000

Déassemblage de la section .bss :

0000000000015750 <ullPortTaskHasFPUContext>:
	...

0000000000015758 <ullPortYieldRequired>:
	...

0000000000015760 <ullPortInterruptNesting>:
	...

0000000000015768 <pxCurrentTCB>:
	...

0000000000015770 <pxReadyTasksLists>:
	...

0000000000015838 <xDelayedTaskList1>:
	...

0000000000015860 <xDelayedTaskList2>:
	...

0000000000015888 <pxDelayedTaskList>:
	...

0000000000015890 <pxOverflowDelayedTaskList>:
	...

0000000000015898 <xPendingReadyList>:
	...

00000000000158c0 <xTasksWaitingTermination>:
	...

00000000000158e8 <uxDeletedTasksWaitingCleanUp>:
	...

00000000000158f0 <xSuspendedTaskList>:
	...

0000000000015918 <uxCurrentNumberOfTasks>:
	...

0000000000015920 <xTickCount>:
	...

0000000000015928 <uxTopReadyPriority>:
	...

0000000000015930 <xSchedulerRunning>:
	...

0000000000015938 <uxPendedTicks>:
	...

0000000000015940 <xYieldPending>:
	...

0000000000015948 <xNumOfOverflows>:
	...

0000000000015950 <uxTaskNumber>:
	...

0000000000015958 <xNextTaskUnblockTime>:
	...

0000000000015960 <xIdleTaskHandle>:
	...

0000000000015968 <uxSchedulerSuspended>:
	...

0000000000015970 <g_VectorTable>:
	...

0000000000015df0 <enabled>:
	...

0000000000015e08 <allocated>:
	...

0000000000015e10 <xHeap>:
	...

0000000000016e10 <xStart>:
	...

0000000000016e20 <pxEnd>:
	...

0000000000016e28 <_freertos_vector_table>:
	...

Déassemblage de la section .debug_info :

0000000000000000 <.debug_info>:
       0:	00000320 	.inst	0x00000320 ; undefined
       4:	00000004 	.inst	0x00000004 ; undefined
       8:	01080000 	.inst	0x01080000 ; undefined
       c:	0000008a 	.inst	0x0000008a ; undefined
      10:	0001bc0c 	.inst	0x0001bc0c ; undefined
      14:	01000000 	.inst	0x01000000 ; undefined
      18:	00000000 	.inst	0x00000000 ; undefined
      1c:	0006ac00 	.inst	0x0006ac00 ; undefined
	...
      28:	00000200 	.inst	0x00000200 ; undefined
      2c:	d8020000 	prfm	pldl1keep, 402c <__module_entries_end-0x3fd4>
      30:	00000034 	.inst	0x00000034 ; undefined
      34:	a2070803 	.inst	0xa2070803 ; undefined
      38:	03000001 	.inst	0x03000001 ; undefined
      3c:	01a70704 	.inst	0x01a70704 ; undefined
      40:	04040000 	.inst	0x04040000 ; undefined
      44:	746e6905 	.inst	0x746e6905 ; undefined
      48:	05080300 	.inst	0x05080300 ; undefined
      4c:	00000249 	.inst	0x00000249 ; undefined
      50:	44050803 	.inst	0x44050803 ; undefined
      54:	03000002 	.inst	0x03000002 ; undefined
      58:	00f20801 	.inst	0x00f20801 ; undefined
      5c:	02030000 	.inst	0x02030000 ; undefined
      60:	00011a07 	.inst	0x00011a07 ; undefined
      64:	06010300 	.inst	0x06010300 ; undefined
      68:	000000f4 	.inst	0x000000f4 ; undefined
      6c:	5b050203 	.inst	0x5b050203 ; undefined
      70:	03000001 	.inst	0x03000001 ; undefined
      74:	02320708 	.inst	0x02320708 ; undefined
      78:	08050000 	stxrb	w5, w0, [x0]
      7c:	fb080103 	.inst	0xfb080103 ; undefined
      80:	03000000 	.inst	0x03000000 ; undefined
      84:	019d0708 	.inst	0x019d0708 ; undefined
      88:	10030000 	adr	x0, 6088 <__module_entries_end-0x1f78>
      8c:	0002be04 	.inst	0x0002be04 ; undefined
      90:	01b40200 	.inst	0x01b40200 ; undefined
      94:	30030000 	adr	x0, 6095 <__module_entries_end-0x1f6b>
      98:	00000057 	.inst	0x00000057 ; undefined
      9c:	0002b502 	.inst	0x0002b502 ; undefined
      a0:	3b330300 	.inst	0x3b330300 ; undefined
      a4:	02000000 	.inst	0x02000000 ; undefined
      a8:	0000003d 	.inst	0x0000003d ; undefined
      ac:	00343703 	.inst	0x00343703 ; NYI
      b0:	a7060000 	.inst	0xa7060000 ; undefined
      b4:	07000000 	.inst	0x07000000 ; undefined
      b8:	000000a7 	.inst	0x000000a7 ; undefined
      bc:	00005502 	.inst	0x00005502 ; undefined
      c0:	c74d0400 	.inst	0xc74d0400 ; undefined
      c4:	08000000 	stxrb	w0, w0, [x0]
      c8:	0000cd08 	.inst	0x0000cd08 ; undefined
      cc:	00d80900 	.inst	0x00d80900 ; undefined
      d0:	7a0a0000 	sbcs	w0, w0, w10
      d4:	00000000 	.inst	0x00000000 ; undefined
      d8:	00017b02 	.inst	0x00017b02 ; undefined
      dc:	29600500 	ldp	w0, w1, [x8, #-256]
      e0:	02000000 	.inst	0x02000000 ; undefined
      e4:	000002ea 	.inst	0x000002ea ; undefined
      e8:	00496105 	.inst	0x00496105 ; undefined
      ec:	e9020000 	.inst	0xe9020000 ; undefined
      f0:	05000002 	orr	z2.s, z2.s, #0x1
      f4:	0000a762 	.inst	0x0000a762 ; undefined
      f8:	d8080800 	prfm	pldl1keep, 101f8 <pxPortInitialiseStack+0x1f8>
      fc:	0b000000 	add	w0, w0, w0
     100:	00000100 	.inst	0x00000100 ; undefined
     104:	00b2bc01 	.inst	0x00b2bc01 ; undefined
     108:	03090000 	.inst	0x03090000 ; undefined
     10c:	000155d8 	.inst	0x000155d8 ; undefined
     110:	00000000 	.inst	0x00000000 ; undefined
     114:	0002800b 	.inst	0x0002800b ; undefined
     118:	a7c00100 	.inst	0xa7c00100 ; undefined
     11c:	09000000 	.inst	0x09000000 ; undefined
     120:	01575003 	.inst	0x01575003 ; undefined
     124:	00000000 	.inst	0x00000000 ; undefined
     128:	00750b00 	.inst	0x00750b00 ; undefined
     12c:	c3010000 	.inst	0xc3010000 ; undefined
     130:	000000a7 	.inst	0x000000a7 ; undefined
     134:	57580309 	.inst	0x57580309 ; undefined
     138:	00000001 	.inst	0x00000001 ; undefined
     13c:	2d0b0000 	stp	s0, s0, [x0, #88]
     140:	01000001 	.inst	0x01000001 ; undefined
     144:	0000a7c7 	.inst	0x0000a7c7 ; undefined
     148:	60030900 	.inst	0x60030900 ; undefined
     14c:	00000157 	.inst	0x00000157 ; undefined
     150:	0b000000 	add	w0, w0, w0
     154:	000002de 	.inst	0x000002de ; undefined
     158:	00b7ca01 	.inst	0x00b7ca01 ; undefined
     15c:	03090000 	.inst	0x03090000 ; undefined
     160:	00015438 	.inst	0x00015438 ; undefined
     164:	00000000 	.inst	0x00000000 ; undefined
     168:	0000330b 	.inst	0x0000330b ; undefined
     16c:	b7cb0100 	tbnz	x0, #57, 618c <__module_entries_end-0x1e74>
     170:	09000000 	.inst	0x09000000 ; undefined
     174:	01544003 	.inst	0x01544003 ; undefined
     178:	00000000 	.inst	0x00000000 ; undefined
     17c:	02ab0b00 	.inst	0x02ab0b00 ; undefined
     180:	cc010000 	.inst	0xcc010000 ; undefined
     184:	000000b7 	.inst	0x000000b7 ; undefined
     188:	54480309 	b.ls	901e8 <_freertos_vector_table+0x793c0>  // b.plast
     18c:	00000001 	.inst	0x00000001 ; undefined
     190:	870b0000 	.inst	0x870b0000 ; undefined
     194:	01000001 	.inst	0x01000001 ; undefined
     198:	0000b7cd 	.inst	0x0000b7cd ; undefined
     19c:	50030900 	adr	x0, 62be <__module_entries_end-0x1d42>
     1a0:	00000154 	.inst	0x00000154 ; undefined
     1a4:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
     1a8:	000002f5 	.inst	0x000002f5 ; undefined
     1ac:	ee01e401 	.inst	0xee01e401 ; undefined
     1b0:	48000000 	stxrh	w0, w0, [x0]
     1b4:	00000106 	.inst	0x00000106 ; undefined
     1b8:	64000000 	.inst	0x64000000 ; undefined
     1bc:	00000000 	.inst	0x00000000 ; undefined
     1c0:	01000000 	.inst	0x01000000 ; undefined
     1c4:	0001d99c 	.inst	0x0001d99c ; undefined
     1c8:	023b0d00 	.inst	0x023b0d00 ; undefined
     1cc:	e6010000 	.inst	0xe6010000 ; undefined
     1d0:	00009c01 	.inst	0x00009c01 ; undefined
     1d4:	7c910200 	.inst	0x7c910200 ; undefined
     1d8:	021a0e00 	.inst	0x021a0e00 ; undefined
     1dc:	db010000 	.inst	0xdb010000 ; undefined
     1e0:	0105f801 	.inst	0x0105f801 ; undefined
     1e4:	00000000 	.inst	0x00000000 ; undefined
     1e8:	00005000 	.inst	0x00005000 ; undefined
     1ec:	00000000 	.inst	0x00000000 ; undefined
     1f0:	079c0100 	.inst	0x079c0100 ; undefined
     1f4:	0f000002 	.inst	0x0f000002 ; undefined
     1f8:	00000046 	.inst	0x00000046 ; undefined
     1fc:	ee01db01 	.inst	0xee01db01 ; undefined
     200:	02000000 	.inst	0x02000000 ; undefined
     204:	10007891 	adr	x17, 1114 <__module_entries_end-0x6eec>
     208:	00000064 	.inst	0x00000064 ; undefined
     20c:	e001d001 	.inst	0xe001d001 ; undefined
     210:	00000105 	.inst	0x00000105 ; undefined
     214:	18000000 	ldr	w0, 214 <__module_entries_end-0x7dec>
     218:	00000000 	.inst	0x00000000 ; undefined
     21c:	01000000 	.inst	0x01000000 ; undefined
     220:	0145119c 	.inst	0x0145119c ; undefined
     224:	a9010000 	stp	x0, x0, [x0, #16]
     228:	01055c01 	.inst	0x01055c01 ; undefined
     22c:	00000000 	.inst	0x00000000 ; undefined
     230:	00008400 	.inst	0x00008400 ; undefined
     234:	00000000 	.inst	0x00000000 ; undefined
     238:	109c0100 	adr	x0, fffffffffff38258 <_estack+0xfffffffff7f28258>
     23c:	00000299 	.inst	0x00000299 ; undefined
     240:	e0019501 	.inst	0xe0019501 ; undefined
     244:	00000104 	.inst	0x00000104 ; undefined
     248:	7c000000 	stur	h0, [x0]
     24c:	00000000 	.inst	0x00000000 ; undefined
     250:	01000000 	.inst	0x01000000 ; undefined
     254:	0007119c 	.inst	0x0007119c ; undefined
     258:	7f010000 	.inst	0x7f010000 ; undefined
     25c:	0104a001 	.inst	0x0104a001 ; undefined
     260:	00000000 	.inst	0x00000000 ; undefined
     264:	00004000 	.inst	0x00004000 ; undefined
     268:	00000000 	.inst	0x00000000 ; undefined
     26c:	109c0100 	adr	x0, fffffffffff3828c <_estack+0xfffffffff7f2828c>
     270:	00000021 	.inst	0x00000021 ; undefined
     274:	98017701 	ldrsw	x1, 3154 <__module_entries_end-0x4eac>
     278:	00000104 	.inst	0x00000104 ; undefined
     27c:	08000000 	stxrb	w0, w0, [x0]
     280:	00000000 	.inst	0x00000000 ; undefined
     284:	01000000 	.inst	0x01000000 ; undefined
     288:	02ca129c 	.inst	0x02ca129c ; undefined
     28c:	30010000 	adr	x0, 228d <__module_entries_end-0x5d73>
     290:	0000e301 	.inst	0x0000e301 ; undefined
     294:	01043800 	.inst	0x01043800 ; undefined
     298:	00000000 	.inst	0x00000000 ; undefined
     29c:	00006000 	.inst	0x00006000 ; undefined
     2a0:	00000000 	.inst	0x00000000 ; undefined
     2a4:	db9c0100 	.inst	0xdb9c0100 ; undefined
     2a8:	0d000002 	st1	{v2.b}[0], [x0]
     2ac:	00000113 	.inst	0x00000113 ; undefined
     2b0:	9c013201 	ldr	q1, 28f0 <__module_entries_end-0x5710>
     2b4:	02000000 	.inst	0x02000000 ; undefined
     2b8:	78137c91 	strh	w17, [x4, #-201]!
     2bc:	00000104 	.inst	0x00000104 ; undefined
     2c0:	14000000 	b	2c0 <__module_entries_end-0x7d40>
     2c4:	00000000 	.inst	0x00000000 ; undefined
     2c8:	14000000 	b	2c8 <__module_entries_end-0x7d38>
     2cc:	0000025f 	.inst	0x0000025f ; undefined
     2d0:	42016c01 	.inst	0x42016c01 ; undefined
     2d4:	15000000 	b	40002d4 <_freertos_vector_table+0x3fe94ac>
     2d8:	16000000 	b	fffffffff80002d8 <_estack+0xffffffffefff02d8>
     2dc:	00000165 	.inst	0x00000165 ; undefined
     2e0:	00f9d401 	.inst	0x00f9d401 ; undefined
     2e4:	00000000 	.inst	0x00000000 ; undefined
     2e8:	00000001 	.inst	0x00000001 ; undefined
     2ec:	04380000 	add	z0.b, z0.b, z24.b
     2f0:	00000000 	.inst	0x00000000 ; undefined
     2f4:	9c010000 	ldr	q0, 22f4 <__module_entries_end-0x5d0c>
     2f8:	00027317 	.inst	0x00027317 ; undefined
     2fc:	f9d40100 	.inst	0xf9d40100 ; undefined
     300:	02000000 	.inst	0x02000000 ; undefined
     304:	1a177891 	.inst	0x1a177891 ; undefined
     308:	01000000 	.inst	0x01000000 ; undefined
     30c:	0000bcd4 	.inst	0x0000bcd4 ; undefined
     310:	70910200 	adr	x0, fffffffffff22353 <_estack+0xfffffffff7f12353>
     314:	00025217 	.inst	0x00025217 ; undefined
     318:	7ad40100 	.inst	0x7ad40100 ; undefined
     31c:	02000000 	.inst	0x02000000 ; undefined
     320:	00006891 	.inst	0x00006891 ; undefined
     324:	0000006a 	.inst	0x0000006a ; undefined
     328:	015c0004 	.inst	0x015c0004 ; undefined
     32c:	01080000 	.inst	0x01080000 ; undefined
     330:	0000008a 	.inst	0x0000008a ; undefined
     334:	00030c0c 	.inst	0x00030c0c ; undefined
     338:	0001d500 	.inst	0x0001d500 ; undefined
     33c:	05080200 	.inst	0x05080200 ; undefined
     340:	00000249 	.inst	0x00000249 ; undefined
     344:	a2070802 	.inst	0xa2070802 ; undefined
     348:	02000001 	.inst	0x02000001 ; undefined
     34c:	01a70704 	.inst	0x01a70704 ; undefined
     350:	08020000 	stxrb	w2, w0, [x0]
     354:	00024405 	.inst	0x00024405 ; undefined
     358:	04100200 	mul	z0.b, p0/m, z0.b, z16.b
     35c:	000002be 	.inst	0x000002be ; undefined
     360:	f4060102 	.inst	0xf4060102 ; undefined
     364:	02000000 	.inst	0x02000000 ; undefined
     368:	015b0502 	.inst	0x015b0502 ; undefined
     36c:	04030000 	subr	z0.b, p0/m, z0.b, z0.b
     370:	746e6905 	.inst	0x746e6905 ; undefined
     374:	08010200 	stxrb	w1, w0, [x16]
     378:	000000f2 	.inst	0x000000f2 ; undefined
     37c:	1a070202 	adc	w2, w16, w7
     380:	02000001 	.inst	0x02000001 ; undefined
     384:	02320708 	.inst	0x02320708 ; undefined
     388:	01020000 	.inst	0x01020000 ; undefined
     38c:	0000fb08 	.inst	0x0000fb08 ; undefined
     390:	02c10000 	.inst	0x02c10000 ; undefined
     394:	00040000 	.inst	0x00040000 ; undefined
     398:	00000180 	.inst	0x00000180 ; undefined
     39c:	008a0108 	.inst	0x008a0108 ; undefined
     3a0:	a20c0000 	.inst	0xa20c0000 ; undefined
     3a4:	58000003 	ldr	x3, 3a4 <__module_entries_end-0x7c5c>
     3a8:	0000010d 	.inst	0x0000010d ; undefined
     3ac:	48000000 	stxrh	w0, w0, [x0]
     3b0:	00000002 	.inst	0x00000002 ; undefined
     3b4:	f2000000 	ands	x0, x0, #0x100000001
     3b8:	02000001 	.inst	0x02000001 ; undefined
     3bc:	01a20708 	.inst	0x01a20708 ; undefined
     3c0:	04020000 	.inst	0x04020000 ; undefined
     3c4:	0001a707 	.inst	0x0001a707 ; undefined
     3c8:	05040300 	.inst	0x05040300 ; undefined
     3cc:	00746e69 	.inst	0x00746e69 ; undefined
     3d0:	49050802 	.inst	0x49050802 ; undefined
     3d4:	02000002 	.inst	0x02000002 ; undefined
     3d8:	02440508 	.inst	0x02440508 ; undefined
     3dc:	01020000 	.inst	0x01020000 ; undefined
     3e0:	0000f208 	.inst	0x0000f208 ; undefined
     3e4:	07020200 	.inst	0x07020200 ; undefined
     3e8:	0000011a 	.inst	0x0000011a ; undefined
     3ec:	f4060102 	.inst	0xf4060102 ; undefined
     3f0:	02000000 	.inst	0x02000000 ; undefined
     3f4:	015b0502 	.inst	0x015b0502 ; undefined
     3f8:	08020000 	stxrb	w2, w0, [x0]
     3fc:	00023207 	.inst	0x00023207 ; undefined
     400:	02080400 	.inst	0x02080400 ; undefined
     404:	00fb0801 	.inst	0x00fb0801 ; undefined
     408:	08020000 	stxrb	w2, w0, [x0]
     40c:	00019d07 	.inst	0x00019d07 ; undefined
     410:	04100200 	mul	z0.b, p0/m, z0.b, z16.b
     414:	000002be 	.inst	0x000002be ; undefined
     418:	00003d05 	.inst	0x00003d05 ; undefined
     41c:	29370200 	stp	w0, w0, [x16, #-72]
     420:	05000000 	orr	z0.s, z0.s, #0x1
     424:	000002e9 	.inst	0x000002e9 ; undefined
     428:	00866203 	.inst	0x00866203 ; undefined
     42c:	5d050000 	.inst	0x5d050000 ; undefined
     430:	03000003 	.inst	0x03000003 ; undefined
     434:	00008664 	.inst	0x00008664 ; undefined
     438:	009c0600 	.inst	0x009c0600 ; undefined
     43c:	88070000 	stxr	w7, w0, [x0]
     440:	28000004 	stnp	w4, w0, [x0]
     444:	00f5b504 	.inst	0x00f5b504 ; undefined
     448:	77080000 	.inst	0x77080000 ; undefined
     44c:	04000003 	add	z3.b, p0/m, z3.b, z0.b
     450:	00009cb8 	.inst	0x00009cb8 ; undefined
     454:	1d080000 	.inst	0x1d080000 ; undefined
     458:	04000004 	add	z4.b, p0/m, z4.b, z0.b
     45c:	0000f5b9 	.inst	0x0000f5b9 ; undefined
     460:	60080800 	.inst	0x60080800 ; undefined
     464:	04000004 	add	z4.b, p0/m, z4.b, z0.b
     468:	0000f5ba 	.inst	0x0000f5ba ; undefined
     46c:	8b081000 	add	x0, x0, x8, lsl #4
     470:	04000003 	add	z3.b, p0/m, z3.b, z0.b
     474:	00006fbb 	.inst	0x00006fbb ; undefined
     478:	51081800 	sub	w0, w0, #0x206
     47c:	04000003 	add	z3.b, p0/m, z3.b, z0.b
     480:	00006fbc 	.inst	0x00006fbc ; undefined
     484:	09002000 	.inst	0x09002000 ; undefined
     488:	0000ac08 	.inst	0x0000ac08 ; undefined
     48c:	036c0500 	.inst	0x036c0500 ; undefined
     490:	bf040000 	.inst	0xbf040000 ; undefined
     494:	000000ac 	.inst	0x000000ac ; undefined
     498:	00046b07 	.inst	0x00046b07 ; undefined
     49c:	c1041800 	.inst	0xc1041800 ; undefined
     4a0:	00000137 	.inst	0x00000137 ; undefined
     4a4:	00037708 	.inst	0x00037708 ; undefined
     4a8:	9cc40400 	ldr	q0, fffffffffff88528 <_estack+0xfffffffff7f78528>
     4ac:	00000000 	.inst	0x00000000 ; undefined
     4b0:	00041d08 	.inst	0x00041d08 ; undefined
     4b4:	f5c50400 	.inst	0xf5c50400 ; undefined
     4b8:	08000000 	stxrb	w0, w0, [x0]
     4bc:	00046008 	.inst	0x00046008 ; undefined
     4c0:	f5c60400 	.inst	0xf5c60400 ; undefined
     4c4:	10000000 	adr	x0, 4c4 <__module_entries_end-0x7b3c>
     4c8:	03680500 	.inst	0x03680500 ; undefined
     4cc:	c8040000 	stxr	w4, x0, [x0]
     4d0:	00000106 	.inst	0x00000106 ; undefined
     4d4:	00048207 	.inst	0x00048207 ; undefined
     4d8:	cd042800 	.inst	0xcd042800 ; undefined
     4dc:	00000173 	.inst	0x00000173 ; undefined
     4e0:	0003fe08 	.inst	0x0003fe08 ; undefined
     4e4:	91d00400 	.inst	0x91d00400 ; undefined
     4e8:	00000000 	.inst	0x00000000 ; undefined
     4ec:	00045808 	.inst	0x00045808 ; undefined
     4f0:	73d10400 	.inst	0x73d10400 ; undefined
     4f4:	08000001 	stxrb	w0, w1, [x0]
     4f8:	00038208 	.inst	0x00038208 ; undefined
     4fc:	37d20400 	tbnz	w0, #26, 457c <__module_entries_end-0x3a84>
     500:	10000001 	adr	x1, 500 <__module_entries_end-0x7b00>
     504:	fb080900 	.inst	0xfb080900 ; undefined
     508:	06000000 	.inst	0x06000000 ; undefined
     50c:	00000173 	.inst	0x00000173 ; undefined
     510:	0003f705 	.inst	0x0003f705 ; undefined
     514:	42d40400 	.inst	0x42d40400 ; undefined
     518:	0a000001 	and	w1, w0, w0
     51c:	00000493 	.inst	0x00000493 ; undefined
     520:	0091d401 	.inst	0x0091d401 ; undefined
     524:	0f140000 	.inst	0x0f140000 ; undefined
     528:	00000001 	.inst	0x00000001 ; undefined
     52c:	008c0000 	.inst	0x008c0000 ; undefined
     530:	00000000 	.inst	0x00000000 ; undefined
     534:	9c010000 	ldr	q0, 2534 <__module_entries_end-0x5acc>
     538:	000001c7 	.inst	0x000001c7 ; undefined
     53c:	0003930b 	.inst	0x0003930b ; undefined
     540:	79d40100 	ldrsh	w0, [x8, #2560]
     544:	02000001 	.inst	0x02000001 ; undefined
     548:	7b0c6891 	.inst	0x7b0c6891 ; undefined
     54c:	01000004 	.inst	0x01000004 ; undefined
     550:	0001cdd8 	.inst	0x0001cdd8 ; undefined
     554:	78910200 	ldursh	x0, [x16, #-240]
     558:	7e080900 	.inst	0x7e080900 ; undefined
     55c:	06000001 	.inst	0x06000001 ; undefined
     560:	000001c7 	.inst	0x000001c7 ; undefined
     564:	0004ae0d 	.inst	0x0004ae0d ; undefined
     568:	48910100 	stllrh	w0, [x8]
     56c:	0000010e 	.inst	0x0000010e ; undefined
     570:	cc000000 	.inst	0xcc000000 ; undefined
     574:	00000000 	.inst	0x00000000 ; undefined
     578:	01000000 	.inst	0x01000000 ; undefined
     57c:	0002289c 	.inst	0x0002289c ; undefined
     580:	047b0b00 	.inst	0x047b0b00 ; undefined
     584:	91010000 	add	x0, x0, #0x40
     588:	000001cd 	.inst	0x000001cd ; undefined
     58c:	0b689102 	.inst	0x0b689102 ; undefined
     590:	000004a0 	.inst	0x000004a0 ; undefined
     594:	01799101 	.inst	0x01799101 ; undefined
     598:	91020000 	add	x0, x0, #0x80
     59c:	044d0c60 	uabd	z0.h, p3/m, z0.h, z3.h
     5a0:	93010000 	.inst	0x93010000 ; undefined
     5a4:	00000173 	.inst	0x00000173 ; undefined
     5a8:	0c789102 	.inst	0x0c789102 ; undefined
     5ac:	00000434 	.inst	0x00000434 ; undefined
     5b0:	00a79401 	.inst	0x00a79401 ; undefined
     5b4:	91020000 	add	x0, x0, #0x80
     5b8:	0e0d0070 	tbl	v16.8b, {v3.16b}, v13.8b
     5bc:	01000004 	.inst	0x01000004 ; undefined
     5c0:	010dcc74 	.inst	0x010dcc74 ; undefined
     5c4:	00000000 	.inst	0x00000000 ; undefined
     5c8:	00007c00 	.inst	0x00007c00 ; undefined
     5cc:	00000000 	.inst	0x00000000 ; undefined
     5d0:	709c0100 	adr	x0, fffffffffff385f3 <_estack+0xfffffffff7f285f3>
     5d4:	0b000002 	add	w2, w0, w0
     5d8:	0000047b 	.inst	0x0000047b ; undefined
     5dc:	01cd7401 	.inst	0x01cd7401 ; undefined
     5e0:	91020000 	add	x0, x0, #0x80
     5e4:	04a00b68 	.inst	0x04a00b68 ; undefined
     5e8:	74010000 	.inst	0x74010000 ; undefined
     5ec:	00000179 	.inst	0x00000179 ; undefined
     5f0:	0c609102 	.inst	0x0c609102 ; undefined
     5f4:	00000458 	.inst	0x00000458 ; undefined
     5f8:	01797601 	.inst	0x01797601 ; undefined
     5fc:	91020000 	add	x0, x0, #0x80
     600:	e30d0078 	.inst	0xe30d0078 ; undefined
     604:	01000003 	.inst	0x01000003 ; undefined
     608:	010db068 	.inst	0x010db068 ; undefined
     60c:	00000000 	.inst	0x00000000 ; undefined
     610:	00001c00 	.inst	0x00001c00 ; undefined
     614:	00000000 	.inst	0x00000000 ; undefined
     618:	9c9c0100 	ldr	q0, fffffffffff38638 <_estack+0xfffffffff7f28638>
     61c:	0b000002 	add	w2, w0, w0
     620:	00000446 	.inst	0x00000446 ; undefined
     624:	01796801 	.inst	0x01796801 ; undefined
     628:	91020000 	add	x0, x0, #0x80
     62c:	240e0078 	cmphi	p8.b, p0/z, z3.b, z14.b
     630:	01000004 	.inst	0x01000004 ; undefined
     634:	010d584f 	.inst	0x010d584f ; undefined
     638:	00000000 	.inst	0x00000000 ; undefined
     63c:	00005800 	.inst	0x00005800 ; undefined
     640:	00000000 	.inst	0x00000000 ; undefined
     644:	0b9c0100 	add	w0, w8, w28, asr #0
     648:	0000047b 	.inst	0x0000047b ; undefined
     64c:	01cd4f01 	.inst	0x01cd4f01 ; undefined
     650:	91020000 	add	x0, x0, #0x80
     654:	62000078 	.inst	0x62000078 ; undefined
     658:	0400000b 	add	z11.b, p0/m, z11.b, z0.b
     65c:	00025600 	.inst	0x00025600 ; undefined
     660:	8a010800 	and	x0, x0, x1, lsl #2
     664:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
     668:	00000525 	.inst	0x00000525 ; undefined
     66c:	00010fa0 	.inst	0x00010fa0 ; undefined
     670:	00000000 	.inst	0x00000000 ; undefined
     674:	00000d40 	.inst	0x00000d40 ; undefined
     678:	00000000 	.inst	0x00000000 ; undefined
     67c:	0000037e 	.inst	0x0000037e ; undefined
     680:	00000002 	.inst	0x00000002 ; undefined
     684:	34d80200 	cbz	w0, fffffffffffb06c4 <_estack+0xfffffffff7fa06c4>
     688:	03000000 	.inst	0x03000000 ; undefined
     68c:	01a20708 	.inst	0x01a20708 ; undefined
     690:	04030000 	subr	z0.b, p0/m, z0.b, z0.b
     694:	0001a707 	.inst	0x0001a707 ; undefined
     698:	05040400 	.inst	0x05040400 ; undefined
     69c:	00746e69 	.inst	0x00746e69 ; undefined
     6a0:	49050803 	.inst	0x49050803 ; undefined
     6a4:	03000002 	.inst	0x03000002 ; undefined
     6a8:	02440508 	.inst	0x02440508 ; undefined
     6ac:	01030000 	.inst	0x01030000 ; undefined
     6b0:	0000f208 	.inst	0x0000f208 ; undefined
     6b4:	07020300 	.inst	0x07020300 ; undefined
     6b8:	0000011a 	.inst	0x0000011a ; undefined
     6bc:	f4060103 	.inst	0xf4060103 ; undefined
     6c0:	03000000 	.inst	0x03000000 ; undefined
     6c4:	015b0502 	.inst	0x015b0502 ; undefined
     6c8:	08030000 	stxrb	w3, w0, [x0]
     6cc:	00023207 	.inst	0x00023207 ; undefined
     6d0:	06080500 	.inst	0x06080500 ; undefined
     6d4:	0000007a 	.inst	0x0000007a ; undefined
     6d8:	fb080103 	.inst	0xfb080103 ; undefined
     6dc:	02000000 	.inst	0x02000000 ; undefined
     6e0:	000001b5 	.inst	0x000001b5 ; undefined
     6e4:	0065c203 	.inst	0x0065c203 ; undefined
     6e8:	88070000 	stxr	w7, w0, [x0]
     6ec:	06000000 	.inst	0x06000000 ; undefined
     6f0:	00000088 	.inst	0x00000088 ; undefined
     6f4:	9d070803 	.inst	0x9d070803 ; undefined
     6f8:	08000001 	stxrb	w0, w1, [x0]
     6fc:	0000af08 	.inst	0x0000af08 ; undefined
     700:	00a40600 	.inst	0x00a40600 ; undefined
     704:	03090000 	.inst	0x03090000 ; undefined
     708:	02be0410 	.inst	0x02be0410 ; undefined
     70c:	b4020000 	cbz	x0, 470c <__module_entries_end-0x38f4>
     710:	04000001 	add	z1.b, p0/m, z1.b, z0.b
     714:	00005730 	.inst	0x00005730 ; undefined
     718:	00b70600 	.inst	0x00b70600 ; undefined
     71c:	3d020000 	str	b0, [x0, #128]
     720:	04000000 	add	z0.b, p0/m, z0.b, z0.b
     724:	00003437 	.inst	0x00003437 ; undefined
     728:	02ea0200 	.inst	0x02ea0200 ; undefined
     72c:	61050000 	.inst	0x61050000 ; undefined
     730:	00000049 	.inst	0x00000049 ; undefined
     734:	0000d206 	.inst	0x0000d206 ; undefined
     738:	02e90200 	.inst	0x02e90200 ; undefined
     73c:	62050000 	.inst	0x62050000 ; undefined
     740:	000000c7 	.inst	0x000000c7 ; undefined
     744:	0000e207 	.inst	0x0000e207 ; undefined
     748:	00e20600 	.inst	0x00e20600 ; undefined
     74c:	5d020000 	.inst	0x5d020000 ; undefined
     750:	05000003 	orr	z3.s, z3.s, #0x1
     754:	0000c764 	.inst	0x0000c764 ; undefined
     758:	b7080800 	tbnz	x0, #33, 858 <__module_entries_end-0x77a8>
     75c:	0a000000 	and	w0, w0, w0
     760:	00000488 	.inst	0x00000488 ; undefined
     764:	51b50628 	.inst	0x51b50628 ; undefined
     768:	0b000001 	add	w1, w0, w0
     76c:	00000377 	.inst	0x00000377 ; undefined
     770:	00f7b806 	.inst	0x00f7b806 ; undefined
     774:	0b000000 	add	w0, w0, w0
     778:	0000041d 	.inst	0x0000041d ; undefined
     77c:	0151b906 	.inst	0x0151b906 ; undefined
     780:	0b080000 	add	w0, w0, w8
     784:	00000460 	.inst	0x00000460 ; undefined
     788:	0151ba06 	.inst	0x0151ba06 ; undefined
     78c:	0b100000 	add	w0, w0, w16
     790:	0000038b 	.inst	0x0000038b ; undefined
     794:	007abb06 	.inst	0x007abb06 ; undefined
     798:	0b180000 	add	w0, w0, w24
     79c:	00000351 	.inst	0x00000351 ; undefined
     7a0:	007abc06 	.inst	0x007abc06 ; undefined
     7a4:	00200000 	.inst	0x00200000 ; NYI
     7a8:	01080808 	.inst	0x01080808 ; undefined
     7ac:	6c020000 	stnp	d0, d0, [x0, #32]
     7b0:	06000003 	.inst	0x06000003 ; undefined
     7b4:	000108bf 	.inst	0x000108bf ; undefined
     7b8:	046b0a00 	.inst	0x046b0a00 ; undefined
     7bc:	06180000 	.inst	0x06180000 ; undefined
     7c0:	000193c1 	.inst	0x000193c1 ; undefined
     7c4:	03770b00 	.inst	0x03770b00 ; undefined
     7c8:	c4060000 	ld1sb	{z0.d}, p0/z, [x0, z6.d, uxtw]
     7cc:	000000f7 	.inst	0x000000f7 ; undefined
     7d0:	041d0b00 	.inst	0x041d0b00 ; undefined
     7d4:	c5060000 	ld1sw	{z0.d}, p0/z, [x0, z6.d, uxtw]
     7d8:	00000151 	.inst	0x00000151 ; undefined
     7dc:	04600b08 	.inst	0x04600b08 ; undefined
     7e0:	c6060000 	.inst	0xc6060000 ; undefined
     7e4:	00000151 	.inst	0x00000151 ; undefined
     7e8:	68020010 	.inst	0x68020010 ; undefined
     7ec:	06000003 	.inst	0x06000003 ; undefined
     7f0:	000162c8 	.inst	0x000162c8 ; undefined
     7f4:	04820a00 	.inst	0x04820a00 ; undefined
     7f8:	06280000 	.inst	0x06280000 ; undefined
     7fc:	0001cfcd 	.inst	0x0001cfcd ; undefined
     800:	03fe0b00 	.inst	0x03fe0b00 ; undefined
     804:	d0060000 	adrp	x0, c002000 <_estack+0x3ff2000>
     808:	000000e2 	.inst	0x000000e2 ; undefined
     80c:	04580b00 	orr	z0.h, p2/m, z0.h, z24.h
     810:	d1060000 	sub	x0, x0, #0x180
     814:	000001cf 	.inst	0x000001cf ; undefined
     818:	03820b08 	.inst	0x03820b08 ; undefined
     81c:	d2060000 	eor	x0, x0, #0x400000004000000
     820:	00000193 	.inst	0x00000193 ; undefined
     824:	08080010 	stxrb	w8, w16, [x0]
     828:	00000157 	.inst	0x00000157 ; undefined
     82c:	0003f702 	.inst	0x0003f702 ; undefined
     830:	9ed40600 	.inst	0x9ed40600 ; undefined
     834:	0a000001 	and	w1, w0, w0
     838:	000004e7 	.inst	0x000004e7 ; undefined
     83c:	05870710 	.inst	0x05870710 ; undefined
     840:	0b000002 	add	w2, w0, w0
     844:	000006a3 	.inst	0x000006a3 ; undefined
     848:	00d28907 	.inst	0x00d28907 ; undefined
     84c:	0b000000 	add	w0, w0, w0
     850:	00000693 	.inst	0x00000693 ; undefined
     854:	00f78a07 	.inst	0x00f78a07 ; undefined
     858:	00080000 	.inst	0x00080000 ; undefined
     85c:	0004ba02 	.inst	0x0004ba02 ; undefined
     860:	e08b0700 	.inst	0xe08b0700 ; undefined
     864:	02000001 	.inst	0x02000001 ; undefined
     868:	0000085c 	.inst	0x0000085c ; undefined
     86c:	007a5808 	.inst	0x007a5808 ; undefined
     870:	10060000 	adr	x0, c870 <__module_entries_end+0x4870>
     874:	0c000002 	st4	{v2.8b-v5.8b}, [x0]
     878:	3f880108 	.inst	0x3f880108 ; undefined
     87c:	0d000002 	st1	{v2.b}[0], [x0]
     880:	00000790 	.inst	0x00000790 ; undefined
     884:	023f8a01 	.inst	0x023f8a01 ; undefined
     888:	2d0d0000 	stp	s0, s0, [x0, #104]
     88c:	01000008 	.inst	0x01000008 ; undefined
     890:	0000e28b 	.inst	0x0000e28b ; undefined
     894:	08080000 	stxrb	w8, w0, [x0]
     898:	00000088 	.inst	0x00000088 ; undefined
     89c:	00070d0a 	.inst	0x00070d0a ; undefined
     8a0:	82019000 	.inst	0x82019000 ; undefined
     8a4:	000002d4 	.inst	0x000002d4 ; undefined
     8a8:	0006cf0b 	.inst	0x0006cf0b ; undefined
     8ac:	3f840100 	.inst	0x3f840100 ; undefined
     8b0:	00000002 	.inst	0x00000002 ; undefined
     8b4:	0005e00b 	.inst	0x0005e00b ; undefined
     8b8:	3f850100 	.inst	0x3f850100 ; undefined
     8bc:	08000002 	stxrb	w0, w2, [x0]
     8c0:	00076d0b 	.inst	0x00076d0b ; undefined
     8c4:	3f860100 	.inst	0x3f860100 ; undefined
     8c8:	10000002 	adr	x2, 8c8 <__module_entries_end-0x7738>
     8cc:	0100750e 	.inst	0x0100750e ; undefined
     8d0:	0002208c 	.inst	0x0002208c ; undefined
     8d4:	6a0b1800 	ands	w0, w0, w11, lsl #6
     8d8:	01000008 	.inst	0x01000008 ; undefined
     8dc:	0001d58e 	.inst	0x0001d58e ; undefined
     8e0:	e40b2000 	.inst	0xe40b2000 ; undefined
     8e4:	01000006 	.inst	0x01000006 ; undefined
     8e8:	0001d58f 	.inst	0x0001d58f ; undefined
     8ec:	040b4800 	mla	z0.b, p2/m, z0.b, z11.b
     8f0:	01000008 	.inst	0x01000008 ; undefined
     8f4:	0000ed91 	.inst	0x0000ed91 ; undefined
     8f8:	110b7000 	add	w0, w0, #0x2dc
     8fc:	01000006 	.inst	0x01000006 ; undefined
     900:	0000e292 	.inst	0x0000e292 ; undefined
     904:	4b0b7800 	sub	w0, w0, w11, lsl #30
     908:	01000006 	.inst	0x01000006 ; undefined
     90c:	0000e293 	.inst	0x0000e293 ; undefined
     910:	7e0b8000 	.inst	0x7e0b8000 ; undefined
     914:	01000008 	.inst	0x01000008 ; undefined
     918:	00009395 	.inst	0x00009395 ; undefined
     91c:	560b8800 	.inst	0x560b8800 ; undefined
     920:	01000006 	.inst	0x01000006 ; undefined
     924:	00009396 	.inst	0x00009396 ; undefined
     928:	02008900 	.inst	0x02008900 ; undefined
     92c:	00000644 	.inst	0x00000644 ; undefined
     930:	0245a501 	.inst	0x0245a501 ; undefined
     934:	c7020000 	.inst	0xc7020000 ; undefined
     938:	01000006 	.inst	0x01000006 ; undefined
     93c:	0002d4a9 	.inst	0x0002d4a9 ; undefined
     940:	02df0600 	.inst	0x02df0600 ; undefined
     944:	770f0000 	.inst	0x770f0000 ; undefined
     948:	01000007 	.inst	0x01000007 ; undefined
     94c:	00d207b6 	.inst	0x00d207b6 ; undefined
     950:	1ca40000 	ldr	s0, fffffffffff48950 <_estack+0xfffffffff7f38950>
     954:	00000001 	.inst	0x00000001 ; undefined
     958:	003c0000 	.inst	0x003c0000 ; NYI
     95c:	00000000 	.inst	0x00000000 ; undefined
     960:	9c010000 	ldr	q0, 2960 <__module_entries_end-0x56a0>
     964:	00000330 	.inst	0x00000330 ; undefined
     968:	00073b10 	.inst	0x00073b10 ; undefined
     96c:	07b60100 	.inst	0x07b60100 ; undefined
     970:	0000021b 	.inst	0x0000021b ; undefined
     974:	11689102 	add	w2, w8, #0xa24, lsl #12
     978:	000007cc 	.inst	0x000007cc ; undefined
     97c:	d207b801 	eor	x1, x0, #0xfefffefffefffeff
     980:	02000000 	.inst	0x02000000 ; undefined
     984:	12007891 	and	w17, w4, #0x7fffffff
     988:	000005d1 	.inst	0x000005d1 ; undefined
     98c:	d207a101 	eor	x1, x8, #0xfe03fe03fe03fe03
     990:	5c000000 	ldr	d0, 990 <__module_entries_end-0x7670>
     994:	0000011c 	.inst	0x0000011c ; undefined
     998:	48000000 	stxrh	w0, w0, [x0]
     99c:	00000000 	.inst	0x00000000 ; undefined
     9a0:	01000000 	.inst	0x01000000 ; undefined
     9a4:	0003719c 	.inst	0x0003719c ; undefined
     9a8:	073a1000 	.inst	0x073a1000 ; undefined
     9ac:	a1010000 	.inst	0xa1010000 ; undefined
     9b0:	00037107 	.inst	0x00037107 ; undefined
     9b4:	68910200 	.inst	0x68910200 ; undefined
     9b8:	0007cc11 	.inst	0x0007cc11 ; undefined
     9bc:	07a30100 	.inst	0x07a30100 ; undefined
     9c0:	000000d2 	.inst	0x000000d2 ; undefined
     9c4:	00789102 	.inst	0x00789102 ; undefined
     9c8:	02ea0808 	.inst	0x02ea0808 ; undefined
     9cc:	670f0000 	.inst	0x670f0000 ; undefined
     9d0:	01000005 	.inst	0x01000005 ; undefined
     9d4:	00d2078f 	.inst	0x00d2078f ; undefined
     9d8:	1c280000 	ldr	s0, 509d8 <_freertos_vector_table+0x39bb0>
     9dc:	00000001 	.inst	0x00000001 ; undefined
     9e0:	00340000 	.inst	0x00340000 ; NYI
     9e4:	00000000 	.inst	0x00000000 ; undefined
     9e8:	9c010000 	ldr	q0, 29e8 <__module_entries_end-0x5618>
     9ec:	000003b8 	.inst	0x000003b8 ; undefined
     9f0:	00073b10 	.inst	0x00073b10 ; undefined
     9f4:	078f0100 	.inst	0x078f0100 ; undefined
     9f8:	0000021b 	.inst	0x0000021b ; undefined
     9fc:	11689102 	add	w2, w8, #0xa24, lsl #12
     a00:	000007cc 	.inst	0x000007cc ; undefined
     a04:	d2079101 	eor	x1, x8, #0x3e003e003e003e00
     a08:	02000000 	.inst	0x02000000 ; undefined
     a0c:	12007891 	and	w17, w4, #0x7fffffff
     a10:	000007f4 	.inst	0x000007f4 ; undefined
     a14:	d2077a01 	eor	x1, x16, #0xfefffffffeffffff
     a18:	e8000000 	.inst	0xe8000000 ; undefined
     a1c:	0000011b 	.inst	0x0000011b ; undefined
     a20:	40000000 	.inst	0x40000000 ; undefined
     a24:	00000000 	.inst	0x00000000 ; undefined
     a28:	01000000 	.inst	0x01000000 ; undefined
     a2c:	0003f99c 	.inst	0x0003f99c ; undefined
     a30:	073a1000 	.inst	0x073a1000 ; undefined
     a34:	7a010000 	sbcs	w0, w0, w1
     a38:	00037107 	.inst	0x00037107 ; undefined
     a3c:	68910200 	.inst	0x68910200 ; undefined
     a40:	0007cc11 	.inst	0x0007cc11 ; undefined
     a44:	077c0100 	.inst	0x077c0100 ; undefined
     a48:	000000d2 	.inst	0x000000d2 ; undefined
     a4c:	00789102 	.inst	0x00789102 ; undefined
     a50:	00071d13 	.inst	0x00071d13 ; undefined
     a54:	07020100 	.inst	0x07020100 ; undefined
     a58:	00011af0 	.inst	0x00011af0 ; undefined
     a5c:	00000000 	.inst	0x00000000 ; undefined
     a60:	000000f8 	.inst	0x000000f8 ; undefined
     a64:	00000000 	.inst	0x00000000 ; undefined
     a68:	046d9c01 	lsl	z1.s, z0.s, #13
     a6c:	3a100000 	adcs	w0, w0, w16
     a70:	01000007 	.inst	0x01000007 ; undefined
     a74:	04730702 	sub	z2.h, z24.h, z19.h
     a78:	91020000 	add	x0, x0, #0x80
     a7c:	1b001468 	madd	w8, w3, w0, w5
     a80:	00000001 	.inst	0x00000001 ; undefined
     a84:	00680000 	.inst	0x00680000 ; undefined
     a88:	00000000 	.inst	0x00000000 ; undefined
     a8c:	044b0000 	umin	z0.h, p0/m, z0.h, z0.h
     a90:	56110000 	.inst	0x56110000 ; undefined
     a94:	01000006 	.inst	0x01000006 ; undefined
     a98:	0088070c 	.inst	0x0088070c ; undefined
     a9c:	91020000 	add	x0, x0, #0x80
     aa0:	7015007f 	adr	xzr, 2aaaf <_freertos_vector_table+0x13c87>
     aa4:	0000011b 	.inst	0x0000011b ; undefined
     aa8:	68000000 	.inst	0x68000000 ; undefined
     aac:	00000000 	.inst	0x00000000 ; undefined
     ab0:	11000000 	add	w0, w0, #0x0
     ab4:	0000087e 	.inst	0x0000087e ; undefined
     ab8:	88075d01 	stxr	w7, w1, [x8]
     abc:	02000000 	.inst	0x02000000 ; undefined
     ac0:	00007e91 	.inst	0x00007e91 ; undefined
     ac4:	02df0808 	.inst	0x02df0808 ; undefined
     ac8:	6d060000 	stp	d0, d0, [x0, #96]
     acc:	13000004 	sbfx	w4, w0, #0, #1
     ad0:	000006b2 	.inst	0x000006b2 ; undefined
     ad4:	6406f001 	.inst	0x6406f001 ; undefined
     ad8:	0000011a 	.inst	0x0000011a ; undefined
     adc:	8c000000 	.inst	0x8c000000 ; undefined
     ae0:	00000000 	.inst	0x00000000 ; undefined
     ae4:	01000000 	.inst	0x01000000 ; undefined
     ae8:	0004b59c 	.inst	0x0004b59c ; undefined
     aec:	073a1000 	.inst	0x073a1000 ; undefined
     af0:	f0010000 	adrp	x0, 2003000 <_freertos_vector_table+0x1fec1d8>
     af4:	00047306 	.inst	0x00047306 ; undefined
     af8:	78910200 	ldursh	x0, [x16, #-240]
     afc:	00060810 	.inst	0x00060810 ; undefined
     b00:	06f00100 	.inst	0x06f00100 ; undefined
     b04:	0000007c 	.inst	0x0000007c ; undefined
     b08:	00709102 	.inst	0x00709102 ; undefined
     b0c:	0004f112 	.inst	0x0004f112 ; undefined
     b10:	06a10100 	.inst	0x06a10100 ; undefined
     b14:	000000d2 	.inst	0x000000d2 ; undefined
     b18:	00011904 	.inst	0x00011904 ; undefined
     b1c:	00000000 	.inst	0x00000000 ; undefined
     b20:	00000160 	.inst	0x00000160 ; undefined
     b24:	00000000 	.inst	0x00000000 ; undefined
     b28:	05239c01 	lastb	b1, p7, z0.b
     b2c:	3a100000 	adcs	w0, w0, w16
     b30:	01000007 	.inst	0x01000007 ; undefined
     b34:	047306a1 	sub	z1.h, z21.h, z19.h
     b38:	91020000 	add	x0, x0, #0x80
     b3c:	06d61068 	.inst	0x06d61068 ; undefined
     b40:	a1010000 	.inst	0xa1010000 ; undefined
     b44:	0000a406 	.inst	0x0000a406 ; undefined
     b48:	60910200 	.inst	0x60910200 ; undefined
     b4c:	00050410 	.inst	0x00050410 ; undefined
     b50:	06a10100 	.inst	0x06a10100 ; undefined
     b54:	000000dd 	.inst	0x000000dd ; undefined
     b58:	11589102 	add	w2, w8, #0x624, lsl #12
     b5c:	000007cc 	.inst	0x000007cc ; undefined
     b60:	d206a301 	eor	x1, x24, #0xfc07fc07fc07fc07
     b64:	02000000 	.inst	0x02000000 ; undefined
     b68:	04117091 	mls	z17.b, p4/m, z4.b, z17.b
     b6c:	01000008 	.inst	0x01000008 ; undefined
     b70:	00e206a4 	.inst	0x00e206a4 ; undefined
     b74:	91020000 	add	x0, x0, #0x80
     b78:	be160078 	.inst	0xbe160078 ; undefined
     b7c:	01000007 	.inst	0x01000007 ; undefined
     b80:	18dc0659 	ldr	w25, fffffffffffb8c48 <_estack+0xfffffffff7fa8c48>
     b84:	00000001 	.inst	0x00000001 ; undefined
     b88:	00280000 	.inst	0x00280000 ; NYI
     b8c:	00000000 	.inst	0x00000000 ; undefined
     b90:	9c010000 	ldr	q0, 2b90 <__module_entries_end-0x5470>
     b94:	00000560 	.inst	0x00000560 ; undefined
     b98:	00073b10 	.inst	0x00073b10 ; undefined
     b9c:	06590100 	.inst	0x06590100 ; undefined
     ba0:	00000210 	.inst	0x00000210 ; undefined
     ba4:	11689102 	add	w2, w8, #0xa24, lsl #12
     ba8:	0000073a 	.inst	0x0000073a ; undefined
     bac:	73065b01 	.inst	0x73065b01 ; undefined
     bb0:	02000004 	.inst	0x02000004 ; undefined
     bb4:	0f007891 	.inst	0x0f007891 ; undefined
     bb8:	00000626 	.inst	0x00000626 ; undefined
     bbc:	e2064d01 	.inst	0xe2064d01 ; undefined
     bc0:	bc000000 	stur	s0, [x0]
     bc4:	00000118 	.inst	0x00000118 ; undefined
     bc8:	20000000 	.inst	0x20000000 ; undefined
     bcc:	00000000 	.inst	0x00000000 ; undefined
     bd0:	01000000 	.inst	0x01000000 ; undefined
     bd4:	0005a19c 	.inst	0x0005a19c ; undefined
     bd8:	073b1000 	.inst	0x073b1000 ; undefined
     bdc:	4d010000 	.inst	0x4d010000 ; undefined
     be0:	00021b06 	.inst	0x00021b06 ; undefined
     be4:	68910200 	.inst	0x68910200 ; undefined
     be8:	0007cb11 	.inst	0x0007cb11 ; undefined
     bec:	064f0100 	.inst	0x064f0100 ; undefined
     bf0:	000000e2 	.inst	0x000000e2 ; undefined
     bf4:	00789102 	.inst	0x00789102 ; undefined
     bf8:	00058e17 	.inst	0x00058e17 ; undefined
     bfc:	063b0100 	.inst	0x063b0100 ; undefined
     c00:	000000e2 	.inst	0x000000e2 ; undefined
     c04:	0001187c 	.inst	0x0001187c ; undefined
     c08:	00000000 	.inst	0x00000000 ; undefined
     c0c:	00000040 	.inst	0x00000040 ; undefined
     c10:	00000000 	.inst	0x00000000 ; undefined
     c14:	05f19c01 	.inst	0x05f19c01 ; undefined
     c18:	3b100000 	.inst	0x3b100000 ; undefined
     c1c:	01000007 	.inst	0x01000007 ; undefined
     c20:	021b063b 	.inst	0x021b063b ; undefined
     c24:	91020000 	add	x0, x0, #0x80
     c28:	07cb1168 	.inst	0x07cb1168 ; undefined
     c2c:	3d010000 	str	b0, [x0, #64]
     c30:	0000e206 	.inst	0x0000e206 ; undefined
     c34:	70910200 	adr	x0, fffffffffff22c77 <_estack+0xfffffffff7f12c77>
     c38:	00073a11 	.inst	0x00073a11 ; undefined
     c3c:	063e0100 	.inst	0x063e0100 ; undefined
     c40:	0000046d 	.inst	0x0000046d ; undefined
     c44:	00789102 	.inst	0x00789102 ; undefined
     c48:	00050e17 	.inst	0x00050e17 ; undefined
     c4c:	062b0100 	.inst	0x062b0100 ; undefined
     c50:	000000e2 	.inst	0x000000e2 ; undefined
     c54:	00011850 	.inst	0x00011850 ; undefined
     c58:	00000000 	.inst	0x00000000 ; undefined
     c5c:	0000002c 	.inst	0x0000002c ; undefined
     c60:	00000000 	.inst	0x00000000 ; undefined
     c64:	06329c01 	.inst	0x06329c01 ; undefined
     c68:	3b100000 	.inst	0x3b100000 ; undefined
     c6c:	01000007 	.inst	0x01000007 ; undefined
     c70:	021b062b 	.inst	0x021b062b ; undefined
     c74:	91020000 	add	x0, x0, #0x80
     c78:	07cb1168 	.inst	0x07cb1168 ; undefined
     c7c:	2d010000 	stp	s0, s0, [x0, #8]
     c80:	0000e206 	.inst	0x0000e206 ; undefined
     c84:	78910200 	ldursh	x0, [x16, #-240]
     c88:	075b1700 	.inst	0x075b1700 ; undefined
     c8c:	f5010000 	.inst	0xf5010000 ; undefined
     c90:	0000d205 	.inst	0x0000d205 ; undefined
     c94:	0117d800 	.inst	0x0117d800 ; undefined
     c98:	00000000 	.inst	0x00000000 ; undefined
     c9c:	00007800 	.inst	0x00007800 ; undefined
     ca0:	00000000 	.inst	0x00000000 ; undefined
     ca4:	af9c0100 	.inst	0xaf9c0100 ; undefined
     ca8:	10000006 	adr	x6, ca8 <__module_entries_end-0x7358>
     cac:	0000073b 	.inst	0x0000073b ; undefined
     cb0:	1005f501 	adr	x1, cb50 <__module_entries_end+0x4b50>
     cb4:	02000002 	.inst	0x02000002 ; undefined
     cb8:	08105891 	stxrb	w16, w17, [x4]
     cbc:	01000006 	.inst	0x01000006 ; undefined
     cc0:	007c05f5 	.inst	0x007c05f5 ; undefined
     cc4:	91020000 	add	x0, x0, #0x80
     cc8:	07cc1150 	.inst	0x07cc1150 ; undefined
     ccc:	f7010000 	.inst	0xf7010000 ; undefined
     cd0:	0000d205 	.inst	0x0000d205 ; undefined
     cd4:	78910200 	ldursh	x0, [x16, #-240]
     cd8:	00081611 	.inst	0x00081611 ; undefined
     cdc:	05f80100 	.inst	0x05f80100 ; undefined
     ce0:	000000e2 	.inst	0x000000e2 ; undefined
     ce4:	11689102 	add	w2, w8, #0xa24, lsl #12
     ce8:	000005ba 	.inst	0x000005ba ; undefined
     cec:	3f05f901 	.inst	0x3f05f901 ; undefined
     cf0:	02000002 	.inst	0x02000002 ; undefined
     cf4:	3a116091 	.inst	0x3a116091 ; undefined
     cf8:	01000007 	.inst	0x01000007 ; undefined
     cfc:	047305fa 	sub	z26.h, z15.h, z19.h
     d00:	91020000 	add	x0, x0, #0x80
     d04:	a5170070 	ld1rqw	{z16.s}, p0/z, [x3, x23, lsl #2]
     d08:	01000005 	.inst	0x01000005 ; undefined
     d0c:	00d2059a 	.inst	0x00d2059a ; undefined
     d10:	16ec0000 	b	fffffffffbb00d10 <_estack+0xfffffffff3af0d10>
     d14:	00000001 	.inst	0x00000001 ; undefined
     d18:	00ec0000 	.inst	0x00ec0000 ; undefined
     d1c:	00000000 	.inst	0x00000000 ; undefined
     d20:	9c010000 	ldr	q0, 2d20 <__module_entries_end-0x52e0>
     d24:	0000076f 	.inst	0x0000076f ; undefined
     d28:	00073b10 	.inst	0x00073b10 ; undefined
     d2c:	059a0100 	mov	z0.s, p10/z, #8
     d30:	00000210 	.inst	0x00000210 ; undefined
     d34:	10489102 	adr	x2, 91f54 <_freertos_vector_table+0x7b12c>
     d38:	00000608 	.inst	0x00000608 ; undefined
     d3c:	7c059a01 	.inst	0x7c059a01 ; undefined
     d40:	02000000 	.inst	0x02000000 ; undefined
     d44:	42104091 	.inst	0x42104091 ; undefined
     d48:	01000008 	.inst	0x01000008 ; undefined
     d4c:	0775059a 	.inst	0x0775059a ; undefined
     d50:	91030000 	add	x0, x0, #0xc0
     d54:	cc117fb8 	.inst	0xcc117fb8 ; undefined
     d58:	01000007 	.inst	0x01000007 ; undefined
     d5c:	00d2059c 	.inst	0x00d2059c ; undefined
     d60:	91020000 	add	x0, x0, #0x80
     d64:	08161178 	stxrb	w22, w24, [x11]
     d68:	9d010000 	.inst	0x9d010000 ; undefined
     d6c:	0000e205 	.inst	0x0000e205 ; undefined
     d70:	68910200 	.inst	0x68910200 ; undefined
     d74:	00073a11 	.inst	0x00073a11 ; undefined
     d78:	059e0100 	mov	z0.s, p14/z, #8
     d7c:	00000473 	.inst	0x00000473 ; undefined
     d80:	15709102 	b	5c25188 <_freertos_vector_table+0x5c0e360>
     d84:	00011710 	.inst	0x00011710 ; undefined
     d88:	00000000 	.inst	0x00000000 ; undefined
     d8c:	000000b4 	.inst	0x000000b4 ; undefined
     d90:	00000000 	.inst	0x00000000 ; undefined
     d94:	00080411 	.inst	0x00080411 ; undefined
     d98:	05b50100 	.inst	0x05b50100 ; undefined
     d9c:	000000f2 	.inst	0x000000f2 ; undefined
     da0:	15609102 	b	58251a8 <_freertos_vector_table+0x580e380>
     da4:	00011728 	.inst	0x00011728 ; undefined
     da8:	00000000 	.inst	0x00000000 ; undefined
     dac:	00000094 	.inst	0x00000094 ; undefined
     db0:	00000000 	.inst	0x00000000 ; undefined
     db4:	00087e11 	.inst	0x00087e11 ; undefined
     db8:	05ba0100 	.inst	0x05ba0100 ; undefined
     dbc:	00000098 	.inst	0x00000098 ; undefined
     dc0:	005f9102 	.inst	0x005f9102 ; undefined
     dc4:	08080000 	stxrb	w8, w0, [x0]
     dc8:	000000d2 	.inst	0x000000d2 ; undefined
     dcc:	00076f06 	.inst	0x00076f06 ; undefined
     dd0:	079b1700 	.inst	0x079b1700 ; undefined
     dd4:	d5010000 	msr	s0_1_c0_c0_0, x0
     dd8:	0000d204 	.inst	0x0000d204 ; undefined
     ddc:	01150800 	.inst	0x01150800 ; undefined
     de0:	00000000 	.inst	0x00000000 ; undefined
     de4:	0001e400 	.inst	0x0001e400 ; undefined
     de8:	00000000 	.inst	0x00000000 ; undefined
     dec:	389c0100 	ldursb	x0, [x8, #-64]
     df0:	10000008 	adr	x8, df0 <__module_entries_end-0x7210>
     df4:	0000073b 	.inst	0x0000073b ; undefined
     df8:	1004d501 	adr	x1, a898 <__module_entries_end+0x2898>
     dfc:	02000002 	.inst	0x02000002 ; undefined
     e00:	08104891 	stxrb	w16, w17, [x4]
     e04:	01000006 	.inst	0x01000006 ; undefined
     e08:	007c04d5 	.inst	0x007c04d5 ; undefined
     e0c:	91020000 	add	x0, x0, #0x80
     e10:	10291040 	adr	x0, 53018 <_freertos_vector_table+0x3c1f0>
     e14:	d5010000 	msr	s0_1_c0_c0_0, x0
     e18:	0000f704 	.inst	0x0000f704 ; undefined
     e1c:	b8910300 	ldursw	x0, [x24, #-240]
     e20:	0581107f 	and	z31.s, z31.s, #0xc0000003
     e24:	d5010000 	msr	s0_1_c0_c0_0, x0
     e28:	0000dd04 	.inst	0x0000dd04 ; undefined
     e2c:	b0910300 	adrp	x0, ffffffff22061000 <_estack+0xffffffff1a051000>
     e30:	07b0117f 	.inst	0x07b0117f ; undefined
     e34:	d7010000 	.inst	0xd7010000 ; undefined
     e38:	0000d204 	.inst	0x0000d204 ; undefined
     e3c:	78910200 	ldursh	x0, [x16, #-240]
     e40:	000d1d11 	.inst	0x000d1d11 ; undefined
     e44:	04d80100 	orr	z0.d, p0/m, z0.d, z8.d
     e48:	00000205 	.inst	0x00000205 ; undefined
     e4c:	11509102 	add	w2, w8, #0x424, lsl #12
     e50:	000005ba 	.inst	0x000005ba ; undefined
     e54:	3f04d901 	.inst	0x3f04d901 ; undefined
     e58:	02000002 	.inst	0x02000002 ; undefined
     e5c:	3a116091 	.inst	0x3a116091 ; undefined
     e60:	01000007 	.inst	0x01000007 ; undefined
     e64:	047304da 	sub	z26.h, z6.h, z19.h
     e68:	91020000 	add	x0, x0, #0x80
     e6c:	15301570 	b	4c0642c <_freertos_vector_table+0x4bef604>
     e70:	00000001 	.inst	0x00000001 ; undefined
     e74:	00ec0000 	.inst	0x00ec0000 ; undefined
     e78:	00000000 	.inst	0x00000000 ; undefined
     e7c:	04110000 	.inst	0x04110000 ; undefined
     e80:	01000008 	.inst	0x01000008 ; undefined
     e84:	00f204ec 	.inst	0x00f204ec ; undefined
     e88:	91020000 	add	x0, x0, #0x80
     e8c:	17000068 	b	fffffffffc00102c <_estack+0xfffffffff3ff102c>
     e90:	000007d4 	.inst	0x000007d4 ; undefined
     e94:	d2043001 	eor	x1, x0, #0xf00001fff00001ff
     e98:	24000000 	cmphs	p0.b, p0/z, z0.b, z0.b
     e9c:	00000114 	.inst	0x00000114 ; undefined
     ea0:	e4000000 	.inst	0xe4000000 ; undefined
     ea4:	00000000 	.inst	0x00000000 ; undefined
     ea8:	01000000 	.inst	0x01000000 ; undefined
     eac:	0008e89c 	.inst	0x0008e89c ; undefined
     eb0:	073b1000 	.inst	0x073b1000 ; undefined
     eb4:	30010000 	adr	x0, 2eb5 <__module_entries_end-0x514b>
     eb8:	00021004 	.inst	0x00021004 ; undefined
     ebc:	48910200 	stllrh	w0, [x16]
     ec0:	00084210 	.inst	0x00084210 ; undefined
     ec4:	04300100 	add	z0.b, z8.b, z16.b
     ec8:	00000775 	.inst	0x00000775 ; undefined
     ecc:	11409102 	add	w2, w8, #0x24, lsl #12
     ed0:	000007cc 	.inst	0x000007cc ; undefined
     ed4:	d2043201 	eor	x1, x16, #0xf00001fff00001ff
     ed8:	02000000 	.inst	0x02000000 ; undefined
     edc:	16117891 	b	fffffffff845f120 <_estack+0xfffffffff044f120>
     ee0:	01000008 	.inst	0x01000008 ; undefined
     ee4:	00e20433 	.inst	0x00e20433 ; undefined
     ee8:	91020000 	add	x0, x0, #0x80
     eec:	073a1168 	.inst	0x073a1168 ; undefined
     ef0:	34010000 	cbz	w0, 2ef0 <__module_entries_end-0x5110>
     ef4:	00047304 	.inst	0x00047304 ; undefined
     ef8:	70910200 	adr	x0, fffffffffff22f3b <_estack+0xfffffffff7f12f3b>
     efc:	01144415 	.inst	0x01144415 ; undefined
     f00:	00000000 	.inst	0x00000000 ; undefined
     f04:	0000b000 	.inst	0x0000b000 ; undefined
     f08:	00000000 	.inst	0x00000000 ; undefined
     f0c:	08041100 	stxrb	w4, w0, [x8]
     f10:	59010000 	.inst	0x59010000 ; undefined
     f14:	0000f204 	.inst	0x0000f204 ; undefined
     f18:	60910200 	.inst	0x60910200 ; undefined
     f1c:	01146415 	.inst	0x01146415 ; undefined
     f20:	00000000 	.inst	0x00000000 ; undefined
     f24:	00008800 	.inst	0x00008800 ; undefined
     f28:	00000000 	.inst	0x00000000 ; undefined
     f2c:	06561100 	.inst	0x06561100 ; undefined
     f30:	60010000 	.inst	0x60010000 ; undefined
     f34:	00009804 	.inst	0x00009804 ; undefined
     f38:	5f910200 	.inst	0x5f910200 ; undefined
     f3c:	17000000 	b	fffffffffc000f3c <_estack+0xfffffffff3ff0f3c>
     f40:	00000742 	.inst	0x00000742 ; undefined
     f44:	d2039901 	eor	x1, x8, #0xe00fe00fe00fe00f
     f48:	34000000 	cbz	w0, f48 <__module_entries_end-0x70b8>
     f4c:	00000113 	.inst	0x00000113 ; undefined
     f50:	f0000000 	adrp	x0, 3000 <__module_entries_end-0x5000>
     f54:	00000000 	.inst	0x00000000 ; undefined
     f58:	01000000 	.inst	0x01000000 ; undefined
     f5c:	0009959c 	.inst	0x0009959c ; undefined
     f60:	073b1000 	.inst	0x073b1000 ; undefined
     f64:	99010000 	.inst	0x99010000 ; undefined
     f68:	00021003 	.inst	0x00021003 ; undefined
     f6c:	58910200 	ldr	x0, fffffffffff22fac <_estack+0xfffffffff7f12fac>
     f70:	0006d610 	.inst	0x0006d610 ; undefined
     f74:	03990100 	.inst	0x03990100 ; undefined
     f78:	000000aa 	.inst	0x000000aa ; undefined
     f7c:	10509102 	adr	x2, a219c <_freertos_vector_table+0x8b374>
     f80:	00000842 	.inst	0x00000842 ; undefined
     f84:	75039901 	.inst	0x75039901 ; undefined
     f88:	02000007 	.inst	0x02000007 ; undefined
     f8c:	e6104891 	.inst	0xe6104891 ; undefined
     f90:	01000007 	.inst	0x01000007 ; undefined
     f94:	00dd0399 	.inst	0x00dd0399 ; undefined
     f98:	91020000 	add	x0, x0, #0x80
     f9c:	07cc1140 	.inst	0x07cc1140 ; undefined
     fa0:	9b010000 	madd	x0, x0, x1, x0
     fa4:	0000d203 	.inst	0x0000d203 ; undefined
     fa8:	78910200 	ldursh	x0, [x16, #-240]
     fac:	00081611 	.inst	0x00081611 ; undefined
     fb0:	039c0100 	.inst	0x039c0100 ; undefined
     fb4:	000000e2 	.inst	0x000000e2 ; undefined
     fb8:	11689102 	add	w2, w8, #0xa24, lsl #12
     fbc:	0000073a 	.inst	0x0000073a ; undefined
     fc0:	73039d01 	.inst	0x73039d01 ; undefined
     fc4:	02000004 	.inst	0x02000004 ; undefined
     fc8:	80157091 	.inst	0x80157091 ; undefined
     fcc:	00000113 	.inst	0x00000113 ; undefined
     fd0:	88000000 	stxr	w0, w0, [x0]
     fd4:	00000000 	.inst	0x00000000 ; undefined
     fd8:	11000000 	add	w0, w0, #0x0
     fdc:	00000656 	.inst	0x00000656 ; undefined
     fe0:	9803bc01 	ldrsw	x1, 8760 <__module_entries_end+0x760>
     fe4:	02000000 	.inst	0x02000000 ; undefined
     fe8:	00006791 	.inst	0x00006791 ; undefined
     fec:	0005f617 	.inst	0x0005f617 ; undefined
     ff0:	02d30100 	.inst	0x02d30100 ; undefined
     ff4:	000000d2 	.inst	0x000000d2 ; undefined
     ff8:	00011198 	.inst	0x00011198 ; undefined
     ffc:	00000000 	.inst	0x00000000 ; undefined
    1000:	0000019c 	.inst	0x0000019c ; undefined
    1004:	00000000 	.inst	0x00000000 ; undefined
    1008:	0a329c01 	.inst	0x0a329c01 ; undefined
    100c:	3b100000 	.inst	0x3b100000 ; undefined
    1010:	01000007 	.inst	0x01000007 ; undefined
    1014:	021002d3 	.inst	0x021002d3 ; undefined
    1018:	91020000 	add	x0, x0, #0x80
    101c:	06d61048 	.inst	0x06d61048 ; undefined
    1020:	d3010000 	.inst	0xd3010000 ; undefined
    1024:	0000aa02 	.inst	0x0000aa02 ; undefined
    1028:	40910200 	.inst	0x40910200 ; undefined
    102c:	00102910 	.inst	0x00102910 ; undefined
    1030:	02d30100 	.inst	0x02d30100 ; undefined
    1034:	000000f7 	.inst	0x000000f7 ; undefined
    1038:	7fb89103 	fmulx	s3, s8, v24.s[1]
    103c:	0007e610 	.inst	0x0007e610 ; undefined
    1040:	02d30100 	.inst	0x02d30100 ; undefined
    1044:	000000dd 	.inst	0x000000dd ; undefined
    1048:	7fb09103 	fmulx	s3, s8, v16.s[1]
    104c:	0007b011 	.inst	0x0007b011 ; undefined
    1050:	02d50100 	.inst	0x02d50100 ; undefined
    1054:	000000d2 	.inst	0x000000d2 ; undefined
    1058:	11789102 	add	w2, w8, #0xe24, lsl #12
    105c:	000005e7 	.inst	0x000005e7 ; undefined
    1060:	d202d501 	eor	x1, x8, #0xcfcfcfcfcfcfcfcf
    1064:	02000000 	.inst	0x02000000 ; undefined
    1068:	1d116891 	.inst	0x1d116891 ; undefined
    106c:	0100000d 	.inst	0x0100000d ; undefined
    1070:	020502d6 	.inst	0x020502d6 ; undefined
    1074:	91020000 	add	x0, x0, #0x80
    1078:	073a1158 	.inst	0x073a1158 ; undefined
    107c:	d7010000 	.inst	0xd7010000 ; undefined
    1080:	00047302 	.inst	0x00047302 ; undefined
    1084:	70910200 	adr	x0, fffffffffff230c7 <_estack+0xfffffffff7f130c7>
    1088:	065e1300 	.inst	0x065e1300 ; undefined
    108c:	b0010000 	adrp	x0, 2002000 <_freertos_vector_table+0x1feb1d8>
    1090:	01112401 	.inst	0x01112401 ; undefined
    1094:	00000000 	.inst	0x00000000 ; undefined
    1098:	00007400 	.inst	0x00007400 ; undefined
    109c:	00000000 	.inst	0x00000000 ; undefined
    10a0:	9c9c0100 	ldr	q0, fffffffffff390c0 <_estack+0xfffffffff7f290c0>
    10a4:	1000000a 	adr	x10, 10a4 <__module_entries_end-0x6f5c>
    10a8:	0000072c 	.inst	0x0000072c ; undefined
    10ac:	f201b001 	ands	x1, x0, #0x8fff8fff8fff8fff
    10b0:	02000000 	.inst	0x02000000 ; undefined
    10b4:	4b107891 	sub	w17, w4, w16, lsl #30
    10b8:	01000006 	.inst	0x01000006 ; undefined
    10bc:	00f201b0 	.inst	0x00f201b0 ; undefined
    10c0:	91020000 	add	x0, x0, #0x80
    10c4:	04d71070 	udivr	z16.d, p4/m, z16.d, z3.d
    10c8:	b0010000 	adrp	x0, 2002000 <_freertos_vector_table+0x1feb1d8>
    10cc:	00010201 	.inst	0x00010201 ; undefined
    10d0:	68910200 	.inst	0x68910200 ; undefined
    10d4:	00061a10 	.inst	0x00061a10 ; undefined
    10d8:	01b00100 	.inst	0x01b00100 ; undefined
    10dc:	000000c2 	.inst	0x000000c2 ; undefined
    10e0:	10679102 	adr	x2, d0300 <_freertos_vector_table+0xb94d8>
    10e4:	00000688 	.inst	0x00000688 ; undefined
    10e8:	6d01b001 	stp	d1, d12, [x0, #24]
    10ec:	02000004 	.inst	0x02000004 ; undefined
    10f0:	17005891 	b	fffffffffc017334 <_estack+0xfffffffff4007334>
    10f4:	00000674 	.inst	0x00000674 ; undefined
    10f8:	10018201 	adr	x1, 4138 <__module_entries_end-0x3ec8>
    10fc:	a0000002 	.inst	0xa0000002 ; undefined
    1100:	00000110 	.inst	0x00000110 ; undefined
    1104:	84000000 	ld1sb	{z0.s}, p0/z, [x0, z0.s, uxtw]
    1108:	00000000 	.inst	0x00000000 ; undefined
    110c:	01000000 	.inst	0x01000000 ; undefined
    1110:	000b199c 	.inst	0x000b199c ; undefined
    1114:	072c1000 	.inst	0x072c1000 ; undefined
    1118:	82010000 	.inst	0x82010000 ; undefined
    111c:	0000f201 	.inst	0x0000f201 ; undefined
    1120:	58910200 	ldr	x0, fffffffffff23160 <_estack+0xfffffffff7f13160>
    1124:	00064b10 	.inst	0x00064b10 ; undefined
    1128:	01820100 	.inst	0x01820100 ; undefined
    112c:	000000f2 	.inst	0x000000f2 ; undefined
    1130:	10509102 	adr	x2, a2350 <_freertos_vector_table+0x8b528>
    1134:	0000061a 	.inst	0x0000061a ; undefined
    1138:	c2018201 	.inst	0xc2018201 ; undefined
    113c:	02000000 	.inst	0x02000000 ; undefined
    1140:	88114f91 	stxr	w17, w17, [x28]
    1144:	01000006 	.inst	0x01000006 ; undefined
    1148:	046d0184 	add	z4.h, z12.h, z13.h
    114c:	91020000 	add	x0, x0, #0x80
    1150:	06fb1170 	.inst	0x06fb1170 ; undefined
    1154:	85010000 	.inst	0x85010000 ; undefined
    1158:	00002901 	.inst	0x00002901 ; undefined
    115c:	78910200 	ldursh	x0, [x16, #-240]
    1160:	0004d711 	.inst	0x0004d711 ; undefined
    1164:	01860100 	.inst	0x01860100 ; undefined
    1168:	00000102 	.inst	0x00000102 ; undefined
    116c:	00689102 	.inst	0x00689102 ; undefined
    1170:	0004c418 	.inst	0x0004c418 ; undefined
    1174:	01170100 	.inst	0x01170100 ; undefined
    1178:	000000d2 	.inst	0x000000d2 ; undefined
    117c:	00010fa0 	.inst	0x00010fa0 ; undefined
    1180:	00000000 	.inst	0x00000000 ; undefined
    1184:	00000100 	.inst	0x00000100 ; undefined
    1188:	00000000 	.inst	0x00000000 ; undefined
    118c:	3b109c01 	.inst	0x3b109c01 ; undefined
    1190:	01000007 	.inst	0x01000007 ; undefined
    1194:	02100117 	.inst	0x02100117 ; undefined
    1198:	91020000 	add	x0, x0, #0x80
    119c:	06891068 	.inst	0x06891068 ; undefined
    11a0:	17010000 	b	fffffffffc0411a0 <_estack+0xfffffffff40311a0>
    11a4:	0000d201 	.inst	0x0000d201 ; undefined
    11a8:	60910200 	.inst	0x60910200 ; undefined
    11ac:	00073a11 	.inst	0x00073a11 ; undefined
    11b0:	01190100 	.inst	0x01190100 ; undefined
    11b4:	00000473 	.inst	0x00000473 ; undefined
    11b8:	00789102 	.inst	0x00789102 ; undefined
    11bc:	0014c700 	.inst	0x0014c700 ; undefined
    11c0:	c5000400 	ld1sw	{z0.d}, p1/z, [x0, z0.d, uxtw]
    11c4:	08000003 	stxrb	w0, w3, [x0]
    11c8:	00008a01 	.inst	0x00008a01 ; undefined
    11cc:	10a60c00 	adr	x0, fffffffffff4d34c <_estack+0xfffffffff7f3d34c>
    11d0:	1ce00000 	ldr	s0, fffffffffffc11d0 <_estack+0xfffffffff7fb11d0>
    11d4:	00000001 	.inst	0x00000001 ; undefined
    11d8:	24ac0000 	cmphs	p0.s, p0/z, z0.s, #48
    11dc:	00000000 	.inst	0x00000000 ; undefined
    11e0:	07030000 	.inst	0x07030000 ; undefined
    11e4:	00020000 	.inst	0x00020000 ; undefined
    11e8:	02000000 	.inst	0x02000000 ; undefined
    11ec:	000034d8 	.inst	0x000034d8 ; undefined
    11f0:	07080300 	.inst	0x07080300 ; undefined
    11f4:	000001a2 	.inst	0x000001a2 ; undefined
    11f8:	a7070403 	.inst	0xa7070403 ; undefined
    11fc:	04000001 	add	z1.b, p0/m, z1.b, z0.b
    1200:	6e690504 	uhadd	v4.8h, v8.8h, v9.8h
    1204:	08030074 	stxrb	w3, w20, [x3]
    1208:	00024905 	.inst	0x00024905 ; undefined
    120c:	05080300 	.inst	0x05080300 ; undefined
    1210:	00000244 	.inst	0x00000244 ; undefined
    1214:	f2080103 	ands	x3, x8, #0x100000001000000
    1218:	03000000 	.inst	0x03000000 ; undefined
    121c:	011a0702 	.inst	0x011a0702 ; undefined
    1220:	01030000 	.inst	0x01030000 ; undefined
    1224:	0000f406 	.inst	0x0000f406 ; undefined
    1228:	05020300 	orr	z0.d, z0.d, #0x1ffffff
    122c:	0000015b 	.inst	0x0000015b ; undefined
    1230:	32070803 	orr	w3, w0, #0xe000000
    1234:	05000002 	orr	z2.s, z2.s, #0x1
    1238:	007a0608 	.inst	0x007a0608 ; undefined
    123c:	08070000 	stxrb	w7, w0, [x0]
    1240:	00000087 	.inst	0x00000087 ; undefined
    1244:	fb080103 	.inst	0xfb080103 ; undefined
    1248:	06000000 	.inst	0x06000000 ; undefined
    124c:	00000087 	.inst	0x00000087 ; undefined
    1250:	9d070803 	.inst	0x9d070803 ; undefined
    1254:	07000001 	.inst	0x07000001 ; undefined
    1258:	00008e08 	.inst	0x00008e08 ; undefined
    125c:	009a0600 	.inst	0x009a0600 ; undefined
    1260:	10030000 	adr	x0, 7260 <__module_entries_end-0xda0>
    1264:	0002be04 	.inst	0x0002be04 ; undefined
    1268:	01b40200 	.inst	0x01b40200 ; undefined
    126c:	30030000 	adr	x0, 726d <__module_entries_end-0xd93>
    1270:	00000057 	.inst	0x00000057 ; undefined
    1274:	0000ac08 	.inst	0x0000ac08 ; undefined
    1278:	0dd70200 	ld1	{v0.b}[0], [x16], x23
    127c:	31030000 	adds	w0, w0, #0xc0
    1280:	0000005e 	.inst	0x0000005e ; undefined
    1284:	0000bc06 	.inst	0x0000bc06 ; undefined
    1288:	02b50200 	.inst	0x02b50200 ; undefined
    128c:	33030000 	bfi	w0, w0, #29, #1
    1290:	0000003b 	.inst	0x0000003b ; undefined
    1294:	0000cc08 	.inst	0x0000cc08 ; undefined
    1298:	00cc0600 	.inst	0x00cc0600 ; undefined
    129c:	3d020000 	str	b0, [x0, #128]
    12a0:	03000000 	.inst	0x03000000 ; undefined
    12a4:	00003437 	.inst	0x00003437 ; undefined
    12a8:	00550200 	.inst	0x00550200 ; undefined
    12ac:	4d040000 	.inst	0x4d040000 ; undefined
    12b0:	000000f7 	.inst	0x000000f7 ; undefined
    12b4:	00fd0807 	.inst	0x00fd0807 ; undefined
    12b8:	08090000 	stxrb	w9, w0, [x0]
    12bc:	0a000001 	and	w1, w0, w0
    12c0:	0000007a 	.inst	0x0000007a ; undefined
    12c4:	017b0200 	.inst	0x017b0200 ; undefined
    12c8:	60050000 	.inst	0x60050000 ; undefined
    12cc:	00000029 	.inst	0x00000029 ; undefined
    12d0:	00010808 	.inst	0x00010808 ; undefined
    12d4:	02ea0200 	.inst	0x02ea0200 ; undefined
    12d8:	61050000 	.inst	0x61050000 ; undefined
    12dc:	00000049 	.inst	0x00000049 ; undefined
    12e0:	00011808 	.inst	0x00011808 ; undefined
    12e4:	01180600 	.inst	0x01180600 ; undefined
    12e8:	e9020000 	.inst	0xe9020000 ; undefined
    12ec:	05000002 	orr	z2.s, z2.s, #0x1
    12f0:	0000e162 	.inst	0x0000e162 ; undefined
    12f4:	012d0800 	.inst	0x012d0800 ; undefined
    12f8:	5d020000 	.inst	0x5d020000 ; undefined
    12fc:	05000003 	orr	z3.s, z3.s, #0x1
    1300:	0000e164 	.inst	0x0000e164 ; undefined
    1304:	013d0800 	.inst	0x013d0800 ; undefined
    1308:	3d060000 	str	b0, [x0, #384]
    130c:	0b000001 	add	w1, w0, w0
    1310:	00000488 	.inst	0x00000488 ; undefined
    1314:	9bb50628 	umaddl	x8, w17, w21, x1
    1318:	0c000001 	st4	{v1.8b-v4.8b}, [x0]
    131c:	00000377 	.inst	0x00000377 ; undefined
    1320:	013db806 	.inst	0x013db806 ; undefined
    1324:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    1328:	0000041d 	.inst	0x0000041d ; undefined
    132c:	019bb906 	.inst	0x019bb906 ; undefined
    1330:	0c080000 	.inst	0x0c080000 ; undefined
    1334:	00000460 	.inst	0x00000460 ; undefined
    1338:	019bba06 	.inst	0x019bba06 ; undefined
    133c:	0c100000 	.inst	0x0c100000 ; undefined
    1340:	0000038b 	.inst	0x0000038b ; undefined
    1344:	007abb06 	.inst	0x007abb06 ; undefined
    1348:	0c180000 	.inst	0x0c180000 ; undefined
    134c:	00000351 	.inst	0x00000351 ; undefined
    1350:	007abc06 	.inst	0x007abc06 ; undefined
    1354:	00200000 	.inst	0x00200000 ; NYI
    1358:	01520807 	.inst	0x01520807 ; undefined
    135c:	6c020000 	stnp	d0, d0, [x0, #32]
    1360:	06000003 	.inst	0x06000003 ; undefined
    1364:	000152bf 	.inst	0x000152bf ; undefined
    1368:	046b0b00 	.inst	0x046b0b00 ; undefined
    136c:	06180000 	.inst	0x06180000 ; undefined
    1370:	0001ddc1 	.inst	0x0001ddc1 ; undefined
    1374:	03770c00 	.inst	0x03770c00 ; undefined
    1378:	c4060000 	ld1sb	{z0.d}, p0/z, [x0, z6.d, uxtw]
    137c:	0000013d 	.inst	0x0000013d ; undefined
    1380:	041d0c00 	.inst	0x041d0c00 ; undefined
    1384:	c5060000 	ld1sw	{z0.d}, p0/z, [x0, z6.d, uxtw]
    1388:	0000019b 	.inst	0x0000019b ; undefined
    138c:	04600c08 	.inst	0x04600c08 ; undefined
    1390:	c6060000 	.inst	0xc6060000 ; undefined
    1394:	0000019b 	.inst	0x0000019b ; undefined
    1398:	68020010 	.inst	0x68020010 ; undefined
    139c:	06000003 	.inst	0x06000003 ; undefined
    13a0:	0001acc8 	.inst	0x0001acc8 ; undefined
    13a4:	04820b00 	.inst	0x04820b00 ; undefined
    13a8:	06280000 	.inst	0x06280000 ; undefined
    13ac:	000219cd 	.inst	0x000219cd ; undefined
    13b0:	03fe0c00 	.inst	0x03fe0c00 ; undefined
    13b4:	d0060000 	adrp	x0, c003000 <_estack+0x3ff3000>
    13b8:	0000012d 	.inst	0x0000012d ; undefined
    13bc:	04580c00 	orr	z0.h, p3/m, z0.h, z0.h
    13c0:	d1060000 	sub	x0, x0, #0x180
    13c4:	00000219 	.inst	0x00000219 ; undefined
    13c8:	03820c08 	.inst	0x03820c08 ; undefined
    13cc:	d2060000 	eor	x0, x0, #0x400000004000000
    13d0:	000001dd 	.inst	0x000001dd ; undefined
    13d4:	08070010 	stxrb	w7, w16, [x0]
    13d8:	000001a1 	.inst	0x000001a1 ; undefined
    13dc:	0003f702 	.inst	0x0003f702 ; undefined
    13e0:	e8d40600 	.inst	0xe8d40600 ; undefined
    13e4:	06000001 	.inst	0x06000001 ; undefined
    13e8:	0000021f 	.inst	0x0000021f ; undefined
    13ec:	000d5e02 	.inst	0x000d5e02 ; undefined
    13f0:	7a670700 	.inst	0x7a670700 ; undefined
    13f4:	06000000 	.inst	0x06000000 ; undefined
    13f8:	0000022f 	.inst	0x0000022f ; undefined
    13fc:	000f5a02 	.inst	0x000f5a02 ; undefined
    1400:	4a6d0700 	eon	w0, w24, w13, lsr #1
    1404:	07000002 	.inst	0x07000002 ; undefined
    1408:	00025008 	.inst	0x00025008 ; undefined
    140c:	01180d00 	.inst	0x01180d00 ; undefined
    1410:	025f0000 	.inst	0x025f0000 ; undefined
    1414:	7a0a0000 	sbcs	w0, w0, w10
    1418:	00000000 	.inst	0x00000000 ; undefined
    141c:	003b040e 	.inst	0x003b040e ; NYI
    1420:	7c070000 	stur	h0, [x0, #112]
    1424:	0000028a 	.inst	0x0000028a ; undefined
    1428:	0008f60f 	.inst	0x0008f60f ; undefined
    142c:	bf0f0000 	.inst	0xbf0f0000 ; undefined
    1430:	0100000d 	.inst	0x0100000d ; undefined
    1434:	00112b0f 	.inst	0x00112b0f ; undefined
    1438:	680f0200 	.inst	0x680f0200 ; undefined
    143c:	0300000a 	.inst	0x0300000a ; undefined
    1440:	000beb0f 	.inst	0x000beb0f ; undefined
    1444:	02000400 	.inst	0x02000400 ; undefined
    1448:	00000b07 	.inst	0x00000b07 ; undefined
    144c:	025f8207 	.inst	0x025f8207 ; undefined
    1450:	e70b0000 	.inst	0xe70b0000 ; undefined
    1454:	10000004 	adr	x4, 1454 <__module_entries_end-0x6bac>
    1458:	02ba8707 	.inst	0x02ba8707 ; undefined
    145c:	a30c0000 	.inst	0xa30c0000 ; undefined
    1460:	07000006 	.inst	0x07000006 ; undefined
    1464:	00011889 	.inst	0x00011889 ; undefined
    1468:	930c0000 	.inst	0x930c0000 ; undefined
    146c:	07000006 	.inst	0x07000006 ; undefined
    1470:	00013d8a 	.inst	0x00013d8a ; undefined
    1474:	02000800 	.inst	0x02000800 ; undefined
    1478:	000004ba 	.inst	0x000004ba ; undefined
    147c:	02958b07 	.inst	0x02958b07 ; undefined
    1480:	c80b0000 	stxr	w11, x0, [x0]
    1484:	1000000d 	adr	x13, 1484 <__module_entries_end-0x6b7c>
    1488:	02f69007 	.inst	0x02f69007 ; undefined
    148c:	cb0c0000 	sub	x0, x0, x12
    1490:	0700000f 	.inst	0x0700000f ; undefined
    1494:	00007a92 	.inst	0x00007a92 ; undefined
    1498:	c50c0000 	ld1sw	{z0.d}, p0/z, [x0, z12.d, uxtw]
    149c:	0700000c 	.inst	0x0700000c ; undefined
    14a0:	0000cc93 	.inst	0x0000cc93 ; undefined
    14a4:	dc0c0800 	.inst	0xdc0c0800 ; undefined
    14a8:	07000009 	.inst	0x07000009 ; undefined
    14ac:	0000cc94 	.inst	0x0000cc94 ; undefined
    14b0:	02000c00 	.inst	0x02000c00 ; undefined
    14b4:	00000ca1 	.inst	0x00000ca1 ; undefined
    14b8:	02c59507 	.inst	0x02c59507 ; undefined
    14bc:	f6060000 	.inst	0xf6060000 ; undefined
    14c0:	07000002 	.inst	0x07000002 ; undefined
    14c4:	00010808 	.inst	0x00010808 ; undefined
    14c8:	08a81000 	.inst	0x08a81000 ; undefined
    14cc:	01880000 	.inst	0x01880000 ; undefined
    14d0:	038f0125 	.inst	0x038f0125 ; undefined
    14d4:	73110000 	.inst	0x73110000 ; undefined
    14d8:	01000002 	.inst	0x01000002 ; undefined
    14dc:	038f0127 	.inst	0x038f0127 ; undefined
    14e0:	11000000 	add	w0, w0, #0x0
    14e4:	00001142 	.inst	0x00001142 ; undefined
    14e8:	a1012d01 	.inst	0xa1012d01 ; undefined
    14ec:	08000001 	stxrb	w0, w1, [x0]
    14f0:	00119011 	.inst	0x00119011 ; undefined
    14f4:	012e0100 	.inst	0x012e0100 ; undefined
    14f8:	000001a1 	.inst	0x000001a1 ; undefined
    14fc:	08911130 	stllrb	w16, [x9]
    1500:	2f010000 	.inst	0x2f010000 ; undefined
    1504:	00012d01 	.inst	0x00012d01 ; undefined
    1508:	6e115800 	ext	v0.16b, v0.16b, v17.16b, #11
    150c:	0100000e 	.inst	0x0100000e ; undefined
    1510:	03060130 	.inst	0x03060130 ; undefined
    1514:	11600000 	add	w0, w0, #0x800, lsl #12
    1518:	00000886 	.inst	0x00000886 ; undefined
    151c:	95013101 	bl	404d920 <_freertos_vector_table+0x4036af8>
    1520:	68000003 	.inst	0x68000003 ; undefined
    1524:	000e4f11 	.inst	0x000e4f11 ; undefined
    1528:	01460100 	.inst	0x01460100 ; undefined
    152c:	0000023f 	.inst	0x0000023f ; undefined
    1530:	0ba91178 	.inst	0x0ba91178 ; undefined
    1534:	5d010000 	.inst	0x5d010000 ; undefined
    1538:	0000d701 	.inst	0x0000d701 ; undefined
    153c:	19118000 	.inst	0x19118000 ; undefined
    1540:	0100000a 	.inst	0x0100000a ; undefined
    1544:	00b7015e 	.inst	0x00b7015e ; undefined
    1548:	00840000 	.inst	0x00840000 ; undefined
    154c:	01130807 	.inst	0x01130807 ; undefined
    1550:	87120000 	.inst	0x87120000 ; undefined
    1554:	a5000000 	ld1rqw	{z0.s}, p0/z, [x0, x0, lsl #2]
    1558:	13000003 	sbfx	w3, w0, #0, #1
    155c:	00000073 	.inst	0x00000073 ; undefined
    1560:	1214000f 	and	w15, w0, #0x1000
    1564:	0100000a 	.inst	0x0100000a ; undefined
    1568:	030c016b 	.inst	0x030c016b ; undefined
    156c:	6a140000 	ands	w0, w0, w20
    1570:	01000010 	.inst	0x01000010 ; undefined
    1574:	03a5016f 	.inst	0x03a5016f ; undefined
    1578:	b1060000 	adds	x0, x0, #0x180
    157c:	15000003 	b	4001588 <_freertos_vector_table+0x3fea760>
    1580:	00000e2c 	.inst	0x00000e2c ; undefined
    1584:	de017401 	.inst	0xde017401 ; undefined
    1588:	09000003 	.inst	0x09000003 ; undefined
    158c:	01576803 	.inst	0x01576803 ; undefined
    1590:	00000000 	.inst	0x00000000 ; undefined
    1594:	b1080700 	adds	x0, x24, #0x201
    1598:	08000003 	stxrb	w0, w3, [x0]
    159c:	000003d8 	.inst	0x000003d8 ; undefined
    15a0:	0003d806 	.inst	0x0003d806 ; undefined
    15a4:	021f1200 	.inst	0x021f1200 ; undefined
    15a8:	03f80000 	.inst	0x03f80000 ; undefined
    15ac:	73130000 	.inst	0x73130000 ; undefined
    15b0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    15b4:	094e1600 	.inst	0x094e1600 ; undefined
    15b8:	77010000 	.inst	0x77010000 ; undefined
    15bc:	0003e801 	.inst	0x0003e801 ; undefined
    15c0:	70030900 	adr	x0, 76e3 <__module_entries_end-0x91d>
    15c4:	00000157 	.inst	0x00000157 ; undefined
    15c8:	16000000 	b	fffffffff80015c8 <_estack+0xffffffffefff15c8>
    15cc:	000009b8 	.inst	0x000009b8 ; undefined
    15d0:	1f017801 	fmadd	s1, s0, s1, s30
    15d4:	09000002 	.inst	0x09000002 ; undefined
    15d8:	01583803 	.inst	0x01583803 ; undefined
    15dc:	00000000 	.inst	0x00000000 ; undefined
    15e0:	09ca1600 	.inst	0x09ca1600 ; undefined
    15e4:	79010000 	strh	w0, [x0, #128]
    15e8:	00021f01 	.inst	0x00021f01 ; undefined
    15ec:	60030900 	.inst	0x60030900 ; undefined
    15f0:	00000158 	.inst	0x00000158 ; undefined
    15f4:	16000000 	b	fffffffff80015f4 <_estack+0xffffffffefff15f4>
    15f8:	00000e9c 	.inst	0x00000e9c ; undefined
    15fc:	56017a01 	.inst	0x56017a01 ; undefined
    1600:	09000004 	.inst	0x09000004 ; undefined
    1604:	01588803 	.inst	0x01588803 ; undefined
    1608:	00000000 	.inst	0x00000000 ; undefined
    160c:	1f080700 	fmadd	s0, s24, s8, s1
    1610:	08000002 	stxrb	w0, w2, [x0]
    1614:	00000450 	.inst	0x00000450 ; undefined
    1618:	00045006 	.inst	0x00045006 ; undefined
    161c:	0b6e1600 	.inst	0x0b6e1600 ; undefined
    1620:	7b010000 	.inst	0x7b010000 ; undefined
    1624:	00045601 	.inst	0x00045601 ; undefined
    1628:	90030900 	adrp	x0, 6121000 <_freertos_vector_table+0x610a1d8>
    162c:	00000158 	.inst	0x00000158 ; undefined
    1630:	16000000 	b	fffffffff8001630 <_estack+0xffffffffefff1630>
    1634:	00000ac3 	.inst	0x00000ac3 ; undefined
    1638:	1f017c01 	fmadd	s1, s0, s1, s31
    163c:	09000002 	.inst	0x09000002 ; undefined
    1640:	01589803 	.inst	0x01589803 ; undefined
    1644:	00000000 	.inst	0x00000000 ; undefined
    1648:	0bb91600 	.inst	0x0bb91600 ; undefined
    164c:	80010000 	.inst	0x80010000 ; undefined
    1650:	00021f01 	.inst	0x00021f01 ; undefined
    1654:	c0030900 	.inst	0xc0030900 ; undefined
    1658:	00000158 	.inst	0x00000158 ; undefined
    165c:	16000000 	b	fffffffff800165c <_estack+0xffffffffefff165c>
    1660:	00000931 	.inst	0x00000931 ; undefined
    1664:	38018101 	sturb	w1, [x8, #24]
    1668:	09000001 	.inst	0x09000001 ; undefined
    166c:	0158e803 	.inst	0x0158e803 ; undefined
    1670:	00000000 	.inst	0x00000000 ; undefined
    1674:	0b541600 	add	w0, w16, w20, lsr #5
    1678:	87010000 	.inst	0x87010000 ; undefined
    167c:	00021f01 	.inst	0x00021f01 ; undefined
    1680:	f0030900 	adrp	x0, 6124000 <_freertos_vector_table+0x610d1d8>
    1684:	00000158 	.inst	0x00000158 ; undefined
    1688:	16000000 	b	fffffffff8001688 <_estack+0xffffffffefff1688>
    168c:	00001110 	.inst	0x00001110 ; undefined
    1690:	38018c01 	strb	w1, [x0, #24]!
    1694:	09000001 	.inst	0x09000001 ; undefined
    1698:	01591803 	.inst	0x01591803 ; undefined
    169c:	00000000 	.inst	0x00000000 ; undefined
    16a0:	0b151600 	add	w0, w16, w21, lsl #5
    16a4:	8d010000 	.inst	0x8d010000 ; undefined
    16a8:	00014801 	.inst	0x00014801 ; undefined
    16ac:	20030900 	.inst	0x20030900 ; undefined
    16b0:	00000159 	.inst	0x00000159 ; undefined
    16b4:	16000000 	b	fffffffff80016b4 <_estack+0xffffffffefff16b4>
    16b8:	00000900 	.inst	0x00000900 ; undefined
    16bc:	38018e01 	strb	w1, [x16, #24]!
    16c0:	09000001 	.inst	0x09000001 ; undefined
    16c4:	01592803 	.inst	0x01592803 ; undefined
    16c8:	00000000 	.inst	0x00000000 ; undefined
    16cc:	091f1600 	.inst	0x091f1600 ; undefined
    16d0:	8f010000 	.inst	0x8f010000 ; undefined
    16d4:	00012301 	.inst	0x00012301 ; undefined
    16d8:	30030900 	adr	x0, 77f9 <__module_entries_end-0x807>
    16dc:	00000159 	.inst	0x00000159 ; undefined
    16e0:	16000000 	b	fffffffff80016e0 <_estack+0xffffffffefff16e0>
    16e4:	00000f7e 	.inst	0x00000f7e ; undefined
    16e8:	38019001 	sturb	w1, [x0, #25]
    16ec:	09000001 	.inst	0x09000001 ; undefined
    16f0:	01593803 	.inst	0x01593803 ; undefined
    16f4:	00000000 	.inst	0x00000000 ; undefined
    16f8:	11e31600 	.inst	0x11e31600 ; undefined
    16fc:	91010000 	add	x0, x0, #0x40
    1700:	00012301 	.inst	0x00012301 ; undefined
    1704:	40030900 	.inst	0x40030900 ; undefined
    1708:	00000159 	.inst	0x00000159 ; undefined
    170c:	16000000 	b	fffffffff800170c <_estack+0xffffffffefff170c>
    1710:	00000e1c 	.inst	0x00000e1c ; undefined
    1714:	23019201 	.inst	0x23019201 ; undefined
    1718:	09000001 	.inst	0x09000001 ; undefined
    171c:	01594803 	.inst	0x01594803 ; undefined
    1720:	00000000 	.inst	0x00000000 ; undefined
    1724:	0d511600 	.inst	0x0d511600 ; undefined
    1728:	93010000 	.inst	0x93010000 ; undefined
    172c:	00012d01 	.inst	0x00012d01 ; undefined
    1730:	50030900 	adr	x0, 7852 <__module_entries_end-0x7ae>
    1734:	00000159 	.inst	0x00000159 ; undefined
    1738:	16000000 	b	fffffffff8001738 <_estack+0xffffffffefff1738>
    173c:	00000cb0 	.inst	0x00000cb0 ; undefined
    1740:	48019401 	stlxrh	w1, w1, [x0]
    1744:	09000001 	.inst	0x09000001 ; undefined
    1748:	01595803 	.inst	0x01595803 ; undefined
    174c:	00000000 	.inst	0x00000000 ; undefined
    1750:	0f221600 	ssra	v0.2s, v16.2s, #30
    1754:	95010000 	bl	4041754 <_freertos_vector_table+0x402a92c>
    1758:	00022f01 	.inst	0x00022f01 ; undefined
    175c:	60030900 	.inst	0x60030900 ; undefined
    1760:	00000159 	.inst	0x00000159 ; undefined
    1764:	16000000 	b	fffffffff8001764 <_estack+0xffffffffefff1764>
    1768:	00001157 	.inst	0x00001157 ; undefined
    176c:	38019f01 	strb	w1, [x24, #25]!
    1770:	09000001 	.inst	0x09000001 ; undefined
    1774:	01596803 	.inst	0x01596803 ; undefined
    1778:	00000000 	.inst	0x00000000 ; undefined
    177c:	10f11700 	adr	x0, fffffffffffe3a5c <_estack+0xfffffffff7fd3a5c>
    1780:	54010000 	b.eq	3780 <__module_entries_end-0x4880>  // b.none
    1784:	01402012 	.inst	0x01402012 ; undefined
    1788:	00000000 	.inst	0x00000000 ; undefined
    178c:	00016c00 	.inst	0x00016c00 ; undefined
    1790:	00000000 	.inst	0x00000000 ; undefined
    1794:	1b9c0100 	.inst	0x1b9c0100 ; undefined
    1798:	18000006 	ldr	w6, 1798 <__module_entries_end-0x6868>
    179c:	00001029 	.inst	0x00001029 ; undefined
    17a0:	3d125401 	str	b1, [x0, #1173]
    17a4:	02000001 	.inst	0x02000001 ; undefined
    17a8:	b5186891 	cbnz	x17, 324b8 <_freertos_vector_table+0x1b690>
    17ac:	0100000f 	.inst	0x0100000f ; undefined
    17b0:	01281254 	.inst	0x01281254 ; undefined
    17b4:	91020000 	add	x0, x0, #0x80
    17b8:	11361660 	add	w0, w19, #0xd85
    17bc:	56010000 	.inst	0x56010000 ; undefined
    17c0:	00013d12 	.inst	0x00013d12 ; undefined
    17c4:	70910200 	adr	x0, fffffffffff23807 <_estack+0xfffffffff7f13807>
    17c8:	000b4416 	.inst	0x000b4416 ; undefined
    17cc:	12570100 	.inst	0x12570100 ; undefined
    17d0:	0000014d 	.inst	0x0000014d ; undefined
    17d4:	00789102 	.inst	0x00789102 ; undefined
    17d8:	000b8819 	.inst	0x000b8819 ; undefined
    17dc:	12360100 	and	w0, w8, #0x400
    17e0:	00000118 	.inst	0x00000118 ; undefined
    17e4:	00013fb0 	.inst	0x00013fb0 ; undefined
    17e8:	00000000 	.inst	0x00000000 ; undefined
    17ec:	00000070 	.inst	0x00000070 ; undefined
    17f0:	00000000 	.inst	0x00000000 ; undefined
    17f4:	066b9c01 	.inst	0x066b9c01 ; undefined
    17f8:	b9180000 	str	w0, [x0, #6144]
    17fc:	0100000d 	.inst	0x0100000d ; undefined
    1800:	022f1236 	.inst	0x022f1236 ; undefined
    1804:	91020000 	add	x0, x0, #0x80
    1808:	11511668 	add	w8, w19, #0x445, lsl #12
    180c:	38010000 	sturb	w0, [x0, #16]
    1810:	0003d812 	.inst	0x0003d812 ; undefined
    1814:	70910200 	adr	x0, fffffffffff23857 <_estack+0xfffffffff7f13857>
    1818:	0007cc16 	.inst	0x0007cc16 ; undefined
    181c:	12390100 	and	w0, w8, #0x80
    1820:	00000118 	.inst	0x00000118 ; undefined
    1824:	00789102 	.inst	0x00789102 ; undefined
    1828:	000e851a 	.inst	0x000e851a ; undefined
    182c:	11dd0100 	.inst	0x11dd0100 ; undefined
    1830:	00013e58 	.inst	0x00013e58 ; undefined
    1834:	00000000 	.inst	0x00000000 ; undefined
    1838:	00000158 	.inst	0x00000158 ; undefined
    183c:	00000000 	.inst	0x00000000 ; undefined
    1840:	06d59c01 	.inst	0x06d59c01 ; undefined
    1844:	ab180000 	adds	x0, x0, x24
    1848:	0100000d 	.inst	0x0100000d ; undefined
    184c:	022f11dd 	.inst	0x022f11dd ; undefined
    1850:	91020000 	add	x0, x0, #0x80
    1854:	08421858 	ldxrb	w24, [x2]
    1858:	dd010000 	.inst	0xdd010000 ; undefined
    185c:	0006d511 	.inst	0x0006d511 ; undefined
    1860:	50910200 	adr	x0, fffffffffff238a2 <_estack+0xfffffffff7f138a2>
    1864:	00115116 	.inst	0x00115116 ; undefined
    1868:	11df0100 	.inst	0x11df0100 ; undefined
    186c:	000003d8 	.inst	0x000003d8 ; undefined
    1870:	16789102 	b	fffffffff9e25c78 <_estack+0xfffffffff1e15c78>
    1874:	00000960 	.inst	0x00000960 ; undefined
    1878:	ac11e001 	stnp	q1, q24, [x0, #560]
    187c:	02000000 	.inst	0x02000000 ; undefined
    1880:	16166f91 	b	fffffffff859d6c4 <_estack+0xfffffffff058d6c4>
    1884:	01000008 	.inst	0x01000008 ; undefined
    1888:	012d11e1 	.inst	0x012d11e1 ; undefined
    188c:	91020000 	add	x0, x0, #0x80
    1890:	08070070 	stxrb	w7, w16, [x3]
    1894:	00000118 	.inst	0x00000118 ; undefined
    1898:	00098b19 	.inst	0x00098b19 ; undefined
    189c:	11610100 	add	w0, w8, #0x840, lsl #12
    18a0:	00000118 	.inst	0x00000118 ; undefined
    18a4:	00013c54 	.inst	0x00013c54 ; undefined
    18a8:	00000000 	.inst	0x00000000 ; undefined
    18ac:	00000204 	.inst	0x00000204 ; undefined
    18b0:	00000000 	.inst	0x00000000 ; undefined
    18b4:	07859c01 	.inst	0x07859c01 ; undefined
    18b8:	ab180000 	adds	x0, x0, x24
    18bc:	0100000d 	.inst	0x0100000d ; undefined
    18c0:	022f1161 	.inst	0x022f1161 ; undefined
    18c4:	91020000 	add	x0, x0, #0x80
    18c8:	0ee31858 	.inst	0x0ee31858 ; undefined
    18cc:	61010000 	.inst	0x61010000 ; undefined
    18d0:	0000cc11 	.inst	0x0000cc11 ; undefined
    18d4:	54910200 	b.eq	fffffffffff23914 <_estack+0xfffffffff7f13914>  // b.none
    18d8:	000d6b18 	.inst	0x000d6b18 ; undefined
    18dc:	11610100 	add	w0, w8, #0x840, lsl #12
    18e0:	0000028a 	.inst	0x0000028a ; undefined
    18e4:	18509102 	ldr	w2, a2b04 <_freertos_vector_table+0x8bcdc>
    18e8:	00000cff 	.inst	0x00000cff ; undefined
    18ec:	85116101 	ldff1w	{z1.s}, p0/z, [x8, z17.s, uxtw]
    18f0:	02000007 	.inst	0x02000007 ; undefined
    18f4:	42184891 	.inst	0x42184891 ; undefined
    18f8:	01000008 	.inst	0x01000008 ; undefined
    18fc:	06d51161 	.inst	0x06d51161 ; undefined
    1900:	91020000 	add	x0, x0, #0x80
    1904:	11511640 	add	w0, w18, #0x445, lsl #12
    1908:	63010000 	.inst	0x63010000 ; undefined
    190c:	0003d811 	.inst	0x0003d811 ; undefined
    1910:	70910200 	adr	x0, fffffffffff23953 <_estack+0xfffffffff7f13953>
    1914:	00096016 	.inst	0x00096016 ; undefined
    1918:	11640100 	add	w0, w8, #0x900, lsl #12
    191c:	000000ac 	.inst	0x000000ac ; undefined
    1920:	16679102 	b	fffffffff99e5d28 <_estack+0xfffffffff19d5d28>
    1924:	000007cc 	.inst	0x000007cc ; undefined
    1928:	18116501 	ldr	w1, 245c8 <_freertos_vector_table+0xd7a0>
    192c:	02000001 	.inst	0x02000001 ; undefined
    1930:	16167891 	b	fffffffff859fb74 <_estack+0xfffffffff058fb74>
    1934:	01000008 	.inst	0x01000008 ; undefined
    1938:	012d1166 	.inst	0x012d1166 ; undefined
    193c:	91020000 	add	x0, x0, #0x80
    1940:	08070068 	stxrb	w7, w8, [x3]
    1944:	000000cc 	.inst	0x000000cc ; undefined
    1948:	000a2719 	.inst	0x000a2719 ; undefined
    194c:	10f70100 	adr	x0, fffffffffffef96c <_estack+0xfffffffff7fdf96c>
    1950:	00000118 	.inst	0x00000118 ; undefined
    1954:	00013ab0 	.inst	0x00013ab0 ; undefined
    1958:	00000000 	.inst	0x00000000 ; undefined
    195c:	000001a4 	.inst	0x000001a4 ; undefined
    1960:	00000000 	.inst	0x00000000 ; undefined
    1964:	08179c01 	stlxrb	w23, w1, [x0]
    1968:	ab180000 	adds	x0, x0, x24
    196c:	0100000d 	.inst	0x0100000d ; undefined
    1970:	022f10f7 	.inst	0x022f10f7 ; undefined
    1974:	91020000 	add	x0, x0, #0x80
    1978:	0ee31858 	.inst	0x0ee31858 ; undefined
    197c:	f7010000 	.inst	0xf7010000 ; undefined
    1980:	0000cc10 	.inst	0x0000cc10 ; undefined
    1984:	54910200 	b.eq	fffffffffff239c4 <_estack+0xfffffffff7f139c4>  // b.none
    1988:	000d6b18 	.inst	0x000d6b18 ; undefined
    198c:	10f70100 	adr	x0, fffffffffffef9ac <_estack+0xfffffffff7fdf9ac>
    1990:	0000028a 	.inst	0x0000028a ; undefined
    1994:	18509102 	ldr	w2, a2bb4 <_freertos_vector_table+0x8bd8c>
    1998:	00000cff 	.inst	0x00000cff ; undefined
    199c:	8510f701 	prfw	pldl1strm, p5, [z24.s, #64]
    19a0:	02000007 	.inst	0x02000007 ; undefined
    19a4:	51164891 	sub	w17, w4, #0x592
    19a8:	01000011 	.inst	0x01000011 ; undefined
    19ac:	03d810f9 	.inst	0x03d810f9 ; undefined
    19b0:	91020000 	add	x0, x0, #0x80
    19b4:	07cc1670 	.inst	0x07cc1670 ; undefined
    19b8:	fa010000 	sbcs	x0, x0, x1
    19bc:	00011810 	.inst	0x00011810 ; undefined
    19c0:	78910200 	ldursh	x0, [x16, #-240]
    19c4:	00096016 	.inst	0x00096016 ; undefined
    19c8:	10fb0100 	adr	x0, ffffffffffff79e8 <_estack+0xfffffffff7fe79e8>
    19cc:	000000ac 	.inst	0x000000ac ; undefined
    19d0:	006f9102 	.inst	0x006f9102 ; undefined
    19d4:	000c0519 	.inst	0x000c0519 ; undefined
    19d8:	10a70100 	adr	x0, fffffffffff4f9f8 <_estack+0xfffffffff7f3f9f8>
    19dc:	00000118 	.inst	0x00000118 ; undefined
    19e0:	00013990 	.inst	0x00013990 ; undefined
    19e4:	00000000 	.inst	0x00000000 ; undefined
    19e8:	00000120 	.inst	0x00000120 ; undefined
    19ec:	00000000 	.inst	0x00000000 ; undefined
    19f0:	08859c01 	stlrb	w1, [x0]
    19f4:	ae180000 	.inst	0xae180000 ; undefined
    19f8:	0100000a 	.inst	0x0100000a ; undefined
    19fc:	00cc10a7 	.inst	0x00cc10a7 ; undefined
    1a00:	91020000 	add	x0, x0, #0x80
    1a04:	08cb186c 	ldlarb	w12, [x3]
    1a08:	a7010000 	.inst	0xa7010000 ; undefined
    1a0c:	0000cc10 	.inst	0x0000cc10 ; undefined
    1a10:	68910200 	.inst	0x68910200 ; undefined
    1a14:	000f4518 	.inst	0x000f4518 ; undefined
    1a18:	10a70100 	adr	x0, fffffffffff4fa38 <_estack+0xfffffffff7f3fa38>
    1a1c:	00000785 	.inst	0x00000785 ; undefined
    1a20:	18609102 	ldr	w2, c2c40 <_freertos_vector_table+0xabe18>
    1a24:	00001029 	.inst	0x00001029 ; undefined
    1a28:	3d10a701 	str	b1, [x24, #1065]
    1a2c:	02000001 	.inst	0x02000001 ; undefined
    1a30:	cc165891 	.inst	0xcc165891 ; undefined
    1a34:	01000007 	.inst	0x01000007 ; undefined
    1a38:	011810a9 	.inst	0x011810a9 ; undefined
    1a3c:	91020000 	add	x0, x0, #0x80
    1a40:	48190078 	stxrh	w25, w24, [x3]
    1a44:	0100000c 	.inst	0x0100000c ; undefined
    1a48:	00cc1063 	.inst	0x00cc1063 ; undefined
    1a4c:	38b40000 	ldaddab	w20, w0, [x0]
    1a50:	00000001 	.inst	0x00000001 ; undefined
    1a54:	00dc0000 	.inst	0x00dc0000 ; undefined
    1a58:	00000000 	.inst	0x00000000 ; undefined
    1a5c:	9c010000 	ldr	q0, 3a5c <__module_entries_end-0x45a4>
    1a60:	000008d5 	.inst	0x000008d5 ; undefined
    1a64:	000a5618 	.inst	0x000a5618 ; undefined
    1a68:	10630100 	adr	x0, c7a88 <_freertos_vector_table+0xb0c60>
    1a6c:	00000118 	.inst	0x00000118 ; undefined
    1a70:	18689102 	ldr	w2, d2c90 <_freertos_vector_table+0xbbe68>
    1a74:	00001029 	.inst	0x00001029 ; undefined
    1a78:	3d106301 	str	b1, [x24, #1048]
    1a7c:	02000001 	.inst	0x02000001 ; undefined
    1a80:	3b166091 	.inst	0x3b166091 ; undefined
    1a84:	01000002 	.inst	0x01000002 ; undefined
    1a88:	00cc1065 	.inst	0x00cc1065 ; undefined
    1a8c:	91020000 	add	x0, x0, #0x80
    1a90:	731b007c 	.inst	0x731b007c ; undefined
    1a94:	0100000d 	.inst	0x0100000d ; undefined
    1a98:	013d1042 	.inst	0x013d1042 ; undefined
    1a9c:	38680000 	ldaddlb	w8, w0, [x0]
    1aa0:	00000001 	.inst	0x00000001 ; undefined
    1aa4:	004c0000 	.inst	0x004c0000 ; undefined
    1aa8:	00000000 	.inst	0x00000000 ; undefined
    1aac:	9c010000 	ldr	q0, 3aac <__module_entries_end-0x4554>
    1ab0:	00000907 	.inst	0x00000907 ; undefined
    1ab4:	0007cb16 	.inst	0x0007cb16 ; undefined
    1ab8:	10440100 	adr	x0, 89ad8 <_freertos_vector_table+0x72cb0>
    1abc:	0000013d 	.inst	0x0000013d ; undefined
    1ac0:	00789102 	.inst	0x00789102 ; undefined
    1ac4:	000cd51c 	.inst	0x000cd51c ; undefined
    1ac8:	0e330100 	saddl	v0.8h, v8.8b, v19.8b
    1acc:	000137ec 	.inst	0x000137ec ; undefined
    1ad0:	00000000 	.inst	0x00000000 ; undefined
    1ad4:	0000007c 	.inst	0x0000007c ; undefined
    1ad8:	00000000 	.inst	0x00000000 ; undefined
    1adc:	09359c01 	.inst	0x09359c01 ; undefined
    1ae0:	51160000 	sub	w0, w0, #0x580
    1ae4:	01000011 	.inst	0x01000011 ; undefined
    1ae8:	03d80e35 	.inst	0x03d80e35 ; undefined
    1aec:	91020000 	add	x0, x0, #0x80
    1af0:	70170078 	adr	x24, 2faff <_freertos_vector_table+0x18cd7>
    1af4:	01000010 	.inst	0x01000010 ; undefined
    1af8:	37c00dfd 	tbnz	w29, #24, 1cb4 <__module_entries_end-0x634c>
    1afc:	00000001 	.inst	0x00000001 ; undefined
    1b00:	002c0000 	.inst	0x002c0000 ; NYI
    1b04:	00000000 	.inst	0x00000000 ; undefined
    1b08:	9c010000 	ldr	q0, 3b08 <__module_entries_end-0x44f8>
    1b0c:	00000963 	.inst	0x00000963 ; undefined
    1b10:	00115118 	.inst	0x00115118 ; undefined
    1b14:	0dfd0100 	ld2	{v0.b, v1.b}[0], [x8], x29
    1b18:	000003d8 	.inst	0x000003d8 ; undefined
    1b1c:	00789102 	.inst	0x00789102 ; undefined
    1b20:	0011ad17 	.inst	0x0011ad17 ; undefined
    1b24:	0d250100 	.inst	0x0d250100 ; undefined
    1b28:	000136f8 	.inst	0x000136f8 ; undefined
    1b2c:	00000000 	.inst	0x00000000 ; undefined
    1b30:	000000c8 	.inst	0x000000c8 ; undefined
    1b34:	00000000 	.inst	0x00000000 ; undefined
    1b38:	09c49c01 	.inst	0x09c49c01 ; undefined
    1b3c:	001d0000 	.inst	0x001d0000 ; undefined
    1b40:	00000137 	.inst	0x00000137 ; undefined
    1b44:	b4000000 	cbz	x0, 1b44 <__module_entries_end-0x64bc>
    1b48:	00000000 	.inst	0x00000000 ; undefined
    1b4c:	16000000 	b	fffffffff8001b4c <_estack+0xffffffffefff1b4c>
    1b50:	00000c3b 	.inst	0x00000c3b ; undefined
    1b54:	180d2c01 	ldr	w1, 1c0d4 <_freertos_vector_table+0x52ac>
    1b58:	02000001 	.inst	0x02000001 ; undefined
    1b5c:	381d7891 	sttrb	w17, [x4, #-41]
    1b60:	00000137 	.inst	0x00000137 ; undefined
    1b64:	68000000 	.inst	0x68000000 ; undefined
    1b68:	00000000 	.inst	0x00000000 ; undefined
    1b6c:	16000000 	b	fffffffff8001b6c <_estack+0xffffffffefff1b6c>
    1b70:	00001151 	.inst	0x00001151 ; undefined
    1b74:	d80d3a01 	prfm	pldl1strm, 1c2b4 <_freertos_vector_table+0x548c>
    1b78:	02000003 	.inst	0x02000003 ; undefined
    1b7c:	00007091 	.inst	0x00007091 ; undefined
    1b80:	11781700 	add	w0, w24, #0xe05, lsl #12
    1b84:	05010000 	orr	z0.s, z0.s, #0x1
    1b88:	01363c0d 	.inst	0x01363c0d ; undefined
    1b8c:	00000000 	.inst	0x00000000 ; undefined
    1b90:	0000bc00 	.inst	0x0000bc00 ; undefined
    1b94:	00000000 	.inst	0x00000000 ; undefined
    1b98:	f29c0100 	movk	x0, #0xe008
    1b9c:	16000009 	b	fffffffff8001bc0 <_estack+0xffffffffefff1bc0>
    1ba0:	00000891 	.inst	0x00000891 ; undefined
    1ba4:	2d0d0701 	stp	s1, s1, [x24, #104]
    1ba8:	02000001 	.inst	0x02000001 ; undefined
    1bac:	17007891 	b	fffffffffc01fdf0 <_estack+0xfffffffff400fdf0>
    1bb0:	00000c2f 	.inst	0x00000c2f ; undefined
    1bb4:	100c3b01 	adr	x1, 1a314 <_freertos_vector_table+0x34ec>
    1bb8:	00000136 	.inst	0x00000136 ; undefined
    1bbc:	2c000000 	stnp	s0, s0, [x0]
    1bc0:	00000000 	.inst	0x00000000 ; undefined
    1bc4:	01000000 	.inst	0x01000000 ; undefined
    1bc8:	000a209c 	.inst	0x000a209c ; undefined
    1bcc:	02521800 	.inst	0x02521800 ; undefined
    1bd0:	3b010000 	.inst	0x3b010000 ; undefined
    1bd4:	00007a0c 	.inst	0x00007a0c ; undefined
    1bd8:	78910200 	ldursh	x0, [x16, #-240]
    1bdc:	0f6d1e00 	.inst	0x0f6d1e00 ; undefined
    1be0:	04010000 	sub	z0.b, p0/m, z0.b, z0.b
    1be4:	0135f80c 	.inst	0x0135f80c ; undefined
    1be8:	00000000 	.inst	0x00000000 ; undefined
    1bec:	00001800 	.inst	0x00001800 ; undefined
    1bf0:	00000000 	.inst	0x00000000 ; undefined
    1bf4:	199c0100 	.inst	0x199c0100 ; undefined
    1bf8:	00000efa 	.inst	0x00000efa ; undefined
    1bfc:	180bc701 	ldr	w1, 194dc <_freertos_vector_table+0x26b4>
    1c00:	14000001 	b	1c04 <__module_entries_end-0x63fc>
    1c04:	00000135 	.inst	0x00000135 ; undefined
    1c08:	e4000000 	.inst	0xe4000000 ; undefined
    1c0c:	00000000 	.inst	0x00000000 ; undefined
    1c10:	01000000 	.inst	0x01000000 ; undefined
    1c14:	000aab9c 	.inst	0x000aab9c ; undefined
    1c18:	0d1c1800 	.inst	0x0d1c1800 ; undefined
    1c1c:	c7010000 	.inst	0xc7010000 ; undefined
    1c20:	000ab10b 	.inst	0x000ab10b ; undefined
    1c24:	68910200 	.inst	0x68910200 ; undefined
    1c28:	00102818 	.inst	0x00102818 ; undefined
    1c2c:	0bc70100 	.inst	0x0bc70100 ; undefined
    1c30:	00000abc 	.inst	0x00000abc ; undefined
    1c34:	16609102 	b	fffffffff982603c <_estack+0xfffffffff181603c>
    1c38:	000007cc 	.inst	0x000007cc ; undefined
    1c3c:	180bc901 	ldr	w1, 1955c <_freertos_vector_table+0x2734>
    1c40:	02000001 	.inst	0x02000001 ; undefined
    1c44:	281d7891 	stnp	w17, w30, [x4, #232]
    1c48:	00000135 	.inst	0x00000135 ; undefined
    1c4c:	c0000000 	.inst	0xc0000000 ; undefined
    1c50:	00000000 	.inst	0x00000000 ; undefined
    1c54:	16000000 	b	fffffffff8001c54 <_estack+0xffffffffefff1c54>
    1c58:	00000b44 	.inst	0x00000b44 ; undefined
    1c5c:	4d0bd101 	.inst	0x4d0bd101 ; undefined
    1c60:	02000001 	.inst	0x02000001 ; undefined
    1c64:	00007091 	.inst	0x00007091 ; undefined
    1c68:	02ba0807 	.inst	0x02ba0807 ; undefined
    1c6c:	ab060000 	adds	x0, x0, x6
    1c70:	0700000a 	.inst	0x0700000a ; undefined
    1c74:	00013d08 	.inst	0x00013d08 ; undefined
    1c78:	0ab60600 	bic	w0, w16, w22, asr #1
    1c7c:	761f0000 	.inst	0x761f0000 ; undefined
    1c80:	01000009 	.inst	0x01000009 ; undefined
    1c84:	34d80bbf 	cbz	wzr, fffffffffffb1df8 <_estack+0xfffffffff7fa1df8>
    1c88:	00000001 	.inst	0x00000001 ; undefined
    1c8c:	003c0000 	.inst	0x003c0000 ; NYI
    1c90:	00000000 	.inst	0x00000000 ; undefined
    1c94:	9c010000 	ldr	q0, 3c94 <__module_entries_end-0x436c>
    1c98:	00000aef 	.inst	0x00000aef ; undefined
    1c9c:	000d1c18 	.inst	0x000d1c18 ; undefined
    1ca0:	0bbf0100 	.inst	0x0bbf0100 ; undefined
    1ca4:	00000ab1 	.inst	0x00000ab1 ; undefined
    1ca8:	00789102 	.inst	0x00789102 ; undefined
    1cac:	00100619 	.inst	0x00100619 ; undefined
    1cb0:	0b920100 	add	w0, w8, w18, asr #0
    1cb4:	00000118 	.inst	0x00000118 ; undefined
    1cb8:	000133e4 	.inst	0x000133e4 ; undefined
    1cbc:	00000000 	.inst	0x00000000 ; undefined
    1cc0:	000000f4 	.inst	0x000000f4 ; undefined
    1cc4:	00000000 	.inst	0x00000000 ; undefined
    1cc8:	0b4e9c01 	.inst	0x0b4e9c01 ; undefined
    1ccc:	8f180000 	.inst	0x8f180000 ; undefined
    1cd0:	01000011 	.inst	0x01000011 ; undefined
    1cd4:	02190b92 	.inst	0x02190b92 ; undefined
    1cd8:	91020000 	add	x0, x0, #0x80
    1cdc:	03771868 	.inst	0x03771868 ; undefined
    1ce0:	92010000 	and	x0, x0, #0x8000000080000000
    1ce4:	00014d0b 	.inst	0x00014d0b ; undefined
    1ce8:	60910200 	.inst	0x60910200 ; undefined
    1cec:	000a3a16 	.inst	0x000a3a16 ; undefined
    1cf0:	0b940100 	add	w0, w8, w20, asr #0
    1cf4:	000003d8 	.inst	0x000003d8 ; undefined
    1cf8:	16709102 	b	fffffffff9c26100 <_estack+0xfffffffff1c16100>
    1cfc:	000007cc 	.inst	0x000007cc ; undefined
    1d00:	180b9501 	ldr	w1, 18fa0 <_freertos_vector_table+0x2178>
    1d04:	02000001 	.inst	0x02000001 ; undefined
    1d08:	19007891 	.inst	0x19007891 ; undefined
    1d0c:	00000bd2 	.inst	0x00000bd2 ; undefined
    1d10:	180b4e01 	ldr	w1, 186d0 <_freertos_vector_table+0x18a8>
    1d14:	d0000001 	adrp	x1, 3000 <__module_entries_end-0x5000>
    1d18:	00000132 	.inst	0x00000132 ; undefined
    1d1c:	14000000 	b	1d1c <__module_entries_end-0x62e4>
    1d20:	00000001 	.inst	0x00000001 ; undefined
    1d24:	01000000 	.inst	0x01000000 ; undefined
    1d28:	000b9e9c 	.inst	0x000b9e9c ; undefined
    1d2c:	09131800 	.inst	0x09131800 ; undefined
    1d30:	4e010000 	tbl	v0.16b, {v0.16b}, v1.16b
    1d34:	000ba40b 	.inst	0x000ba40b ; undefined
    1d38:	68910200 	.inst	0x68910200 ; undefined
    1d3c:	000a3a16 	.inst	0x000a3a16 ; undefined
    1d40:	0b500100 	add	w0, w8, w16, lsr #0
    1d44:	000003d8 	.inst	0x000003d8 ; undefined
    1d48:	16709102 	b	fffffffff9c26150 <_estack+0xfffffffff1c16150>
    1d4c:	000007cc 	.inst	0x000007cc ; undefined
    1d50:	180b5101 	ldr	w1, 18770 <_freertos_vector_table+0x1948>
    1d54:	02000001 	.inst	0x02000001 ; undefined
    1d58:	07007891 	.inst	0x07007891 ; undefined
    1d5c:	00022a08 	.inst	0x00022a08 ; undefined
    1d60:	0b9e0600 	add	w0, w16, w30, asr #1
    1d64:	e71a0000 	.inst	0xe71a0000 ; undefined
    1d68:	0100000f 	.inst	0x0100000f ; undefined
    1d6c:	32700b15 	.inst	0x32700b15 ; undefined
    1d70:	00000001 	.inst	0x00000001 ; undefined
    1d74:	00600000 	.inst	0x00600000 ; undefined
    1d78:	00000000 	.inst	0x00000000 ; undefined
    1d7c:	9c010000 	ldr	q0, 3d7c <__module_entries_end-0x4284>
    1d80:	00000bf5 	.inst	0x00000bf5 ; undefined
    1d84:	00091318 	.inst	0x00091318 ; undefined
    1d88:	0b150100 	add	w0, w8, w21
    1d8c:	00000450 	.inst	0x00000450 ; undefined
    1d90:	18789102 	ldr	w2, f2fb0 <_freertos_vector_table+0xdc188>
    1d94:	00000377 	.inst	0x00000377 ; undefined
    1d98:	4d0b1501 	.inst	0x4d0b1501 ; undefined
    1d9c:	02000001 	.inst	0x02000001 ; undefined
    1da0:	29187091 	stp	w17, w28, [x4, #192]
    1da4:	01000010 	.inst	0x01000010 ; undefined
    1da8:	014d0b15 	.inst	0x014d0b15 ; undefined
    1dac:	91020000 	add	x0, x0, #0x80
    1db0:	391a0068 	strb	w8, [x3, #1664]
    1db4:	0100000e 	.inst	0x0100000e ; undefined
    1db8:	322c0b04 	orr	w4, w24, #0x700000
    1dbc:	00000001 	.inst	0x00000001 ; undefined
    1dc0:	00440000 	.inst	0x00440000 ; undefined
    1dc4:	00000000 	.inst	0x00000000 ; undefined
    1dc8:	9c010000 	ldr	q0, 3dc8 <__module_entries_end-0x4238>
    1dcc:	00000c32 	.inst	0x00000c32 ; undefined
    1dd0:	00091318 	.inst	0x00091318 ; undefined
    1dd4:	0b040100 	add	w0, w8, w4
    1dd8:	0000045b 	.inst	0x0000045b ; undefined
    1ddc:	18789102 	ldr	w2, f2ffc <_freertos_vector_table+0xdc1d4>
    1de0:	00001029 	.inst	0x00001029 ; undefined
    1de4:	4d0b0401 	.inst	0x4d0b0401 ; undefined
    1de8:	02000001 	.inst	0x02000001 ; undefined
    1dec:	1f007091 	fmadd	s17, s4, s0, s28
    1df0:	00000e09 	.inst	0x00000e09 ; undefined
    1df4:	4c0ac901 	.inst	0x4c0ac901 ; undefined
    1df8:	00000131 	.inst	0x00000131 ; undefined
    1dfc:	e0000000 	.inst	0xe0000000 ; undefined
    1e00:	00000000 	.inst	0x00000000 ; undefined
    1e04:	01000000 	.inst	0x01000000 ; undefined
    1e08:	000c939c 	.inst	0x000c939c ; undefined
    1e0c:	31841d00 	.inst	0x31841d00 ; undefined
    1e10:	00000001 	.inst	0x00000001 ; undefined
    1e14:	009c0000 	.inst	0x009c0000 ; undefined
    1e18:	00000000 	.inst	0x00000000 ; undefined
    1e1c:	36160000 	tbz	w0, #2, ffffffffffffde1c <_estack+0xfffffffff7fede1c>
    1e20:	01000010 	.inst	0x01000010 ; undefined
    1e24:	012d0af6 	.inst	0x012d0af6 ; undefined
    1e28:	91020000 	add	x0, x0, #0x80
    1e2c:	31a41d78 	.inst	0x31a41d78 ; undefined
    1e30:	00000001 	.inst	0x00000001 ; undefined
    1e34:	007c0000 	.inst	0x007c0000 ; undefined
    1e38:	00000000 	.inst	0x00000000 ; undefined
    1e3c:	9c160000 	ldr	q0, 2de3c <_freertos_vector_table+0x17014>
    1e40:	01000008 	.inst	0x01000008 ; undefined
    1e44:	045b0af6 	bic	z22.h, p2/m, z22.h, z23.h
    1e48:	91020000 	add	x0, x0, #0x80
    1e4c:	00000070 	.inst	0x00000070 ; undefined
    1e50:	000dec19 	.inst	0x000dec19 ; undefined
    1e54:	0aab0100 	bic	w0, w8, w11, asr #0
    1e58:	00000118 	.inst	0x00000118 ; undefined
    1e5c:	000130dc 	.inst	0x000130dc ; undefined
    1e60:	00000000 	.inst	0x00000000 ; undefined
    1e64:	00000070 	.inst	0x00000070 ; undefined
    1e68:	00000000 	.inst	0x00000000 ; undefined
    1e6c:	0cf29c01 	.inst	0x0cf29c01 ; undefined
    1e70:	b9180000 	str	w0, [x0, #6144]
    1e74:	0100000d 	.inst	0x0100000d ; undefined
    1e78:	022f0aab 	.inst	0x022f0aab ; undefined
    1e7c:	91020000 	add	x0, x0, #0x80
    1e80:	109a1868 	adr	x8, fffffffffff3618c <_estack+0xfffffffff7f2618c>
    1e84:	ab010000 	adds	x0, x0, x1
    1e88:	00007a0a 	.inst	0x00007a0a ; undefined
    1e8c:	60910200 	.inst	0x60910200 ; undefined
    1e90:	00115216 	.inst	0x00115216 ; undefined
    1e94:	0aad0100 	bic	w0, w8, w13, asr #0
    1e98:	000003d8 	.inst	0x000003d8 ; undefined
    1e9c:	16789102 	b	fffffffff9e262a4 <_estack+0xfffffffff1e162a4>
    1ea0:	000007cc 	.inst	0x000007cc ; undefined
    1ea4:	180aae01 	ldr	w1, 17464 <_freertos_vector_table+0x63c>
    1ea8:	02000001 	.inst	0x02000001 ; undefined
    1eac:	19007091 	.inst	0x19007091 ; undefined
    1eb0:	00000ad5 	.inst	0x00000ad5 ; undefined
    1eb4:	3f0a8c01 	.inst	0x3f0a8c01 ; undefined
    1eb8:	88000002 	stxr	w0, w2, [x0]
    1ebc:	00000130 	.inst	0x00000130 ; undefined
    1ec0:	54000000 	b.eq	1ec0 <__module_entries_end-0x6140>  // b.none
    1ec4:	00000000 	.inst	0x00000000 ; undefined
    1ec8:	01000000 	.inst	0x01000000 ; undefined
    1ecc:	000d429c 	.inst	0x000d429c ; undefined
    1ed0:	0db91800 	st2	{v0.b, v1.b}[6], [x0], x25
    1ed4:	8c010000 	.inst	0x8c010000 ; undefined
    1ed8:	00022f0a 	.inst	0x00022f0a ; undefined
    1edc:	68910200 	.inst	0x68910200 ; undefined
    1ee0:	00115216 	.inst	0x00115216 ; undefined
    1ee4:	0a8e0100 	and	w0, w8, w14, asr #0
    1ee8:	000003d8 	.inst	0x000003d8 ; undefined
    1eec:	16789102 	b	fffffffff9e262f4 <_estack+0xfffffffff1e162f4>
    1ef0:	000007cc 	.inst	0x000007cc ; undefined
    1ef4:	3f0a8f01 	.inst	0x3f0a8f01 ; undefined
    1ef8:	02000002 	.inst	0x02000002 ; undefined
    1efc:	1a007091 	.inst	0x1a007091 ; undefined
    1f00:	000009f7 	.inst	0x000009f7 ; undefined
    1f04:	300a7101 	adr	x1, 16d25 <xHeap+0xf15>
    1f08:	00000130 	.inst	0x00000130 ; undefined
    1f0c:	58000000 	ldr	x0, 1f0c <__module_entries_end-0x60f4>
    1f10:	00000000 	.inst	0x00000000 ; undefined
    1f14:	01000000 	.inst	0x01000000 ; undefined
    1f18:	000d8e9c 	.inst	0x000d8e9c ; undefined
    1f1c:	0db91800 	st2	{v0.b, v1.b}[6], [x0], x25
    1f20:	71010000 	subs	w0, w0, #0x40
    1f24:	00022f0a 	.inst	0x00022f0a ; undefined
    1f28:	68910200 	.inst	0x68910200 ; undefined
    1f2c:	000c7e18 	.inst	0x000c7e18 ; undefined
    1f30:	0a710100 	bic	w0, w8, w17, lsr #0
    1f34:	0000023f 	.inst	0x0000023f ; undefined
    1f38:	16609102 	b	fffffffff9826340 <_estack+0xfffffffff1816340>
    1f3c:	00001152 	.inst	0x00001152 ; undefined
    1f40:	d80a7301 	prfm	pldl1strm, 16da0 <xHeap+0xf90>
    1f44:	02000003 	.inst	0x02000003 ; undefined
    1f48:	19007891 	.inst	0x19007891 ; undefined
    1f4c:	000009a5 	.inst	0x000009a5 ; undefined
    1f50:	1809c301 	ldr	w1, 157b0 <pxReadyTasksLists+0x40>
    1f54:	a4000001 	ld1rqb	{z1.b}, p0/z, [x0, x0]
    1f58:	0000012d 	.inst	0x0000012d ; undefined
    1f5c:	8c000000 	.inst	0x8c000000 ; undefined
    1f60:	00000002 	.inst	0x00000002 ; undefined
    1f64:	01000000 	.inst	0x01000000 ; undefined
    1f68:	000e209c 	.inst	0x000e209c ; undefined
    1f6c:	11511600 	add	w0, w16, #0x445, lsl #12
    1f70:	c5010000 	ld1sw	{z0.d}, p0/z, [x0, z1.d, uxtw]
    1f74:	0003d809 	.inst	0x0003d809 ; undefined
    1f78:	60910200 	.inst	0x60910200 ; undefined
    1f7c:	00037716 	.inst	0x00037716 ; undefined
    1f80:	09c60100 	.inst	0x09c60100 ; undefined
    1f84:	0000013d 	.inst	0x0000013d ; undefined
    1f88:	16589102 	b	fffffffff9626390 <_estack+0xfffffffff1616390>
    1f8c:	00000ec5 	.inst	0x00000ec5 ; undefined
    1f90:	1809c701 	ldr	w1, 15870 <xDelayedTaskList2+0x10>
    1f94:	02000001 	.inst	0x02000001 ; undefined
    1f98:	c41d7891 	ldff1b	{z17.d}, p6/z, [x4, z29.d, uxtw]
    1f9c:	0000012d 	.inst	0x0000012d ; undefined
    1fa0:	28000000 	stnp	w0, w0, [x0]
    1fa4:	00000002 	.inst	0x00000002 ; undefined
    1fa8:	16000000 	b	fffffffff8001fa8 <_estack+0xffffffffefff1fa8>
    1fac:	00000b44 	.inst	0x00000b44 ; undefined
    1fb0:	4d09d101 	.inst	0x4d09d101 ; undefined
    1fb4:	02000001 	.inst	0x02000001 ; undefined
    1fb8:	f41d7091 	.inst	0xf41d7091 ; undefined
    1fbc:	0000012d 	.inst	0x0000012d ; undefined
    1fc0:	58000000 	ldr	x0, 1fc0 <__module_entries_end-0x6040>
    1fc4:	00000000 	.inst	0x00000000 ; undefined
    1fc8:	16000000 	b	fffffffff8001fc8 <_estack+0xffffffffefff1fc8>
    1fcc:	00000af0 	.inst	0x00000af0 ; undefined
    1fd0:	5009d901 	adr	x1, 15af2 <g_VectorTable+0x182>
    1fd4:	02000004 	.inst	0x02000004 ; undefined
    1fd8:	00006891 	.inst	0x00006891 ; undefined
    1fdc:	0f8c1b00 	fmla	v0.2s, v24.2s, v12.s[2]
    1fe0:	85010000 	.inst	0x85010000 ; undefined
    1fe4:	00008108 	.inst	0x00008108 ; undefined
    1fe8:	012d6800 	.inst	0x012d6800 ; undefined
    1fec:	00000000 	.inst	0x00000000 ; undefined
    1ff0:	00003c00 	.inst	0x00003c00 ; undefined
    1ff4:	00000000 	.inst	0x00000000 ; undefined
    1ff8:	619c0100 	.inst	0x619c0100 ; undefined
    1ffc:	1800000e 	ldr	w14, 1ffc <__module_entries_end-0x6004>
    2000:	00000d9e 	.inst	0x00000d9e ; undefined
    2004:	2f088501 	sqshrun	v1.8b, v8.8h, #8
    2008:	02000002 	.inst	0x02000002 ; undefined
    200c:	51166891 	sub	w17, w4, #0x59a
    2010:	01000011 	.inst	0x01000011 ; undefined
    2014:	03d80887 	.inst	0x03d80887 ; undefined
    2018:	91020000 	add	x0, x0, #0x80
    201c:	df200078 	.inst	0xdf200078 ; undefined
    2020:	01000008 	.inst	0x01000008 ; undefined
    2024:	012d087d 	.inst	0x012d087d ; undefined
    2028:	2d580000 	ldp	s0, s0, [x0, #192]
    202c:	00000001 	.inst	0x00000001 ; undefined
    2030:	00100000 	.inst	0x00100000 ; undefined
    2034:	00000000 	.inst	0x00000000 ; undefined
    2038:	9c010000 	ldr	q0, 4038 <__module_entries_end-0x3fc8>
    203c:	000a7f1b 	.inst	0x000a7f1b ; undefined
    2040:	085e0100 	ldxrb	w0, [x8]
    2044:	0000013d 	.inst	0x0000013d ; undefined
    2048:	00012d34 	.inst	0x00012d34 ; undefined
    204c:	00000000 	.inst	0x00000000 ; undefined
    2050:	00000024 	.inst	0x00000024 ; undefined
    2054:	00000000 	.inst	0x00000000 ; undefined
    2058:	0ec09c01 	.inst	0x0ec09c01 ; undefined
    205c:	cc160000 	.inst	0xcc160000 ; undefined
    2060:	01000007 	.inst	0x01000007 ; undefined
    2064:	013d0860 	.inst	0x013d0860 ; undefined
    2068:	91020000 	add	x0, x0, #0x80
    206c:	08161670 	stxrb	w22, w16, [x19]
    2070:	61010000 	.inst	0x61010000 ; undefined
    2074:	00012d08 	.inst	0x00012d08 ; undefined
    2078:	78910200 	ldursh	x0, [x16, #-240]
    207c:	0d3f1b00 	.inst	0x0d3f1b00 ; undefined
    2080:	4f010000 	.inst	0x4f010000 ; undefined
    2084:	00013d08 	.inst	0x00013d08 ; undefined
    2088:	012d1400 	.inst	0x012d1400 ; undefined
    208c:	00000000 	.inst	0x00000000 ; undefined
    2090:	00002000 	.inst	0x00002000 ; undefined
    2094:	00000000 	.inst	0x00000000 ; undefined
    2098:	f29c0100 	movk	x0, #0xe008
    209c:	1600000e 	b	fffffffff80020d4 <_estack+0xffffffffefff20d4>
    20a0:	00000f9a 	.inst	0x00000f9a ; undefined
    20a4:	3d085101 	str	b1, [x8, #532]
    20a8:	02000001 	.inst	0x02000001 ; undefined
    20ac:	19007891 	.inst	0x19007891 ; undefined
    20b0:	00000e76 	.inst	0x00000e76 ; undefined
    20b4:	1807e101 	ldr	w1, 11cd4 <xQueueIsQueueFullFromISR+0x30>
    20b8:	44000001 	.inst	0x44000001 ; undefined
    20bc:	0000012b 	.inst	0x0000012b ; undefined
    20c0:	d0000000 	adrp	x0, 4000 <__module_entries_end-0x4000>
    20c4:	00000001 	.inst	0x00000001 ; undefined
    20c8:	01000000 	.inst	0x01000000 ; undefined
    20cc:	000f549c 	.inst	0x000f549c ; undefined
    20d0:	11511600 	add	w0, w16, #0x445, lsl #12
    20d4:	e3010000 	.inst	0xe3010000 ; undefined
    20d8:	0003d807 	.inst	0x0003d807 ; undefined
    20dc:	78910200 	ldursh	x0, [x16, #-240]
    20e0:	00108a16 	.inst	0x00108a16 ; undefined
    20e4:	07e40100 	.inst	0x07e40100 ; undefined
    20e8:	00000118 	.inst	0x00000118 ; undefined
    20ec:	1d709102 	.inst	0x1d709102 ; undefined
    20f0:	00012c88 	.inst	0x00012c88 ; undefined
    20f4:	00000000 	.inst	0x00000000 ; undefined
    20f8:	0000005c 	.inst	0x0000005c ; undefined
    20fc:	00000000 	.inst	0x00000000 ; undefined
    2100:	0008bc16 	.inst	0x0008bc16 ; undefined
    2104:	081c0100 	stxrb	w28, w0, [x8]
    2108:	0000012d 	.inst	0x0000012d ; undefined
    210c:	00689102 	.inst	0x00689102 ; undefined
    2110:	0af71e00 	bic	w0, w16, w23, ror #7
    2114:	98010000 	ldrsw	x0, 4114 <__module_entries_end-0x3eec>
    2118:	012b2007 	.inst	0x012b2007 ; undefined
    211c:	00000000 	.inst	0x00000000 ; undefined
    2120:	00002400 	.inst	0x00002400 ; undefined
    2124:	00000000 	.inst	0x00000000 ; undefined
    2128:	219c0100 	.inst	0x219c0100 ; undefined
    212c:	00000b20 	.inst	0x00000b20 ; undefined
    2130:	f0078d01 	adrp	x1, f1a5000 <_estack+0x7195000>
    2134:	0000012a 	.inst	0x0000012a ; undefined
    2138:	30000000 	adr	x0, 2139 <__module_entries_end-0x5ec7>
    213c:	00000000 	.inst	0x00000000 ; undefined
    2140:	01000000 	.inst	0x01000000 ; undefined
    2144:	0fa11a9c 	fmla	v28.2s, v20.2s, v1.s[3]
    2148:	22010000 	.inst	0x22010000 ; undefined
    214c:	012a6407 	.inst	0x012a6407 ; undefined
    2150:	00000000 	.inst	0x00000000 ; undefined
    2154:	00008c00 	.inst	0x00008c00 ; undefined
    2158:	00000000 	.inst	0x00000000 ; undefined
    215c:	b69c0100 	tbz	x0, #51, ffffffffffffa17c <_estack+0xfffffffff7fea17c>
    2160:	1600000f 	b	fffffffff800219c <_estack+0xffffffffefff219c>
    2164:	000007cc 	.inst	0x000007cc ; undefined
    2168:	18072401 	ldr	w1, 105e8 <vPortTaskUsesFPU+0x8>
    216c:	02000001 	.inst	0x02000001 ; undefined
    2170:	19007891 	.inst	0x19007891 ; undefined
    2174:	00000f32 	.inst	0x00000f32 ; undefined
    2178:	1806dc01 	ldr	w1, fcf8 <__module_entries_end+0x7cf8>
    217c:	58000001 	ldr	x1, 217c <__module_entries_end-0x5e84>
    2180:	00000129 	.inst	0x00000129 ; undefined
    2184:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    2188:	00000001 	.inst	0x00000001 ; undefined
    218c:	01000000 	.inst	0x01000000 ; undefined
    2190:	0010159c 	.inst	0x0010159c ; undefined
    2194:	09e91800 	.inst	0x09e91800 ; undefined
    2198:	dc010000 	.inst	0xdc010000 ; undefined
    219c:	00022f06 	.inst	0x00022f06 ; undefined
    21a0:	58910200 	ldr	x0, fffffffffff241e0 <_estack+0xfffffffff7f141e0>
    21a4:	0005e716 	.inst	0x0005e716 ; undefined
    21a8:	06de0100 	.inst	0x06de0100 ; undefined
    21ac:	00000118 	.inst	0x00000118 ; undefined
    21b0:	16789102 	b	fffffffff9e265b8 <_estack+0xfffffffff1e165b8>
    21b4:	00001151 	.inst	0x00001151 ; undefined
    21b8:	e306df01 	.inst	0xe306df01 ; undefined
    21bc:	02000003 	.inst	0x02000003 ; undefined
    21c0:	16167091 	b	fffffffff859e404 <_estack+0xfffffffff058e404>
    21c4:	01000008 	.inst	0x01000008 ; undefined
    21c8:	012d06e0 	.inst	0x012d06e0 ; undefined
    21cc:	91020000 	add	x0, x0, #0x80
    21d0:	6c1a0068 	stnp	d8, d0, [x3, #416]
    21d4:	01000011 	.inst	0x01000011 ; undefined
    21d8:	286406a6 	ldnp	w6, w1, [x21, #-224]
    21dc:	00000001 	.inst	0x00000001 ; undefined
    21e0:	00f40000 	.inst	0x00f40000 ; undefined
    21e4:	00000000 	.inst	0x00000000 ; undefined
    21e8:	9c010000 	ldr	q0, 41e8 <__module_entries_end-0x3e18>
    21ec:	00001052 	.inst	0x00001052 ; undefined
    21f0:	0009e918 	.inst	0x0009e918 ; undefined
    21f4:	06a60100 	.inst	0x06a60100 ; undefined
    21f8:	0000022f 	.inst	0x0000022f ; undefined
    21fc:	16689102 	b	fffffffff9a26604 <_estack+0xfffffffff1a16604>
    2200:	00001151 	.inst	0x00001151 ; undefined
    2204:	e306a801 	.inst	0xe306a801 ; undefined
    2208:	02000003 	.inst	0x02000003 ; undefined
    220c:	22007891 	.inst	0x22007891 ; undefined
    2210:	00000eae 	.inst	0x00000eae ; undefined
    2214:	18067801 	ldr	w1, f114 <__module_entries_end+0x7114>
    2218:	d4000001 	svc	#0x0
    221c:	00000127 	.inst	0x00000127 ; undefined
    2220:	90000000 	adrp	x0, 2000 <__module_entries_end-0x6000>
    2224:	00000000 	.inst	0x00000000 ; undefined
    2228:	01000000 	.inst	0x01000000 ; undefined
    222c:	0010a29c 	.inst	0x0010a29c ; undefined
    2230:	0db91800 	st2	{v0.b, v1.b}[6], [x0], x25
    2234:	78010000 	sturh	w0, [x0, #16]
    2238:	00023a06 	.inst	0x00023a06 ; undefined
    223c:	68910200 	.inst	0x68910200 ; undefined
    2240:	0007cc16 	.inst	0x0007cc16 ; undefined
    2244:	067a0100 	.inst	0x067a0100 ; undefined
    2248:	00000118 	.inst	0x00000118 ; undefined
    224c:	16789102 	b	fffffffff9e26654 <_estack+0xfffffffff1e16654>
    2250:	00001151 	.inst	0x00001151 ; undefined
    2254:	a8067b01 	stnp	x1, x30, [x24, #96]
    2258:	02000010 	.inst	0x02000010 ; undefined
    225c:	07007091 	.inst	0x07007091 ; undefined
    2260:	0003bd08 	.inst	0x0003bd08 ; undefined
    2264:	10a20600 	adr	x0, fffffffffff46324 <_estack+0xfffffffff7f36324>
    2268:	7d1a0000 	str	h0, [x0, #3328]
    226c:	01000010 	.inst	0x01000010 ; undefined
    2270:	2660061e 	.inst	0x2660061e ; undefined
    2274:	00000001 	.inst	0x00000001 ; undefined
    2278:	01740000 	.inst	0x01740000 ; undefined
    227c:	00000000 	.inst	0x00000000 ; undefined
    2280:	9c010000 	ldr	q0, 4280 <__module_entries_end-0x3d80>
    2284:	000010ea 	.inst	0x000010ea ; undefined
    2288:	000eeb18 	.inst	0x000eeb18 ; undefined
    228c:	061e0100 	.inst	0x061e0100 ; undefined
    2290:	0000022f 	.inst	0x0000022f ; undefined
    2294:	16689102 	b	fffffffff9a2669c <_estack+0xfffffffff1a1669c>
    2298:	00001151 	.inst	0x00001151 ; undefined
    229c:	d8062001 	prfm	pldl1strm, e69c <__module_entries_end+0x669c>
    22a0:	02000003 	.inst	0x02000003 ; undefined
    22a4:	1a007891 	.inst	0x1a007891 ; undefined
    22a8:	00000d8d 	.inst	0x00000d8d ; undefined
    22ac:	34057a01 	cbz	w1, d1ec <__module_entries_end+0x51ec>
    22b0:	00000124 	.inst	0x00000124 ; undefined
    22b4:	2c000000 	stnp	s0, s0, [x0]
    22b8:	00000002 	.inst	0x00000002 ; undefined
    22bc:	01000000 	.inst	0x01000000 ; undefined
    22c0:	0011639c 	.inst	0x0011639c ; undefined
    22c4:	0db91800 	st2	{v0.b, v1.b}[6], [x0], x25
    22c8:	7a010000 	sbcs	w0, w0, w1
    22cc:	00022f05 	.inst	0x00022f05 ; undefined
    22d0:	58910200 	ldr	x0, fffffffffff24310 <_estack+0xfffffffff7f14310>
    22d4:	000cf118 	.inst	0x000cf118 ; undefined
    22d8:	057a0100 	.inst	0x057a0100 ; undefined
    22dc:	0000012d 	.inst	0x0000012d ; undefined
    22e0:	16509102 	b	fffffffff94266e8 <_estack+0xfffffffff14166e8>
    22e4:	00001151 	.inst	0x00001151 ; undefined
    22e8:	d8057c01 	prfm	pldl1strm, d268 <__module_entries_end+0x5268>
    22ec:	02000003 	.inst	0x02000003 ; undefined
    22f0:	cd167091 	.inst	0xcd167091 ; undefined
    22f4:	01000011 	.inst	0x01000011 ; undefined
    22f8:	012d057d 	.inst	0x012d057d ; undefined
    22fc:	91020000 	add	x0, x0, #0x80
    2300:	10541668 	adr	x8, aa5cc <_freertos_vector_table+0x937a4>
    2304:	7d010000 	str	h0, [x0, #128]
    2308:	00012d05 	.inst	0x00012d05 ; undefined
    230c:	60910200 	.inst	0x60910200 ; undefined
    2310:	0005e716 	.inst	0x0005e716 ; undefined
    2314:	057e0100 	.inst	0x057e0100 ; undefined
    2318:	00000118 	.inst	0x00000118 ; undefined
    231c:	00789102 	.inst	0x00789102 ; undefined
    2320:	000d2619 	.inst	0x000d2619 ; undefined
    2324:	05520100 	mov	z0.h, p2/z, #8
    2328:	0000012d 	.inst	0x0000012d ; undefined
    232c:	000123dc 	.inst	0x000123dc ; undefined
    2330:	00000000 	.inst	0x00000000 ; undefined
    2334:	00000058 	.inst	0x00000058 ; undefined
    2338:	00000000 	.inst	0x00000000 ; undefined
    233c:	11c29c01 	.inst	0x11c29c01 ; undefined
    2340:	b9180000 	str	w0, [x0, #6144]
    2344:	0100000d 	.inst	0x0100000d ; undefined
    2348:	022f0552 	.inst	0x022f0552 ; undefined
    234c:	91020000 	add	x0, x0, #0x80
    2350:	11511658 	add	w24, w18, #0x445, lsl #12
    2354:	54010000 	b.eq	4354 <__module_entries_end-0x3cac>  // b.none
    2358:	0003d805 	.inst	0x0003d805 ; undefined
    235c:	70910200 	adr	x0, fffffffffff2439f <_estack+0xfffffffff7f1439f>
    2360:	0007cb16 	.inst	0x0007cb16 ; undefined
    2364:	05550100 	mov	z0.h, p5/z, #8
    2368:	0000012d 	.inst	0x0000012d ; undefined
    236c:	16689102 	b	fffffffff9a26774 <_estack+0xfffffffff1a16774>
    2370:	00000a98 	.inst	0x00000a98 ; undefined
    2374:	2d055501 	stp	s1, s21, [x8, #40]
    2378:	02000001 	.inst	0x02000001 ; undefined
    237c:	19007891 	.inst	0x19007891 ; undefined
    2380:	00000b32 	.inst	0x00000b32 ; undefined
    2384:	2d053c01 	stp	s1, s15, [x0, #40]
    2388:	8c000001 	.inst	0x8c000001 ; undefined
    238c:	00000123 	.inst	0x00000123 ; undefined
    2390:	50000000 	adr	x0, 2392 <__module_entries_end-0x5c6e>
    2394:	00000000 	.inst	0x00000000 ; undefined
    2398:	01000000 	.inst	0x01000000 ; undefined
    239c:	0012129c 	.inst	0x0012129c ; undefined
    23a0:	0db91800 	st2	{v0.b, v1.b}[6], [x0], x25
    23a4:	3c010000 	stur	b0, [x0, #16]
    23a8:	00022f05 	.inst	0x00022f05 ; undefined
    23ac:	68910200 	.inst	0x68910200 ; undefined
    23b0:	00115116 	.inst	0x00115116 ; undefined
    23b4:	053e0100 	ext	z0.b, z0.b, z8.b, #240
    23b8:	000003d8 	.inst	0x000003d8 ; undefined
    23bc:	16789102 	b	fffffffff9e267c4 <_estack+0xfffffffff1e167c4>
    23c0:	000007cb 	.inst	0x000007cb ; undefined
    23c4:	2d053f01 	stp	s1, s15, [x24, #40]
    23c8:	02000001 	.inst	0x02000001 ; undefined
    23cc:	1a007091 	.inst	0x1a007091 ; undefined
    23d0:	00000b9e 	.inst	0x00000b9e ; undefined
    23d4:	3c04c801 	.inst	0x3c04c801 ; undefined
    23d8:	00000123 	.inst	0x00000123 ; undefined
    23dc:	50000000 	adr	x0, 23de <__module_entries_end-0x5c22>
    23e0:	00000000 	.inst	0x00000000 ; undefined
    23e4:	01000000 	.inst	0x01000000 ; undefined
    23e8:	00124f9c 	.inst	0x00124f9c ; undefined
    23ec:	0fd91800 	.inst	0x0fd91800 ; undefined
    23f0:	c8010000 	stxr	w1, x0, [x0]
    23f4:	00014d04 	.inst	0x00014d04 ; undefined
    23f8:	68910200 	.inst	0x68910200 ; undefined
    23fc:	00108a16 	.inst	0x00108a16 ; undefined
    2400:	04ca0100 	smin	z0.d, p0/m, z0.d, z8.d
    2404:	00000118 	.inst	0x00000118 ; undefined
    2408:	00789102 	.inst	0x00789102 ; undefined
    240c:	0010441a 	.inst	0x0010441a ; undefined
    2410:	04740100 	add	z0.h, z8.h, z20.h
    2414:	00012240 	.inst	0x00012240 ; undefined
    2418:	00000000 	.inst	0x00000000 ; undefined
    241c:	000000fc 	.inst	0x000000fc ; undefined
    2420:	00000000 	.inst	0x00000000 ; undefined
    2424:	12da9c01 	.inst	0x12da9c01 ; undefined
    2428:	0f180000 	.inst	0x0f180000 ; undefined
    242c:	0100000f 	.inst	0x0100000f ; undefined
    2430:	0abc0474 	bic	w20, w3, w28, asr #1
    2434:	91020000 	add	x0, x0, #0x80
    2438:	11271858 	add	w24, w2, #0x9c6
    243c:	74010000 	.inst	0x74010000 ; undefined
    2440:	00014d04 	.inst	0x00014d04 ; undefined
    2444:	50910200 	adr	x0, fffffffffff24486 <_estack+0xfffffffff7f14486>
    2448:	00113616 	.inst	0x00113616 ; undefined
    244c:	04760100 	add	z0.h, z8.h, z22.h
    2450:	0000013d 	.inst	0x0000013d ; undefined
    2454:	16689102 	b	fffffffff9a2685c <_estack+0xfffffffff1a1685c>
    2458:	0000108a 	.inst	0x0000108a ; undefined
    245c:	18047701 	ldr	w1, b33c <__module_entries_end+0x333c>
    2460:	02000001 	.inst	0x02000001 ; undefined
    2464:	22166091 	.inst	0x22166091 ; undefined
    2468:	0100000c 	.inst	0x0100000c ; undefined
    246c:	01180477 	.inst	0x01180477 ; undefined
    2470:	91020000 	add	x0, x0, #0x80
    2474:	22581d78 	.inst	0x22581d78 ; undefined
    2478:	00000001 	.inst	0x00000001 ; undefined
    247c:	00c00000 	.inst	0x00c00000 ; undefined
    2480:	00000000 	.inst	0x00000000 ; undefined
    2484:	44160000 	.inst	0x44160000 ; undefined
    2488:	0100000b 	.inst	0x0100000b ; undefined
    248c:	014d0481 	.inst	0x014d0481 ; undefined
    2490:	91020000 	add	x0, x0, #0x80
    2494:	1a000070 	adc	w16, w3, w0
    2498:	00000de0 	.inst	0x00000de0 ; undefined
    249c:	a8041801 	stnp	x1, x6, [x0, #64]
    24a0:	00000120 	.inst	0x00000120 ; undefined
    24a4:	98000000 	ldrsw	x0, 24a4 <__module_entries_end-0x5b5c>
    24a8:	00000001 	.inst	0x00000001 ; undefined
    24ac:	01000000 	.inst	0x01000000 ; undefined
    24b0:	0013179c 	.inst	0x0013179c ; undefined
    24b4:	0ed51800 	.inst	0x0ed51800 ; undefined
    24b8:	18010000 	ldr	w0, 44b8 <__module_entries_end-0x3b48>
    24bc:	00022f04 	.inst	0x00022f04 ; undefined
    24c0:	68910200 	.inst	0x68910200 ; undefined
    24c4:	00115116 	.inst	0x00115116 ; undefined
    24c8:	041a0100 	and	z0.b, p0/m, z0.b, z8.b
    24cc:	000003d8 	.inst	0x000003d8 ; undefined
    24d0:	00789102 	.inst	0x00789102 ; undefined
    24d4:	000c6517 	.inst	0x000c6517 ; undefined
    24d8:	03c30100 	.inst	0x03c30100 ; undefined
    24dc:	00011f2c 	.inst	0x00011f2c ; undefined
    24e0:	00000000 	.inst	0x00000000 ; undefined
    24e4:	0000017c 	.inst	0x0000017c ; undefined
    24e8:	00000000 	.inst	0x00000000 ; undefined
    24ec:	13459c01 	.inst	0x13459c01 ; undefined
    24f0:	8d180000 	.inst	0x8d180000 ; undefined
    24f4:	0100000c 	.inst	0x0100000c ; undefined
    24f8:	03d803c3 	.inst	0x03d803c3 ; undefined
    24fc:	91020000 	add	x0, x0, #0x80
    2500:	59170078 	.inst	0x59170078 ; undefined
    2504:	0100000e 	.inst	0x0100000e ; undefined
    2508:	1db002ff 	.inst	0x1db002ff ; undefined
    250c:	00000001 	.inst	0x00000001 ; undefined
    2510:	017c0000 	.inst	0x017c0000 ; undefined
    2514:	00000000 	.inst	0x00000000 ; undefined
    2518:	9c010000 	ldr	q0, 4518 <__module_entries_end-0x3ae8>
    251c:	000013fa 	.inst	0x000013fa ; undefined
    2520:	000c9618 	.inst	0x000c9618 ; undefined
    2524:	02ff0100 	.inst	0x02ff0100 ; undefined
    2528:	000000ec 	.inst	0x000000ec ; undefined
    252c:	18689102 	ldr	w2, d374c <_freertos_vector_table+0xbc924>
    2530:	00000b67 	.inst	0x00000b67 ; undefined
    2534:	a0030001 	.inst	0xa0030001 ; undefined
    2538:	02000000 	.inst	0x02000000 ; undefined
    253c:	15186091 	b	461a780 <_freertos_vector_table+0x4603958>
    2540:	0100000c 	.inst	0x0100000c ; undefined
    2544:	00dc0301 	.inst	0x00dc0301 ; undefined
    2548:	91020000 	add	x0, x0, #0x80
    254c:	0252185c 	.inst	0x0252185c ; undefined
    2550:	02010000 	.inst	0x02010000 ; undefined
    2554:	00007c03 	.inst	0x00007c03 ; undefined
    2558:	50910200 	adr	x0, fffffffffff2459a <_estack+0xfffffffff7f1459a>
    255c:	00089118 	.inst	0x00089118 ; undefined
    2560:	03030100 	.inst	0x03030100 ; undefined
    2564:	0000012d 	.inst	0x0000012d ; undefined
    2568:	18489102 	ldr	w2, 93788 <_freertos_vector_table+0x7c960>
    256c:	0000119f 	.inst	0x0000119f ; undefined
    2570:	00030401 	.inst	0x00030401 ; undefined
    2574:	02000014 	.inst	0x02000014 ; undefined
    2578:	8d184091 	.inst	0x8d184091 ; undefined
    257c:	0100000c 	.inst	0x0100000c ; undefined
    2580:	03d80305 	.inst	0x03d80305 ; undefined
    2584:	91030000 	add	x0, x0, #0xc0
    2588:	e8187fb8 	.inst	0xe8187fb8 ; undefined
    258c:	01000010 	.inst	0x01000010 ; undefined
    2590:	140b0306 	b	2c31a8 <_freertos_vector_table+0x2ac380>
    2594:	91030000 	add	x0, x0, #0xc0
    2598:	73167fb0 	.inst	0x73167fb0 ; undefined
    259c:	01000002 	.inst	0x01000002 ; undefined
    25a0:	03060308 	.inst	0x03060308 ; undefined
    25a4:	91020000 	add	x0, x0, #0x80
    25a8:	00782370 	.inst	0x00782370 ; undefined
    25ac:	2d030901 	stp	s1, s2, [x8, #24]
    25b0:	02000001 	.inst	0x02000001 ; undefined
    25b4:	07007891 	.inst	0x07007891 ; undefined
    25b8:	00022f08 	.inst	0x00022f08 ; undefined
    25bc:	13fa0600 	.inst	0x13fa0600 ; undefined
    25c0:	08070000 	stxrb	w7, w0, [x0]
    25c4:	00000301 	.inst	0x00000301 ; undefined
    25c8:	00140506 	.inst	0x00140506 ; undefined
    25cc:	0c592400 	.inst	0x0c592400 ; undefined
    25d0:	a4010000 	ld1rqb	{z0.b}, p0/z, [x0, x1]
    25d4:	00011802 	.inst	0x00011802 ; undefined
    25d8:	011ce000 	.inst	0x011ce000 ; undefined
    25dc:	00000000 	.inst	0x00000000 ; undefined
    25e0:	0000d000 	.inst	0x0000d000 ; undefined
    25e4:	00000000 	.inst	0x00000000 ; undefined
    25e8:	189c0100 	ldr	w0, fffffffffff3a608 <_estack+0xfffffffff7f2a608>
    25ec:	00000c96 	.inst	0x00000c96 ; undefined
    25f0:	ec02a401 	.inst	0xec02a401 ; undefined
    25f4:	02000000 	.inst	0x02000000 ; undefined
    25f8:	67185891 	.inst	0x67185891 ; undefined
    25fc:	0100000b 	.inst	0x0100000b ; undefined
    2600:	00a002a5 	.inst	0x00a002a5 ; undefined
    2604:	91020000 	add	x0, x0, #0x80
    2608:	0a491850 	and	w16, w2, w9, lsr #6
    260c:	a6010000 	.inst	0xa6010000 ; undefined
    2610:	0000c702 	.inst	0x0000c702 ; undefined
    2614:	4e910200 	.inst	0x4e910200 ; undefined
    2618:	00025218 	.inst	0x00025218 ; undefined
    261c:	02a70100 	.inst	0x02a70100 ; undefined
    2620:	0000007c 	.inst	0x0000007c ; undefined
    2624:	18409102 	ldr	w2, 83844 <_freertos_vector_table+0x6ca1c>
    2628:	00000891 	.inst	0x00000891 ; undefined
    262c:	2d02a801 	stp	s1, s10, [x0, #20]
    2630:	03000001 	.inst	0x03000001 ; undefined
    2634:	187fb891 	ldr	w17, 101d44 <_freertos_vector_table+0xeaf1c>
    2638:	0000119f 	.inst	0x0000119f ; undefined
    263c:	0002a901 	.inst	0x0002a901 ; undefined
    2640:	03000014 	.inst	0x03000014 ; undefined
    2644:	167fb091 	b	fffffffff9fee888 <_estack+0xfffffffff1fde888>
    2648:	00000c8d 	.inst	0x00000c8d ; undefined
    264c:	d802ab01 	prfm	pldl1strm, 7bac <__module_entries_end-0x454>
    2650:	02000003 	.inst	0x02000003 ; undefined
    2654:	cc167891 	.inst	0xcc167891 ; undefined
    2658:	01000007 	.inst	0x01000007 ; undefined
    265c:	011802ac 	.inst	0x011802ac ; undefined
    2660:	91020000 	add	x0, x0, #0x80
    2664:	1d001d70 	.inst	0x1d001d70 ; undefined
    2668:	00000001 	.inst	0x00000001 ; undefined
    266c:	00540000 	.inst	0x00540000 ; undefined
    2670:	00000000 	.inst	0x00000000 ; undefined
    2674:	6e160000 	ext	v0.16b, v0.16b, v22.16b, #0
    2678:	0100000e 	.inst	0x0100000e ; undefined
    267c:	030602c9 	.inst	0x030602c9 ; undefined
    2680:	91020000 	add	x0, x0, #0x80
    2684:	00000068 	.inst	0x00000068 ; undefined
    2688:	00000307 	.inst	0x00000307 ; undefined
    268c:	06070004 	.inst	0x06070004 ; undefined
    2690:	01080000 	.inst	0x01080000 ; undefined
    2694:	0000008a 	.inst	0x0000008a ; undefined
    2698:	0012950c 	.inst	0x0012950c ; undefined
    269c:	01418c00 	.inst	0x01418c00 ; undefined
    26a0:	00000000 	.inst	0x00000000 ; undefined
    26a4:	0003d000 	.inst	0x0003d000 ; undefined
    26a8:	00000000 	.inst	0x00000000 ; undefined
    26ac:	000d2100 	.inst	0x000d2100 ; undefined
    26b0:	13140200 	sbfiz	w0, w16, #12, #1
    26b4:	0b020000 	add	w0, w0, w2
    26b8:	00000034 	.inst	0x00000034 ; undefined
    26bc:	003a0803 	.inst	0x003a0803 ; NYI
    26c0:	4a040000 	eor	w0, w0, w4
    26c4:	05000000 	orr	z0.s, z0.s, #0x1
    26c8:	0000004a 	.inst	0x0000004a ; undefined
    26cc:	00005605 	.inst	0x00005605 ; undefined
    26d0:	04060000 	.inst	0x04060000 ; undefined
    26d4:	0001a707 	.inst	0x0001a707 ; undefined
    26d8:	004a0700 	.inst	0x004a0700 ; undefined
    26dc:	08080000 	stxrb	w8, w0, [x0]
    26e0:	0d021009 	.inst	0x0d021009 ; undefined
    26e4:	00000079 	.inst	0x00000079 ; undefined
    26e8:	00128a0a 	.inst	0x00128a0a ; undefined
    26ec:	290e0200 	stp	w0, w0, [x16, #112]
    26f0:	00000000 	.inst	0x00000000 ; undefined
    26f4:	0012db0a 	.inst	0x0012db0a ; undefined
    26f8:	560f0200 	.inst	0x560f0200 ; undefined
    26fc:	08000000 	stxrb	w0, w0, [x0]
    2700:	13290200 	.inst	0x13290200 ; undefined
    2704:	10020000 	adr	x0, 6704 <__module_entries_end-0x18fc>
    2708:	00000058 	.inst	0x00000058 ; undefined
    270c:	0000790b 	.inst	0x0000790b ; undefined
    2710:	00009400 	.inst	0x00009400 ; undefined
    2714:	00940c00 	.inst	0x00940c00 ; undefined
    2718:	00470000 	.inst	0x00470000 ; undefined
    271c:	32070806 	orr	w6, w0, #0xe000000
    2720:	0d000002 	st1	{v2.b}[0], [x0]
    2724:	000012fc 	.inst	0x000012fc ; undefined
    2728:	00840901 	.inst	0x00840901 ; undefined
    272c:	03090000 	.inst	0x03090000 ; undefined
    2730:	00015970 	.inst	0x00015970 ; undefined
    2734:	00000000 	.inst	0x00000000 ; undefined
    2738:	0c015009 	.inst	0x0c015009 ; undefined
    273c:	00000131 	.inst	0x00000131 ; undefined
    2740:	00134b0a 	.inst	0x00134b0a ; undefined
    2744:	310d0100 	adds	w0, w8, #0x340
    2748:	00000001 	.inst	0x00000001 ; undefined
    274c:	0011f10a 	.inst	0x0011f10a ; undefined
    2750:	310e0100 	adds	w0, w8, #0x380
    2754:	08000001 	stxrb	w0, w1, [x0]
    2758:	0011fa0a 	.inst	0x0011fa0a ; undefined
    275c:	310f0100 	adds	w0, w8, #0x3c0
    2760:	10000001 	adr	x1, 2760 <__module_entries_end-0x58a0>
    2764:	0012220a 	.inst	0x0012220a ; undefined
    2768:	31100100 	adds	w0, w8, #0x400
    276c:	18000001 	ldr	w1, 276c <__module_entries_end-0x5894>
    2770:	0013600a 	.inst	0x0013600a ; undefined
    2774:	31110100 	adds	w0, w8, #0x440
    2778:	20000001 	.inst	0x20000001 ; undefined
    277c:	0012eb0a 	.inst	0x0012eb0a ; undefined
    2780:	31120100 	adds	w0, w8, #0x480
    2784:	28000001 	stnp	w1, w0, [x0]
    2788:	0013540a 	.inst	0x0013540a ; undefined
    278c:	31130100 	adds	w0, w8, #0x4c0
    2790:	30000001 	adr	x1, 2791 <__module_entries_end-0x586f>
    2794:	0012f30a 	.inst	0x0012f30a ; undefined
    2798:	31140100 	adds	w0, w8, #0x500
    279c:	38000001 	sturb	w1, [x0]
    27a0:	0012e20a 	.inst	0x0012e20a ; undefined
    27a4:	31150100 	adds	w0, w8, #0x540
    27a8:	40000001 	.inst	0x40000001 ; undefined
    27ac:	0012030a 	.inst	0x0012030a ; undefined
    27b0:	31160100 	adds	w0, w8, #0x580
    27b4:	48000001 	stxrh	w0, w1, [x0]
    27b8:	07080600 	.inst	0x07080600 ; undefined
    27bc:	000001a2 	.inst	0x000001a2 ; undefined
    27c0:	00121002 	.inst	0x00121002 ; undefined
    27c4:	b0170100 	adrp	x0, 2e023000 <_estack+0x26013000>
    27c8:	0e000000 	tbl	v0.8b, {v0.16b}, v0.8b
    27cc:	00000138 	.inst	0x00000138 ; undefined
    27d0:	0013450d 	.inst	0x0013450d ; undefined
    27d4:	63190100 	.inst	0x63190100 ; undefined
    27d8:	09000001 	.inst	0x09000001 ; undefined
    27dc:	01548803 	.inst	0x01548803 ; undefined
    27e0:	00000000 	.inst	0x00000000 ; undefined
    27e4:	43080300 	.inst	0x43080300 ; undefined
    27e8:	07000001 	.inst	0x07000001 ; undefined
    27ec:	0000015d 	.inst	0x0000015d ; undefined
    27f0:	0001310b 	.inst	0x0001310b ; undefined
    27f4:	00017800 	.inst	0x00017800 ; undefined
    27f8:	00940c00 	.inst	0x00940c00 ; undefined
    27fc:	00020000 	.inst	0x00020000 ; undefined
    2800:	0012530d 	.inst	0x0012530d ; undefined
    2804:	681c0100 	.inst	0x681c0100 ; undefined
    2808:	09000001 	.inst	0x09000001 ; undefined
    280c:	015df003 	.inst	0x015df003 ; undefined
    2810:	00000000 	.inst	0x00000000 ; undefined
    2814:	127f0f00 	.inst	0x127f0f00 ; undefined
    2818:	6d010000 	stp	d0, d0, [x0, #16]
    281c:	0001446c 	.inst	0x0001446c ; undefined
    2820:	00000000 	.inst	0x00000000 ; undefined
    2824:	000000f0 	.inst	0x000000f0 ; undefined
    2828:	00000000 	.inst	0x00000000 ; undefined
    282c:	01c79c01 	.inst	0x01c79c01 ; undefined
    2830:	69100000 	.inst	0x69100000 ; undefined
    2834:	01007172 	.inst	0x01007172 ; undefined
    2838:	0000516d 	.inst	0x0000516d ; undefined
    283c:	6c910200 	stp	d0, d0, [x16], #272
    2840:	00127a0d 	.inst	0x00127a0d ; undefined
    2844:	316f0100 	adds	w0, w8, #0xbc0, lsl #12
    2848:	02000001 	.inst	0x02000001 ; undefined
    284c:	0f007891 	.inst	0x0f007891 ; undefined
    2850:	0000130a 	.inst	0x0000130a ; undefined
    2854:	43885b01 	.inst	0x43885b01 ; undefined
    2858:	00000001 	.inst	0x00000001 ; undefined
    285c:	00e40000 	.inst	0x00e40000 ; undefined
    2860:	00000000 	.inst	0x00000000 ; undefined
    2864:	9c010000 	ldr	q0, 4864 <__module_entries_end-0x379c>
    2868:	00000201 	.inst	0x00000201 ; undefined
    286c:	71726910 	subs	w16, w8, #0xc9a, lsl #12
    2870:	515b0100 	sub	w0, w8, #0x6c0, lsl #12
    2874:	02000000 	.inst	0x02000000 ; undefined
    2878:	7a0d6c91 	.inst	0x7a0d6c91 ; undefined
    287c:	01000012 	.inst	0x01000012 ; undefined
    2880:	0001315d 	.inst	0x0001315d ; undefined
    2884:	78910200 	ldursh	x0, [x16, #-240]
    2888:	122a1100 	and	w0, w8, #0x7c00000
    288c:	51010000 	sub	w0, w0, #0x40
    2890:	0001431c 	.inst	0x0001431c ; undefined
    2894:	00000000 	.inst	0x00000000 ; undefined
    2898:	0000006c 	.inst	0x0000006c ; undefined
    289c:	00000000 	.inst	0x00000000 ; undefined
    28a0:	02499c01 	.inst	0x02499c01 ; undefined
    28a4:	69100000 	.inst	0x69100000 ; undefined
    28a8:	01007172 	.inst	0x01007172 ; undefined
    28ac:	00005151 	.inst	0x00005151 ; undefined
    28b0:	7c910200 	.inst	0x7c910200 ; undefined
    28b4:	00128a12 	.inst	0x00128a12 ; undefined
    28b8:	29510100 	ldp	w0, w0, [x8, #136]
    28bc:	02000000 	.inst	0x02000000 ; undefined
    28c0:	db127091 	.inst	0xdb127091 ; undefined
    28c4:	01000012 	.inst	0x01000012 ; undefined
    28c8:	00005651 	.inst	0x00005651 ; undefined
    28cc:	68910200 	.inst	0x68910200 ; undefined
    28d0:	12361300 	and	w0, w24, #0x7c00
    28d4:	4c010000 	.inst	0x4c010000 ; undefined
    28d8:	00014310 	.inst	0x00014310 ; undefined
    28dc:	00000000 	.inst	0x00000000 ; undefined
    28e0:	0000000c 	.inst	0x0000000c ; undefined
    28e4:	00000000 	.inst	0x00000000 ; undefined
    28e8:	6f139c01 	uqrshrn2	v1.8h, v0.4s, #13
    28ec:	01000012 	.inst	0x01000012 ; undefined
    28f0:	01430447 	.inst	0x01430447 ; undefined
    28f4:	00000000 	.inst	0x00000000 ; undefined
    28f8:	00000c00 	.inst	0x00000c00 ; undefined
    28fc:	00000000 	.inst	0x00000000 ; undefined
    2900:	119c0100 	.inst	0x119c0100 ; undefined
    2904:	0000133a 	.inst	0x0000133a ; undefined
    2908:	42543601 	.inst	0x42543601 ; undefined
    290c:	00000001 	.inst	0x00000001 ; undefined
    2910:	00b00000 	.inst	0x00b00000 ; undefined
    2914:	00000000 	.inst	0x00000000 ; undefined
    2918:	9c010000 	ldr	q0, 4918 <__module_entries_end-0x36e8>
    291c:	000002a6 	.inst	0x000002a6 ; undefined
    2920:	00123f0d 	.inst	0x00123f0d ; undefined
    2924:	31380100 	adds	w0, w8, #0xe00
    2928:	01000001 	.inst	0x01000001 ; undefined
    292c:	63140063 	.inst	0x63140063 ; undefined
    2930:	01000012 	.inst	0x01000012 ; undefined
    2934:	01418c1e 	.inst	0x01418c1e ; undefined
    2938:	00000000 	.inst	0x00000000 ; undefined
    293c:	0000c800 	.inst	0x0000c800 ; undefined
    2940:	00000000 	.inst	0x00000000 ; undefined
    2944:	129c0100 	mov	w0, #0xffff1ff7            	// #-57353
    2948:	0000125b 	.inst	0x0000125b ; undefined
    294c:	01311e01 	.inst	0x01311e01 ; undefined
    2950:	91020000 	add	x0, x0, #0x80
    2954:	124e1268 	.inst	0x124e1268 ; undefined
    2958:	1e010000 	.inst	0x1e010000 ; undefined
    295c:	00000051 	.inst	0x00000051 ; undefined
    2960:	15649102 	b	5926d68 <_freertos_vector_table+0x590ff40>
    2964:	000141a0 	.inst	0x000141a0 ; undefined
    2968:	00000000 	.inst	0x00000000 ; undefined
    296c:	0000009c 	.inst	0x0000009c ; undefined
    2970:	00000000 	.inst	0x00000000 ; undefined
    2974:	74696216 	.inst	0x74696216 ; undefined
    2978:	4a230100 	eon	w0, w8, w3
    297c:	02000000 	.inst	0x02000000 ; undefined
    2980:	69167c91 	.inst	0x69167c91 ; undefined
    2984:	01007172 	.inst	0x01007172 ; undefined
    2988:	00004a26 	.inst	0x00004a26 ; undefined
    298c:	78910200 	ldursh	x0, [x16, #-240]
    2990:	3d000000 	str	b0, [x0]
    2994:	04000004 	add	z4.b, p0/m, z4.b, z0.b
    2998:	00073400 	.inst	0x00073400 ; undefined
    299c:	8a010800 	and	x0, x0, x1, lsl #2
    29a0:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    29a4:	0000154c 	.inst	0x0000154c ; undefined
    29a8:	0001455c 	.inst	0x0001455c ; undefined
    29ac:	00000000 	.inst	0x00000000 ; undefined
    29b0:	00000584 	.inst	0x00000584 ; undefined
    29b4:	00000000 	.inst	0x00000000 ; undefined
    29b8:	00000de9 	.inst	0x00000de9 ; undefined
    29bc:	00140c02 	.inst	0x00140c02 ; undefined
    29c0:	00640400 	.inst	0x00640400 ; undefined
    29c4:	05020000 	orr	z0.d, z0.d, #0x1
    29c8:	00000064 	.inst	0x00000064 ; undefined
    29cc:	00146403 	.inst	0x00146403 ; undefined
    29d0:	7f030000 	.inst	0x7f030000 ; undefined
    29d4:	01000014 	.inst	0x01000014 ; undefined
    29d8:	00153503 	.inst	0x00153503 ; undefined
    29dc:	58030200 	ldr	x0, 8a1c <__module_entries_end+0xa1c>
    29e0:	03000014 	.inst	0x03000014 ; undefined
    29e4:	00148d03 	.inst	0x00148d03 ; undefined
    29e8:	b2030400 	orr	x0, x0, #0x6000000060000000
    29ec:	05000013 	orr	z19.s, z19.s, #0x1
    29f0:	0013c603 	.inst	0x0013c603 ; undefined
    29f4:	04000600 	add	z0.b, p1/m, z0.b, z16.b
    29f8:	01a70704 	.inst	0x01a70704 ; undefined
    29fc:	41020000 	.inst	0x41020000 ; undefined
    2a00:	04000014 	add	z20.b, p0/m, z20.b, z0.b
    2a04:	00000064 	.inst	0x00000064 ; undefined
    2a08:	00881802 	.inst	0x00881802 ; undefined
    2a0c:	50030000 	adr	x0, 8a0e <__module_entries_end+0xa0e>
    2a10:	00000014 	.inst	0x00000014 ; undefined
    2a14:	00159e03 	.inst	0x00159e03 ; undefined
    2a18:	05000100 	orr	z0.s, z0.s, #0x1ff
    2a1c:	08010140 	stxrb	w1, w0, [x10]
    2a20:	000001b7 	.inst	0x000001b7 ; undefined
    2a24:	0014cb06 	.inst	0x0014cb06 ; undefined
    2a28:	b7090100 	tbnz	x0, #33, 4a48 <__module_entries_end-0x35b8>
    2a2c:	00000001 	.inst	0x00000001 ; undefined
    2a30:	0014d206 	.inst	0x0014d206 ; undefined
    2a34:	ce0a0100 	.inst	0xce0a0100 ; undefined
    2a38:	30000001 	adr	x1, 2a39 <__module_entries_end-0x55c7>
    2a3c:	00136806 	.inst	0x00136806 ; undefined
    2a40:	d50b0100 	sys	#3, C0, C1, #0, x0
    2a44:	38000001 	sturb	w1, [x0]
    2a48:	0014dd06 	.inst	0x0014dd06 ; undefined
    2a4c:	ce0c0100 	.inst	0xce0c0100 ; undefined
    2a50:	48000001 	stxrh	w0, w1, [x0]
    2a54:	0013a606 	.inst	0x0013a606 ; undefined
    2a58:	d50d0100 	sys	#5, C0, C1, #0, x0
    2a5c:	50000001 	adr	x1, 2a5e <__module_entries_end-0x55a2>
    2a60:	0014e806 	.inst	0x0014e806 ; undefined
    2a64:	ce0e0100 	.inst	0xce0e0100 ; undefined
    2a68:	60000001 	.inst	0x60000001 ; undefined
    2a6c:	00149806 	.inst	0x00149806 ; undefined
    2a70:	d50f0100 	sys	#7, C0, C1, #0, x0
    2a74:	68000001 	.inst	0x68000001 ; undefined
    2a78:	0014f306 	.inst	0x0014f306 ; undefined
    2a7c:	ce100100 	.inst	0xce100100 ; undefined
    2a80:	78000001 	sturh	w1, [x0]
    2a84:	0014ac06 	.inst	0x0014ac06 ; undefined
    2a88:	d5110100 	msr	s2_1_c0_c1_0, x0
    2a8c:	80000001 	.inst	0x80000001 ; undefined
    2a90:	0014fe06 	.inst	0x0014fe06 ; undefined
    2a94:	ce120100 	.inst	0xce120100 ; undefined
    2a98:	90000001 	adrp	x1, 2000 <__module_entries_end-0x6000>
    2a9c:	0014a606 	.inst	0x0014a606 ; undefined
    2aa0:	d5130100 	msr	mdccsr_el0, x0
    2aa4:	98000001 	ldrsw	x1, 2aa4 <__module_entries_end-0x555c>
    2aa8:	00150906 	.inst	0x00150906 ; undefined
    2aac:	ce140100 	.inst	0xce140100 ; undefined
    2ab0:	a8000001 	stnp	x1, x0, [x0]
    2ab4:	00144a06 	.inst	0x00144a06 ; undefined
    2ab8:	d5150100 	msr	s2_5_c0_c1_0, x0
    2abc:	b0000001 	adrp	x1, 3000 <__module_entries_end-0x5000>
    2ac0:	00151406 	.inst	0x00151406 ; undefined
    2ac4:	ce160100 	.inst	0xce160100 ; undefined
    2ac8:	c0000001 	.inst	0xc0000001 ; undefined
    2acc:	0013ac06 	.inst	0x0013ac06 ; undefined
    2ad0:	d5170100 	msr	s2_7_c0_c1_0, x0
    2ad4:	c8000001 	stxr	w0, x1, [x0]
    2ad8:	00151f06 	.inst	0x00151f06 ; undefined
    2adc:	ce180100 	.inst	0xce180100 ; undefined
    2ae0:	d8000001 	prfm	pldl1strm, 2ae0 <__module_entries_end-0x5520>
    2ae4:	00147006 	.inst	0x00147006 ; undefined
    2ae8:	d5190100 	msr	s3_1_c0_c1_0, x0
    2aec:	e0000001 	.inst	0xe0000001 ; undefined
    2af0:	00152a06 	.inst	0x00152a06 ; undefined
    2af4:	ce1a0100 	.inst	0xce1a0100 ; undefined
    2af8:	f0000001 	adrp	x1, 5000 <__module_entries_end-0x3000>
    2afc:	00142a06 	.inst	0x00142a06 ; undefined
    2b00:	d51b0100 	msr	s3_3_c0_c1_0, x0
    2b04:	f8000001 	stur	x1, [x0]
    2b08:	00141f07 	.inst	0x00141f07 ; undefined
    2b0c:	ce1c0100 	.inst	0xce1c0100 ; undefined
    2b10:	08000001 	stxrb	w0, w1, [x0]
    2b14:	13ee0701 	.inst	0x13ee0701 ; undefined
    2b18:	1d010000 	.inst	0x1d010000 ; undefined
    2b1c:	000001d5 	.inst	0x000001d5 ; undefined
    2b20:	93070110 	.inst	0x93070110 ; undefined
    2b24:	01000015 	.inst	0x01000015 ; undefined
    2b28:	0001ce1e 	.inst	0x0001ce1e ; undefined
    2b2c:	07012000 	.inst	0x07012000 ; undefined
    2b30:	00001406 	.inst	0x00001406 ; undefined
    2b34:	01e51f01 	.inst	0x01e51f01 ; undefined
    2b38:	01280000 	.inst	0x01280000 ; undefined
    2b3c:	00147607 	.inst	0x00147607 ; undefined
    2b40:	d5200100 	mrs	x0, s0_0_c0_c1_0
    2b44:	30000001 	adr	x1, 2b45 <__module_entries_end-0x54bb>
    2b48:	ce080001 	.inst	0xce080001 ; undefined
    2b4c:	c7000001 	.inst	0xc7000001 ; undefined
    2b50:	09000001 	.inst	0x09000001 ; undefined
    2b54:	000001c7 	.inst	0x000001c7 ; undefined
    2b58:	08040005 	stxrb	w4, w5, [x0]
    2b5c:	00023207 	.inst	0x00023207 ; undefined
    2b60:	07080400 	.inst	0x07080400 ; undefined
    2b64:	000001a2 	.inst	0x000001a2 ; undefined
    2b68:	0001ce08 	.inst	0x0001ce08 ; undefined
    2b6c:	0001e500 	.inst	0x0001e500 ; undefined
    2b70:	01c70900 	.inst	0x01c70900 ; undefined
    2b74:	00010000 	.inst	0x00010000 ; undefined
    2b78:	0001ce08 	.inst	0x0001ce08 ; undefined
    2b7c:	0001f500 	.inst	0x0001f500 ; undefined
    2b80:	01c70900 	.inst	0x01c70900 ; undefined
    2b84:	00000000 	.inst	0x00000000 ; undefined
    2b88:	00136e0a 	.inst	0x00136e0a ; undefined
    2b8c:	88220100 	stxp	w2, w0, w0, [x8]
    2b90:	0b000000 	add	w0, w0, w0
    2b94:	000001f5 	.inst	0x000001f5 ; undefined
    2b98:	0013450c 	.inst	0x0013450c ; undefined
    2b9c:	20240100 	.inst	0x20240100 ; undefined
    2ba0:	09000002 	.inst	0x09000002 ; undefined
    2ba4:	01549003 	.inst	0x01549003 ; undefined
    2ba8:	00000000 	.inst	0x00000000 ; undefined
    2bac:	00080d00 	.inst	0x00080d00 ; undefined
    2bb0:	0e000002 	tbl	v2.8b, {v0.16b}, v0.8b
    2bb4:	0000021a 	.inst	0x0000021a ; undefined
    2bb8:	0013db0f 	.inst	0x0013db0f ; undefined
    2bbc:	90800100 	adrp	x0, ffffffff00022000 <_estack+0xfffffffef8012000>
    2bc0:	0000014a 	.inst	0x0000014a ; undefined
    2bc4:	50000000 	adr	x0, 2bc6 <__module_entries_end-0x543a>
    2bc8:	00000000 	.inst	0x00000000 ; undefined
    2bcc:	01000000 	.inst	0x01000000 ; undefined
    2bd0:	00026d9c 	.inst	0x00026d9c ; undefined
    2bd4:	13851000 	extr	w0, w0, w5, #4
    2bd8:	80010000 	.inst	0x80010000 ; undefined
    2bdc:	00000064 	.inst	0x00000064 ; undefined
    2be0:	116c9102 	add	w2, w8, #0xb24, lsl #12
    2be4:	0000127a 	.inst	0x0000127a ; undefined
    2be8:	01ce8201 	.inst	0x01ce8201 ; undefined
    2bec:	91020000 	add	x0, x0, #0x80
    2bf0:	14c41178 	b	31071d0 <_freertos_vector_table+0x30f03a8>
    2bf4:	83010000 	.inst	0x83010000 ; undefined
    2bf8:	000001ce 	.inst	0x000001ce ; undefined
    2bfc:	00709102 	.inst	0x00709102 ; undefined
    2c00:	0014b20f 	.inst	0x0014b20f ; undefined
    2c04:	ec630100 	.inst	0xec630100 ; undefined
    2c08:	00000148 	.inst	0x00000148 ; undefined
    2c0c:	a4000000 	ld1rqb	{z0.b}, p0/z, [x0, x0]
    2c10:	00000001 	.inst	0x00000001 ; undefined
    2c14:	01000000 	.inst	0x01000000 ; undefined
    2c18:	0002c39c 	.inst	0x0002c39c ; undefined
    2c1c:	13851000 	extr	w0, w0, w5, #4
    2c20:	63010000 	.inst	0x63010000 ; undefined
    2c24:	00000064 	.inst	0x00000064 ; undefined
    2c28:	106c9102 	adr	x2, dbe48 <_freertos_vector_table+0xc5020>
    2c2c:	00000236 	.inst	0x00000236 ; undefined
    2c30:	00296301 	.inst	0x00296301 ; NYI
    2c34:	91020000 	add	x0, x0, #0x80
    2c38:	127a1168 	.inst	0x127a1168 ; undefined
    2c3c:	65010000 	.inst	0x65010000 ; undefined
    2c40:	000001ce 	.inst	0x000001ce ; undefined
    2c44:	11789102 	add	w2, w8, #0xe24, lsl #12
    2c48:	000014c4 	.inst	0x000014c4 ; undefined
    2c4c:	01ce6601 	.inst	0x01ce6601 ; undefined
    2c50:	91020000 	add	x0, x0, #0x80
    2c54:	f50f0070 	.inst	0xf50f0070 ; undefined
    2c58:	01000013 	.inst	0x01000013 ; undefined
    2c5c:	01475046 	.inst	0x01475046 ; undefined
    2c60:	00000000 	.inst	0x00000000 ; undefined
    2c64:	00019c00 	.inst	0x00019c00 ; undefined
    2c68:	00000000 	.inst	0x00000000 ; undefined
    2c6c:	199c0100 	.inst	0x199c0100 ; undefined
    2c70:	10000003 	adr	x3, 2c70 <__module_entries_end-0x5390>
    2c74:	00001385 	.inst	0x00001385 ; undefined
    2c78:	00644601 	.inst	0x00644601 ; undefined
    2c7c:	91020000 	add	x0, x0, #0x80
    2c80:	0236106c 	.inst	0x0236106c ; undefined
    2c84:	46010000 	.inst	0x46010000 ; undefined
    2c88:	00000029 	.inst	0x00000029 ; undefined
    2c8c:	11689102 	add	w2, w8, #0xa24, lsl #12
    2c90:	0000127a 	.inst	0x0000127a ; undefined
    2c94:	01ce4801 	.inst	0x01ce4801 ; undefined
    2c98:	91020000 	add	x0, x0, #0x80
    2c9c:	14c41178 	b	310727c <_freertos_vector_table+0x30f0454>
    2ca0:	49010000 	.inst	0x49010000 ; undefined
    2ca4:	000001ce 	.inst	0x000001ce ; undefined
    2ca8:	00709102 	.inst	0x00709102 ; undefined
    2cac:	00138c12 	.inst	0x00138c12 ; undefined
    2cb0:	49420100 	.inst	0x49420100 ; undefined
    2cb4:	10000003 	adr	x3, 2cb4 <__module_entries_end-0x534c>
    2cb8:	00000147 	.inst	0x00000147 ; undefined
    2cbc:	40000000 	.inst	0x40000000 ; undefined
    2cc0:	00000000 	.inst	0x00000000 ; undefined
    2cc4:	01000000 	.inst	0x01000000 ; undefined
    2cc8:	0003499c 	.inst	0x0003499c ; undefined
    2ccc:	13851000 	extr	w0, w0, w5, #4
    2cd0:	42010000 	.inst	0x42010000 ; undefined
    2cd4:	00000064 	.inst	0x00000064 ; undefined
    2cd8:	007c9102 	.inst	0x007c9102 ; undefined
    2cdc:	69050413 	.inst	0x69050413 ; undefined
    2ce0:	0f00746e 	orr	v14.2s, #0x3, lsl #24
    2ce4:	00001544 	.inst	0x00001544 ; undefined
    2ce8:	46603701 	.inst	0x46603701 ; undefined
    2cec:	00000001 	.inst	0x00000001 ; undefined
    2cf0:	00b00000 	.inst	0x00b00000 ; undefined
    2cf4:	00000000 	.inst	0x00000000 ; undefined
    2cf8:	9c010000 	ldr	q0, 4cf8 <__module_entries_end-0x3308>
    2cfc:	000003a6 	.inst	0x000003a6 ; undefined
    2d00:	00138510 	.inst	0x00138510 ; undefined
    2d04:	64370100 	fmla	z0.h, z8.h, z7.h[2]
    2d08:	02000000 	.inst	0x02000000 ; undefined
    2d0c:	18106c91 	ldr	w17, 23a9c <_freertos_vector_table+0xcc74>
    2d10:	01000014 	.inst	0x01000014 ; undefined
    2d14:	00006437 	.inst	0x00006437 ; undefined
    2d18:	68910200 	.inst	0x68910200 ; undefined
    2d1c:	0014c411 	.inst	0x0014c411 ; undefined
    2d20:	ce380100 	.inst	0xce380100 ; undefined
    2d24:	02000001 	.inst	0x02000001 ; undefined
    2d28:	7a117891 	.inst	0x7a117891 ; undefined
    2d2c:	01000012 	.inst	0x01000012 ; undefined
    2d30:	0001ce39 	.inst	0x0001ce39 ; undefined
    2d34:	70910200 	adr	x0, fffffffffff24d77 <_estack+0xfffffffff7f14d77>
    2d38:	13951400 	extr	w0, w0, w21, #5
    2d3c:	33010000 	bfi	w0, w0, #31, #1
    2d40:	00014638 	.inst	0x00014638 ; undefined
    2d44:	00000000 	.inst	0x00000000 ; undefined
    2d48:	00000028 	.inst	0x00000028 ; undefined
    2d4c:	00000000 	.inst	0x00000000 ; undefined
    2d50:	03e09c01 	.inst	0x03e09c01 ; undefined
    2d54:	85100000 	.inst	0x85100000 ; undefined
    2d58:	01000013 	.inst	0x01000013 ; undefined
    2d5c:	00006433 	.inst	0x00006433 ; undefined
    2d60:	7c910200 	.inst	0x7c910200 ; undefined
    2d64:	72696415 	.inst	0x72696415 ; undefined
    2d68:	6b330100 	subs	w0, w8, w19, uxtb
    2d6c:	02000000 	.inst	0x02000000 ; undefined
    2d70:	16007891 	b	fffffffff8020fb4 <_estack+0xfffffffff0010fb4>
    2d74:	00001431 	.inst	0x00001431 ; undefined
    2d78:	455c2701 	.inst	0x455c2701 ; undefined
    2d7c:	00000001 	.inst	0x00000001 ; undefined
    2d80:	00dc0000 	.inst	0x00dc0000 ; undefined
    2d84:	00000000 	.inst	0x00000000 ; undefined
    2d88:	9c010000 	ldr	q0, 4d88 <__module_entries_end-0x3278>
    2d8c:	00138510 	.inst	0x00138510 ; undefined
    2d90:	64270100 	fmla	z0.h, z8.h, z7.h[0]
    2d94:	02000000 	.inst	0x02000000 ; undefined
    2d98:	9e105c91 	.inst	0x9e105c91 ; undefined
    2d9c:	01000014 	.inst	0x01000014 ; undefined
    2da0:	00006427 	.inst	0x00006427 ; undefined
    2da4:	58910200 	ldr	x0, fffffffffff24de4 <_estack+0xfffffffff7f14de4>
    2da8:	0014c411 	.inst	0x0014c411 ; undefined
    2dac:	49290100 	.inst	0x49290100 ; undefined
    2db0:	02000003 	.inst	0x02000003 ; undefined
    2db4:	76177c91 	.inst	0x76177c91 ; undefined
    2db8:	01006c61 	.inst	0x01006c61 ; undefined
    2dbc:	0001ce2b 	.inst	0x0001ce2b ; undefined
    2dc0:	70910200 	adr	x0, fffffffffff24e03 <_estack+0xfffffffff7f14e03>
    2dc4:	00138011 	.inst	0x00138011 ; undefined
    2dc8:	492d0100 	.inst	0x492d0100 ; undefined
    2dcc:	02000003 	.inst	0x02000003 ; undefined
    2dd0:	00006c91 	.inst	0x00006c91 ; undefined
    2dd4:	000002ac 	.inst	0x000002ac ; undefined
    2dd8:	088c0004 	stllrb	w4, [x0]
    2ddc:	01080000 	.inst	0x01080000 ; undefined
    2de0:	0000008a 	.inst	0x0000008a ; undefined
    2de4:	0015df0c 	.inst	0x0015df0c ; undefined
    2de8:	014ae000 	.inst	0x014ae000 ; undefined
    2dec:	00000000 	.inst	0x00000000 ; undefined
    2df0:	00026400 	.inst	0x00026400 ; undefined
    2df4:	00000000 	.inst	0x00000000 ; undefined
    2df8:	000eab00 	.inst	0x000eab00 ; undefined
    2dfc:	02500200 	.inst	0x02500200 ; undefined
    2e00:	0000aa1a 	.inst	0x0000aa1a ; undefined
    2e04:	134b0300 	.inst	0x134b0300 ; undefined
    2e08:	1b020000 	madd	w0, w0, w2, w0
    2e0c:	000000aa 	.inst	0x000000aa ; undefined
    2e10:	11f10300 	.inst	0x11f10300 ; undefined
    2e14:	1c020000 	ldr	s0, 6e14 <__module_entries_end-0x11ec>
    2e18:	000000aa 	.inst	0x000000aa ; undefined
    2e1c:	11fa0308 	.inst	0x11fa0308 ; undefined
    2e20:	1d020000 	.inst	0x1d020000 ; undefined
    2e24:	000000aa 	.inst	0x000000aa ; undefined
    2e28:	12220310 	and	w16, w24, #0x40000000
    2e2c:	1e020000 	.inst	0x1e020000 ; undefined
    2e30:	000000aa 	.inst	0x000000aa ; undefined
    2e34:	13600318 	.inst	0x13600318 ; undefined
    2e38:	1f020000 	fmadd	s0, s0, s2, s0
    2e3c:	000000aa 	.inst	0x000000aa ; undefined
    2e40:	12eb0320 	.inst	0x12eb0320 ; undefined
    2e44:	20020000 	.inst	0x20020000 ; undefined
    2e48:	000000aa 	.inst	0x000000aa ; undefined
    2e4c:	13540328 	.inst	0x13540328 ; undefined
    2e50:	21020000 	.inst	0x21020000 ; undefined
    2e54:	000000aa 	.inst	0x000000aa ; undefined
    2e58:	12f30330 	.inst	0x12f30330 ; undefined
    2e5c:	22020000 	.inst	0x22020000 ; undefined
    2e60:	000000aa 	.inst	0x000000aa ; undefined
    2e64:	12e20338 	.inst	0x12e20338 ; undefined
    2e68:	23020000 	.inst	0x23020000 ; undefined
    2e6c:	000000aa 	.inst	0x000000aa ; undefined
    2e70:	12030340 	and	w0, w26, #0x20000000
    2e74:	24020000 	cmphs	p0.b, p0/z, z0.b, z2.b
    2e78:	000000aa 	.inst	0x000000aa ; undefined
    2e7c:	08040048 	stxrb	w4, w8, [x2]
    2e80:	0001a207 	.inst	0x0001a207 ; undefined
    2e84:	12180500 	and	w0, w8, #0x300
    2e88:	25020000 	cmpge	p0.b, p0/z, z0.b, #2
    2e8c:	00000029 	.inst	0x00000029 ; undefined
    2e90:	0000b106 	.inst	0x0000b106 ; undefined
    2e94:	15c10700 	b	7044a94 <_freertos_vector_table+0x702dc6c>
    2e98:	27020000 	.inst	0x27020000 ; undefined
    2e9c:	000000dc 	.inst	0x000000dc ; undefined
    2ea0:	54d00309 	b.ls	fffffffffffa2f00 <_estack+0xfffffffff7f92f00>  // b.plast
    2ea4:	00000001 	.inst	0x00000001 ; undefined
    2ea8:	08080000 	stxrb	w8, w0, [x0]
    2eac:	000000bc 	.inst	0x000000bc ; undefined
    2eb0:	0000d609 	.inst	0x0000d609 ; undefined
    2eb4:	15a70a00 	b	69c56b4 <_freertos_vector_table+0x69ae88c>
    2eb8:	02480000 	.inst	0x02480000 ; undefined
    2ebc:	00015a2c 	.inst	0x00015a2c ; undefined
    2ec0:	4f4c0b00 	.inst	0x4f4c0b00 ; undefined
    2ec4:	2d020044 	stp	s4, s0, [x2, #16]
    2ec8:	000000aa 	.inst	0x000000aa ; undefined
    2ecc:	41560b00 	.inst	0x41560b00 ; undefined
    2ed0:	2e02004c 	ext	v12.8b, v2.8b, v2.8b, #0
    2ed4:	000000aa 	.inst	0x000000aa ; undefined
    2ed8:	54430b08 	b.hi	89038 <_freertos_vector_table+0x72210>  // b.pmore
    2edc:	2f02004c 	.inst	0x2f02004c ; undefined
    2ee0:	000000aa 	.inst	0x000000aa ; undefined
    2ee4:	4c430b10 	.inst	0x4c430b10 ; undefined
    2ee8:	30020049 	adr	x9, 6ef1 <__module_entries_end-0x110f>
    2eec:	000000aa 	.inst	0x000000aa ; undefined
    2ef0:	49520b18 	.inst	0x49520b18 ; undefined
    2ef4:	31020053 	adds	w19, w2, #0x80
    2ef8:	000000aa 	.inst	0x000000aa ; undefined
    2efc:	494d0b20 	.inst	0x494d0b20 ; undefined
    2f00:	32020053 	orr	w19, w2, #0x40000000
    2f04:	000000aa 	.inst	0x000000aa ; undefined
    2f08:	4c520b28 	.inst	0x4c520b28 ; undefined
    2f0c:	33020044 	bfi	w4, w2, #30, #1
    2f10:	000000aa 	.inst	0x000000aa ; undefined
    2f14:	49440b30 	.inst	0x49440b30 ; undefined
    2f18:	34020056 	cbz	w22, 6f20 <__module_entries_end-0x10e0>
    2f1c:	000000aa 	.inst	0x000000aa ; undefined
    2f20:	4e430b38 	.inst	0x4e430b38 ; undefined
    2f24:	35020054 	cbnz	w20, 6f2c <__module_entries_end-0x10d4>
    2f28:	000000aa 	.inst	0x000000aa ; undefined
    2f2c:	b0050040 	adrp	x0, a00b000 <_estack+0x1ffb000>
    2f30:	02000015 	.inst	0x02000015 ; undefined
    2f34:	0000e136 	.inst	0x0000e136 ; undefined
    2f38:	015a0600 	.inst	0x015a0600 ; undefined
    2f3c:	d5070000 	msr	s0_7_c0_c0_0, x0
    2f40:	02000015 	.inst	0x02000015 ; undefined
    2f44:	00018538 	.inst	0x00018538 ; undefined
    2f48:	d8030900 	prfm	pldl1keep, 9068 <__module_entries_end+0x1068>
    2f4c:	00000154 	.inst	0x00000154 ; undefined
    2f50:	08000000 	stxrb	w0, w0, [x0]
    2f54:	00016508 	.inst	0x00016508 ; undefined
    2f58:	017f0900 	.inst	0x017f0900 ; undefined
    2f5c:	260c0000 	.inst	0x260c0000 ; undefined
    2f60:	01000016 	.inst	0x01000016 ; undefined
    2f64:	014cf038 	.inst	0x014cf038 ; undefined
    2f68:	00000000 	.inst	0x00000000 ; undefined
    2f6c:	00005400 	.inst	0x00005400 ; undefined
    2f70:	00000000 	.inst	0x00000000 ; undefined
    2f74:	b49c0100 	cbz	x0, fffffffffff3af94 <_estack+0xfffffffff7f2af94>
    2f78:	0d000001 	st1	{v1.b}[0], [x0]
    2f7c:	38010073 	sturb	w19, [x3, #16]
    2f80:	000001b4 	.inst	0x000001b4 ; undefined
    2f84:	00789102 	.inst	0x00789102 ; undefined
    2f88:	01ba0808 	.inst	0x01ba0808 ; undefined
    2f8c:	01040000 	.inst	0x01040000 ; undefined
    2f90:	0000fb08 	.inst	0x0000fb08 ; undefined
    2f94:	16300c00 	b	fffffffff8c05f94 <_estack+0xfffffffff0bf5f94>
    2f98:	1e010000 	.inst	0x1e010000 ; undefined
    2f9c:	00014b7c 	.inst	0x00014b7c ; undefined
    2fa0:	00000000 	.inst	0x00000000 ; undefined
    2fa4:	00000174 	.inst	0x00000174 ; undefined
    2fa8:	00000000 	.inst	0x00000000 ; undefined
    2fac:	01ec9c01 	.inst	0x01ec9c01 ; undefined
    2fb0:	720e0000 	ands	w0, w0, #0x40000
    2fb4:	20010061 	.inst	0x20010061 ; undefined
    2fb8:	000001ec 	.inst	0x000001ec ; undefined
    2fbc:	007c9102 	.inst	0x007c9102 ; undefined
    2fc0:	a7070404 	.inst	0xa7070404 ; undefined
    2fc4:	0f000001 	.inst	0x0f000001 ; undefined
    2fc8:	00001640 	.inst	0x00001640 ; undefined
    2fcc:	4b341301 	sub	w1, w24, w20, uxtb #4
    2fd0:	00000001 	.inst	0x00000001 ; undefined
    2fd4:	00480000 	.inst	0x00480000 ; undefined
    2fd8:	00000000 	.inst	0x00000000 ; undefined
    2fdc:	9c010000 	ldr	q0, 4fdc <__module_entries_end-0x3024>
    2fe0:	0000021d 	.inst	0x0000021d ; undefined
    2fe4:	0100630d 	.inst	0x0100630d ; undefined
    2fe8:	0001ec13 	.inst	0x0001ec13 ; undefined
    2fec:	7c910200 	.inst	0x7c910200 ; undefined
    2ff0:	15bb1000 	b	6ec6ff0 <_freertos_vector_table+0x6eb01c8>
    2ff4:	0d010000 	.inst	0x0d010000 ; undefined
    2ff8:	00014b20 	.inst	0x00014b20 ; undefined
    2ffc:	00000000 	.inst	0x00000000 ; undefined
    3000:	00000014 	.inst	0x00000014 ; undefined
    3004:	00000000 	.inst	0x00000000 ; undefined
    3008:	02499c01 	.inst	0x02499c01 ; undefined
    300c:	4a110000 	eor	w0, w0, w17
    3010:	01000016 	.inst	0x01000016 ; undefined
    3014:	0001ec0d 	.inst	0x0001ec0d ; undefined
    3018:	7c910200 	.inst	0x7c910200 ; undefined
    301c:	163a1200 	b	fffffffff8e8781c <_estack+0xfffffffff0e7781c>
    3020:	08010000 	stxrb	w1, w0, [x0]
    3024:	000001ec 	.inst	0x000001ec ; undefined
    3028:	00014b08 	.inst	0x00014b08 ; undefined
    302c:	00000000 	.inst	0x00000000 ; undefined
    3030:	00000018 	.inst	0x00000018 ; undefined
    3034:	00000000 	.inst	0x00000000 ; undefined
    3038:	02799c01 	.inst	0x02799c01 ; undefined
    303c:	ca110000 	eor	x0, x0, x17
    3040:	01000015 	.inst	0x01000015 ; undefined
    3044:	0001ec08 	.inst	0x0001ec08 ; undefined
    3048:	7c910200 	.inst	0x7c910200 ; undefined
    304c:	15cf1300 	b	73c7c4c <_freertos_vector_table+0x73b0e24>
    3050:	03010000 	.inst	0x03010000 ; undefined
    3054:	00014ae0 	.inst	0x00014ae0 ; undefined
    3058:	00000000 	.inst	0x00000000 ; undefined
    305c:	00000028 	.inst	0x00000028 ; undefined
    3060:	00000000 	.inst	0x00000000 ; undefined
    3064:	ca119c01 	eor	x1, x0, x17, lsl #39
    3068:	01000015 	.inst	0x01000015 ; undefined
    306c:	0001ec03 	.inst	0x0001ec03 ; undefined
    3070:	7c910200 	.inst	0x7c910200 ; undefined
    3074:	00164a11 	.inst	0x00164a11 ; undefined
    3078:	ec030100 	.inst	0xec030100 ; undefined
    307c:	02000001 	.inst	0x02000001 ; undefined
    3080:	00007891 	.inst	0x00007891 ; undefined
    3084:	00000313 	.inst	0x00000313 ; undefined
    3088:	09bd0004 	.inst	0x09bd0004 ; undefined
    308c:	01080000 	.inst	0x01080000 ; undefined
    3090:	0000008a 	.inst	0x0000008a ; undefined
    3094:	00176d0c 	.inst	0x00176d0c ; undefined
    3098:	014d4400 	.inst	0x014d4400 ; undefined
    309c:	00000000 	.inst	0x00000000 ; undefined
    30a0:	0004a000 	.inst	0x0004a000 ; undefined
    30a4:	00000000 	.inst	0x00000000 ; undefined
    30a8:	000f6f00 	.inst	0x000f6f00 ; undefined
    30ac:	00000200 	.inst	0x00000200 ; undefined
    30b0:	d8020000 	prfm	pldl1keep, 70b0 <__module_entries_end-0xf50>
    30b4:	00000039 	.inst	0x00000039 ; undefined
    30b8:	00002903 	.inst	0x00002903 ; undefined
    30bc:	07080400 	.inst	0x07080400 ; undefined
    30c0:	000001a2 	.inst	0x000001a2 ; undefined
    30c4:	00003905 	.inst	0x00003905 ; undefined
    30c8:	07040400 	.inst	0x07040400 ; undefined
    30cc:	000001a7 	.inst	0x000001a7 ; undefined
    30d0:	69050406 	.inst	0x69050406 ; undefined
    30d4:	0400746e 	mls	z14.b, p5/m, z3.b, z0.b
    30d8:	02490508 	.inst	0x02490508 ; undefined
    30dc:	08040000 	stxrb	w4, w0, [x0]
    30e0:	00024405 	.inst	0x00024405 ; undefined
    30e4:	08010400 	stxrb	w1, w0, [x0]
    30e8:	000000f2 	.inst	0x000000f2 ; undefined
    30ec:	1a070204 	adc	w4, w16, w7
    30f0:	03000001 	.inst	0x03000001 ; undefined
    30f4:	00000068 	.inst	0x00000068 ; undefined
    30f8:	f4060104 	.inst	0xf4060104 ; undefined
    30fc:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    3100:	015b0502 	.inst	0x015b0502 ; undefined
    3104:	08040000 	stxrb	w4, w0, [x0]
    3108:	00023207 	.inst	0x00023207 ; undefined
    310c:	04080700 	smax	z0.b, p1/m, z0.b, z24.b
    3110:	00fb0801 	.inst	0x00fb0801 ; undefined
    3114:	08040000 	stxrb	w4, w0, [x0]
    3118:	00019d07 	.inst	0x00019d07 ; undefined
    311c:	04100400 	mul	z0.b, p1/m, z0.b, z0.b
    3120:	000002be 	.inst	0x000002be ; undefined
    3124:	0016c608 	.inst	0x0016c608 ; undefined
    3128:	01100000 	.inst	0x01100000 ; undefined
    312c:	0000c45c 	.inst	0x0000c45c ; undefined
    3130:	16d80900 	b	fffffffffb605530 <_estack+0xfffffffff35f5530>
    3134:	61010000 	.inst	0x61010000 ; undefined
    3138:	00000040 	.inst	0x00000040 ; undefined
    313c:	0016d109 	.inst	0x0016d109 ; undefined
    3140:	c4630100 	prfb	pldl1keep, p0, [x8, z3.d, sxtw]
    3144:	00000000 	.inst	0x00000000 ; undefined
    3148:	0000610a 	.inst	0x0000610a ; undefined
    314c:	0000d500 	.inst	0x0000d500 ; undefined
    3150:	00820b00 	.inst	0x00820b00 ; undefined
    3154:	0fff0000 	.inst	0x0fff0000 ; undefined
    3158:	16eb0c00 	b	fffffffffbac6158 <_estack+0xfffffffff3ab6158>
    315c:	64010000 	.inst	0x64010000 ; undefined
    3160:	000000a0 	.inst	0x000000a0 ; undefined
    3164:	5e100309 	sha1c	q9, s24, v16.4s
    3168:	00000001 	.inst	0x00000001 ; undefined
    316c:	800d0000 	.inst	0x800d0000 ; undefined
    3170:	10000016 	adr	x22, 3170 <__module_entries_end-0x4e90>
    3174:	010f6801 	.inst	0x010f6801 ; undefined
    3178:	ee0e0000 	.inst	0xee0e0000 ; undefined
    317c:	01000017 	.inst	0x01000017 ; undefined
    3180:	00010f6a 	.inst	0x00010f6a ; undefined
    3184:	e00e0000 	.inst	0xe00e0000 ; undefined
    3188:	01000016 	.inst	0x01000016 ; undefined
    318c:	0000296b 	.inst	0x0000296b ; undefined
    3190:	0f000800 	.inst	0x0f000800 ; undefined
    3194:	0000ea08 	.inst	0x0000ea08 ; undefined
    3198:	174c0200 	b	fffffffffd303998 <_estack+0xfffffffff52f3998>
    319c:	6c010000 	stnp	d0, d0, [x0, #16]
    31a0:	000000ea 	.inst	0x000000ea ; undefined
    31a4:	0017350c 	.inst	0x0017350c ; undefined
    31a8:	6f820100 	mla	v0.4s, v8.4s, v2.s[0]
    31ac:	09000000 	.inst	0x09000000 ; undefined
    31b0:	0154e003 	.inst	0x0154e003 ; undefined
    31b4:	00000000 	.inst	0x00000000 ; undefined
    31b8:	17070c00 	b	fffffffffc1c61b8 <_estack+0xfffffffff41b61b8>
    31bc:	85010000 	.inst	0x85010000 ; undefined
    31c0:	00000034 	.inst	0x00000034 ; undefined
    31c4:	54e80309 	b.ls	fffffffffffd3224 <_estack+0xfffffffff7fc3224>  // b.plast
    31c8:	00000001 	.inst	0x00000001 ; undefined
    31cc:	450c0000 	.inst	0x450c0000 ; undefined
    31d0:	01000017 	.inst	0x01000017 ; undefined
    31d4:	00011588 	.inst	0x00011588 ; undefined
    31d8:	10030900 	adr	x0, 92f8 <__module_entries_end+0x12f8>
    31dc:	0000016e 	.inst	0x0000016e ; undefined
    31e0:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    31e4:	000016f1 	.inst	0x000016f1 ; undefined
    31e8:	01748801 	.inst	0x01748801 ; undefined
    31ec:	03090000 	.inst	0x03090000 ; undefined
    31f0:	00016e20 	.inst	0x00016e20 ; undefined
    31f4:	00000000 	.inst	0x00000000 ; undefined
    31f8:	0115080f 	.inst	0x0115080f ; undefined
    31fc:	cb0c0000 	sub	x0, x0, x12
    3200:	01000017 	.inst	0x01000017 ; undefined
    3204:	0000298c 	.inst	0x0000298c ; undefined
    3208:	e0030900 	.inst	0xe0030900 ; undefined
    320c:	00000155 	.inst	0x00000155 ; undefined
    3210:	10000000 	adr	x0, 3210 <__module_entries_end-0x4df0>
    3214:	00001757 	.inst	0x00001757 ; undefined
    3218:	00299101 	.inst	0x00299101 ; NYI
    321c:	03090000 	.inst	0x03090000 ; undefined
    3220:	00015e08 	.inst	0x00015e08 ; undefined
    3224:	00000000 	.inst	0x00000000 ; undefined
    3228:	00165011 	.inst	0x00165011 ; undefined
    322c:	01340100 	.inst	0x01340100 ; undefined
    3230:	00015098 	.inst	0x00015098 ; undefined
    3234:	00000000 	.inst	0x00000000 ; undefined
    3238:	0000014c 	.inst	0x0000014c ; undefined
    323c:	00000000 	.inst	0x00000000 ; undefined
    3240:	01f09c01 	.inst	0x01f09c01 ; undefined
    3244:	09120000 	.inst	0x09120000 ; undefined
    3248:	01000018 	.inst	0x01000018 ; undefined
    324c:	01740134 	.inst	0x01740134 ; undefined
    3250:	91020000 	add	x0, x0, #0x80
    3254:	044d1368 	uabd	z8.h, p4/m, z8.h, z27.h
    3258:	36010000 	tbz	w0, #0, 5258 <__module_entries_end-0x2da8>
    325c:	00017401 	.inst	0x00017401 ; undefined
    3260:	78910200 	ldursh	x0, [x16, #-240]
    3264:	63757014 	.inst	0x63757014 ; undefined
    3268:	01370100 	.inst	0x01370100 ; undefined
    326c:	000001f0 	.inst	0x000001f0 ; undefined
    3270:	00709102 	.inst	0x00709102 ; undefined
    3274:	0061080f 	.inst	0x0061080f ; undefined
    3278:	8d110000 	.inst	0x8d110000 ; undefined
    327c:	01000016 	.inst	0x01000016 ; undefined
    3280:	4fb00113 	.inst	0x4fb00113 ; undefined
    3284:	00000001 	.inst	0x00000001 ; undefined
    3288:	00e80000 	.inst	0x00e80000 ; undefined
    328c:	00000000 	.inst	0x00000000 ; undefined
    3290:	9c010000 	ldr	q0, 5290 <__module_entries_end-0x2d70>
    3294:	00000233 	.inst	0x00000233 ; undefined
    3298:	0016b513 	.inst	0x0016b513 ; undefined
    329c:	01150100 	.inst	0x01150100 ; undefined
    32a0:	00000174 	.inst	0x00000174 ; undefined
    32a4:	13709102 	.inst	0x13709102 ; undefined
    32a8:	000017fe 	.inst	0x000017fe ; undefined
    32ac:	f0011601 	adrp	x1, 22c6000 <_freertos_vector_table+0x22af1d8>
    32b0:	02000001 	.inst	0x02000001 ; undefined
    32b4:	15007891 	b	40214f8 <_freertos_vector_table+0x400a6d0>
    32b8:	0000171f 	.inst	0x0000171f ; undefined
    32bc:	a8010d01 	stnp	x1, x3, [x8, #16]
    32c0:	0000014f 	.inst	0x0000014f ; undefined
    32c4:	08000000 	stxrb	w0, w0, [x0]
    32c8:	00000000 	.inst	0x00000000 ; undefined
    32cc:	01000000 	.inst	0x01000000 ; undefined
    32d0:	166b169c 	b	fffffffff9ac8d40 <_estack+0xfffffffff1ab8d40>
    32d4:	07010000 	.inst	0x07010000 ; undefined
    32d8:	00002901 	.inst	0x00002901 ; undefined
    32dc:	014f9800 	.inst	0x014f9800 ; undefined
    32e0:	00000000 	.inst	0x00000000 ; undefined
    32e4:	00001000 	.inst	0x00001000 ; undefined
    32e8:	00000000 	.inst	0x00000000 ; undefined
    32ec:	179c0100 	b	fffffffffe7036ec <_estack+0xfffffffff66f36ec>
    32f0:	000017c1 	.inst	0x000017c1 ; undefined
    32f4:	4f18ee01 	.inst	0x4f18ee01 ; undefined
    32f8:	00000001 	.inst	0x00000001 ; undefined
    32fc:	00800000 	.inst	0x00800000 ; undefined
    3300:	00000000 	.inst	0x00000000 ; undefined
    3304:	9c010000 	ldr	q0, 5304 <__module_entries_end-0x2cfc>
    3308:	000002b2 	.inst	0x000002b2 ; undefined
    330c:	00767018 	.inst	0x00767018 ; undefined
    3310:	0089ee01 	.inst	0x0089ee01 ; undefined
    3314:	91020000 	add	x0, x0, #0x80
    3318:	75701968 	.inst	0x75701968 ; undefined
    331c:	f0010063 	adrp	x3, 2012000 <_freertos_vector_table+0x1ffb1d8>
    3320:	000001f0 	.inst	0x000001f0 ; undefined
    3324:	0c789102 	.inst	0x0c789102 ; undefined
    3328:	000016a1 	.inst	0x000016a1 ; undefined
    332c:	0174f101 	.inst	0x0174f101 ; undefined
    3330:	91020000 	add	x0, x0, #0x80
    3334:	a81a0070 	stnp	x16, x0, [x3, #416]
    3338:	01000016 	.inst	0x01000016 ; undefined
    333c:	00008992 	.inst	0x00008992 ; undefined
    3340:	014d4400 	.inst	0x014d4400 ; undefined
    3344:	00000000 	.inst	0x00000000 ; undefined
    3348:	0001d400 	.inst	0x0001d400 ; undefined
    334c:	00000000 	.inst	0x00000000 ; undefined
    3350:	1b9c0100 	.inst	0x1b9c0100 ; undefined
    3354:	00001761 	.inst	0x00001761 ; undefined
    3358:	00299201 	.inst	0x00299201 ; NYI
    335c:	91020000 	add	x0, x0, #0x80
    3360:	16990c58 	b	fffffffffa6464c0 <_estack+0xfffffffff26364c0>
    3364:	94010000 	bl	43364 <_freertos_vector_table+0x2c53c>
    3368:	00000174 	.inst	0x00000174 ; undefined
    336c:	0c789102 	.inst	0x0c789102 ; undefined
    3370:	000016f7 	.inst	0x000016f7 ; undefined
    3374:	01749401 	.inst	0x01749401 ; undefined
    3378:	91020000 	add	x0, x0, #0x80
    337c:	17df0c70 	b	ffffffffff7c653c <_estack+0xfffffffff77b653c>
    3380:	94010000 	bl	43380 <_freertos_vector_table+0x2c558>
    3384:	00000174 	.inst	0x00000174 ; undefined
    3388:	0c609102 	.inst	0x0c609102 ; undefined
    338c:	00001716 	.inst	0x00001716 ; undefined
    3390:	00899501 	.inst	0x00899501 ; undefined
    3394:	91020000 	add	x0, x0, #0x80
    3398:	3e000068 	.inst	0x3e000068 ; undefined
    339c:	04000002 	add	z2.b, p0/m, z2.b, z0.b
    33a0:	000b5400 	.inst	0x000b5400 ; undefined
    33a4:	8a010800 	and	x0, x0, x1, lsl #2
    33a8:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    33ac:	00001851 	.inst	0x00001851 ; undefined
    33b0:	000151e4 	.inst	0x000151e4 ; undefined
    33b4:	00000000 	.inst	0x00000000 ; undefined
    33b8:	000000f0 	.inst	0x000000f0 ; undefined
    33bc:	00000000 	.inst	0x00000000 ; undefined
    33c0:	00001098 	.inst	0x00001098 ; undefined
    33c4:	49050802 	.inst	0x49050802 ; undefined
    33c8:	02000002 	.inst	0x02000002 ; undefined
    33cc:	01a20708 	.inst	0x01a20708 ; undefined
    33d0:	04020000 	.inst	0x04020000 ; undefined
    33d4:	0001a707 	.inst	0x0001a707 ; undefined
    33d8:	05080200 	.inst	0x05080200 ; undefined
    33dc:	00000244 	.inst	0x00000244 ; undefined
    33e0:	be041002 	.inst	0xbe041002 ; undefined
    33e4:	02000002 	.inst	0x02000002 ; undefined
    33e8:	00f40601 	.inst	0x00f40601 ; undefined
    33ec:	02020000 	.inst	0x02020000 ; undefined
    33f0:	00015b05 	.inst	0x00015b05 ; undefined
    33f4:	05040300 	.inst	0x05040300 ; undefined
    33f8:	00746e69 	.inst	0x00746e69 ; undefined
    33fc:	f2080102 	ands	x2, x8, #0x100000001000000
    3400:	02000000 	.inst	0x02000000 ; undefined
    3404:	011a0702 	.inst	0x011a0702 ; undefined
    3408:	b5040000 	cbnz	x0, b408 <__module_entries_end+0x3408>
    340c:	02000002 	.inst	0x02000002 ; undefined
    3410:	00003733 	.inst	0x00003733 ; undefined
    3414:	003d0400 	.inst	0x003d0400 ; NYI
    3418:	37020000 	tbnz	w0, #0, 7418 <__module_entries_end-0xbe8>
    341c:	00000030 	.inst	0x00000030 ; undefined
    3420:	5d040805 	.inst	0x5d040805 ; undefined
    3424:	03000003 	.inst	0x03000003 ; undefined
    3428:	00007a64 	.inst	0x00007a64 ; undefined
    342c:	07080200 	.inst	0x07080200 ; undefined
    3430:	00000232 	.inst	0x00000232 ; undefined
    3434:	fb080102 	.inst	0xfb080102 ; undefined
    3438:	06000000 	.inst	0x06000000 ; undefined
    343c:	000015a7 	.inst	0x000015a7 ; undefined
    3440:	190a0148 	.inst	0x190a0148 ; undefined
    3444:	07000001 	.inst	0x07000001 ; undefined
    3448:	00444f4c 	.inst	0x00444f4c ; undefined
    344c:	00300b01 	.inst	0x00300b01 ; NYI
    3450:	07000000 	.inst	0x07000000 ; undefined
    3454:	004c4156 	.inst	0x004c4156 ; undefined
    3458:	00300c01 	.inst	0x00300c01 ; NYI
    345c:	07080000 	.inst	0x07080000 ; undefined
    3460:	004c5443 	.inst	0x004c5443 ; undefined
    3464:	00300d01 	.inst	0x00300d01 ; NYI
    3468:	07100000 	.inst	0x07100000 ; undefined
    346c:	00494c43 	.inst	0x00494c43 ; undefined
    3470:	00300e01 	.inst	0x00300e01 ; NYI
    3474:	07180000 	.inst	0x07180000 ; undefined
    3478:	00534952 	.inst	0x00534952 ; undefined
    347c:	00300f01 	.inst	0x00300f01 ; NYI
    3480:	07200000 	.inst	0x07200000 ; undefined
    3484:	0053494d 	.inst	0x0053494d ; undefined
    3488:	00301001 	.inst	0x00301001 ; NYI
    348c:	07280000 	.inst	0x07280000 ; undefined
    3490:	00444c52 	.inst	0x00444c52 ; undefined
    3494:	00301101 	.inst	0x00301101 ; NYI
    3498:	07300000 	.inst	0x07300000 ; undefined
    349c:	00564944 	.inst	0x00564944 ; undefined
    34a0:	00301201 	.inst	0x00301201 ; NYI
    34a4:	07380000 	.inst	0x07380000 ; undefined
    34a8:	00544e43 	.inst	0x00544e43 ; undefined
    34ac:	00301301 	.inst	0x00301301 ; NYI
    34b0:	00400000 	.inst	0x00400000 ; undefined
    34b4:	0015a804 	.inst	0x0015a804 ; undefined
    34b8:	a0140100 	.inst	0xa0140100 ; undefined
    34bc:	08000000 	stxrb	w0, w0, [x0]
    34c0:	00000119 	.inst	0x00000119 ; undefined
    34c4:	00134509 	.inst	0x00134509 ; undefined
    34c8:	44160100 	.inst	0x44160100 ; undefined
    34cc:	09000001 	.inst	0x09000001 ; undefined
    34d0:	0154f003 	.inst	0x0154f003 ; undefined
    34d4:	00000000 	.inst	0x00000000 ; undefined
    34d8:	24080a00 	cmphs	p0.b, p2/z, z16.b, z8.b
    34dc:	0b000001 	add	w1, w0, w0
    34e0:	0000013e 	.inst	0x0000013e ; undefined
    34e4:	00183a0c 	.inst	0x00183a0c ; undefined
    34e8:	993d0100 	.inst	0x993d0100 ; undefined
    34ec:	09000000 	.inst	0x09000000 ; undefined
    34f0:	016e2803 	.inst	0x016e2803 ; undefined
    34f4:	00000000 	.inst	0x00000000 ; undefined
    34f8:	18190d00 	ldr	w0, 35698 <_freertos_vector_table+0x1e870>
    34fc:	43010000 	.inst	0x43010000 ; undefined
    3500:	000152a4 	.inst	0x000152a4 ; undefined
    3504:	00000000 	.inst	0x00000000 ; undefined
    3508:	00000030 	.inst	0x00000030 ; undefined
    350c:	00000000 	.inst	0x00000000 ; undefined
    3510:	01989c01 	.inst	0x01989c01 ; undefined
    3514:	af0e0000 	.inst	0xaf0e0000 ; undefined
    3518:	01000018 	.inst	0x01000018 ; undefined
    351c:	00003743 	.inst	0x00003743 ; undefined
    3520:	7c910200 	.inst	0x7c910200 ; undefined
    3524:	0012db0e 	.inst	0x0012db0e ; undefined
    3528:	85430100 	.inst	0x85430100 ; undefined
    352c:	02000000 	.inst	0x02000000 ; undefined
    3530:	0f007091 	.inst	0x0f007091 ; undefined
    3534:	00001898 	.inst	0x00001898 ; undefined
    3538:	005a3901 	.inst	0x005a3901 ; undefined
    353c:	52880000 	mov	w0, #0x4000                	// #16384
    3540:	00000001 	.inst	0x00000001 ; undefined
    3544:	001c0000 	.inst	0x001c0000 ; undefined
    3548:	00000000 	.inst	0x00000000 ; undefined
    354c:	9c010000 	ldr	q0, 554c <__module_entries_end-0x2ab4>
    3550:	000001d5 	.inst	0x000001d5 ; undefined
    3554:	0018220e 	.inst	0x0018220e ; undefined
    3558:	6f390100 	.inst	0x6f390100 ; undefined
    355c:	02000000 	.inst	0x02000000 ; undefined
    3560:	3a107c91 	.inst	0x3a107c91 ; undefined
    3564:	01000013 	.inst	0x01000013 ; undefined
    3568:	00005a3b 	.inst	0x00005a3b ; undefined
    356c:	00001100 	.inst	0x00001100 ; undefined
    3570:	00025f12 	.inst	0x00025f12 ; undefined
    3574:	5a1a0100 	sbc	w0, w8, w26
    3578:	e4000000 	.inst	0xe4000000 ; undefined
    357c:	00000151 	.inst	0x00000151 ; undefined
    3580:	a4000000 	ld1rqb	{z0.b}, p0/z, [x0, x0]
    3584:	00000000 	.inst	0x00000000 ; undefined
    3588:	01000000 	.inst	0x01000000 ; undefined
    358c:	182b099c 	ldr	w28, 596bc <_freertos_vector_table+0x42894>
    3590:	1c010000 	ldr	s0, 5590 <__module_entries_end-0x2a70>
    3594:	00000030 	.inst	0x00000030 ; undefined
    3598:	13789102 	.inst	0x13789102 ; undefined
    359c:	00001236 	.inst	0x00001236 ; undefined
    35a0:	005a2a01 	.inst	0x005a2a01 ; undefined
    35a4:	02110000 	.inst	0x02110000 ; undefined
    35a8:	00110000 	.inst	0x00110000 ; undefined
    35ac:	00122a13 	.inst	0x00122a13 ; undefined
    35b0:	5a330100 	.inst	0x5a330100 ; undefined
    35b4:	22000000 	.inst	0x22000000 ; undefined
    35b8:	11000002 	add	w2, w0, #0x0
    35bc:	130a1300 	sbfiz	w0, w24, #22, #5
    35c0:	35010000 	cbnz	w0, 55c0 <__module_entries_end-0x2a40>
    35c4:	0000005a 	.inst	0x0000005a ; undefined
    35c8:	00000233 	.inst	0x00000233 ; undefined
    35cc:	6f100011 	.inst	0x6f100011 ; undefined
    35d0:	01000012 	.inst	0x01000012 ; undefined
    35d4:	00005a37 	.inst	0x00005a37 ; undefined
    35d8:	00001100 	.inst	0x00001100 ; undefined
    35dc:	0000e900 	.inst	0x0000e900 ; undefined
    35e0:	6b000400 	subs	w0, w0, w0, lsl #1
    35e4:	0800000c 	stxrb	w0, w12, [x0]
    35e8:	00008a01 	.inst	0x00008a01 ; undefined
    35ec:	18c50c00 	ldr	w0, fffffffffff8d76c <_estack+0xfffffffff7f7d76c>
    35f0:	52d40000 	.inst	0x52d40000 ; undefined
    35f4:	00000001 	.inst	0x00000001 ; undefined
    35f8:	00ac0000 	.inst	0x00ac0000 ; undefined
    35fc:	00000000 	.inst	0x00000000 ; undefined
    3600:	11b90000 	.inst	0x11b90000 ; undefined
    3604:	08020000 	stxrb	w2, w0, [x0]
    3608:	00024905 	.inst	0x00024905 ; undefined
    360c:	07080200 	.inst	0x07080200 ; undefined
    3610:	000001a2 	.inst	0x000001a2 ; undefined
    3614:	a7070402 	.inst	0xa7070402 ; undefined
    3618:	02000001 	.inst	0x02000001 ; undefined
    361c:	02440508 	.inst	0x02440508 ; undefined
    3620:	10020000 	adr	x0, 7620 <__module_entries_end-0x9e0>
    3624:	0002be04 	.inst	0x0002be04 ; undefined
    3628:	06010200 	.inst	0x06010200 ; undefined
    362c:	000000f4 	.inst	0x000000f4 ; undefined
    3630:	5b050202 	.inst	0x5b050202 ; undefined
    3634:	03000001 	.inst	0x03000001 ; undefined
    3638:	6e690504 	uhadd	v4.8h, v8.8h, v9.8h
    363c:	01020074 	.inst	0x01020074 ; undefined
    3640:	0000f208 	.inst	0x0000f208 ; undefined
    3644:	07020200 	.inst	0x07020200 ; undefined
    3648:	0000011a 	.inst	0x0000011a ; undefined
    364c:	08020804 	stxrb	w2, w4, [x0]
    3650:	00023207 	.inst	0x00023207 ; undefined
    3654:	08010200 	stxrb	w1, w0, [x16]
    3658:	000000fb 	.inst	0x000000fb ; undefined
    365c:	0018ba05 	.inst	0x0018ba05 ; undefined
    3660:	241f0100 	cmphs	p0.b, p0/z, z8.b, z31.b
    3664:	00000153 	.inst	0x00000153 ; undefined
    3668:	5c000000 	ldr	d0, 3668 <__module_entries_end-0x4998>
    366c:	00000000 	.inst	0x00000000 ; undefined
    3670:	01000000 	.inst	0x01000000 ; undefined
    3674:	18b4069c 	ldr	w28, fffffffffff6b744 <_estack+0xfffffffff7f5b744>
    3678:	10010000 	adr	x0, 5678 <__module_entries_end-0x2988>
    367c:	000152f8 	.inst	0x000152f8 ; undefined
    3680:	00000000 	.inst	0x00000000 ; undefined
    3684:	0000002c 	.inst	0x0000002c ; undefined
    3688:	00000000 	.inst	0x00000000 ; undefined
    368c:	00c49c01 	.inst	0x00c49c01 ; undefined
    3690:	db070000 	.inst	0xdb070000 ; undefined
    3694:	01000012 	.inst	0x01000012 ; undefined
    3698:	00006f10 	.inst	0x00006f10 ; undefined
    369c:	78910200 	ldursh	x0, [x16, #-240]
    36a0:	18bf0800 	ldr	w0, fffffffffff817a0 <_estack+0xfffffffff7f717a0>
    36a4:	08010000 	stxrb	w1, w0, [x0]
    36a8:	000152d4 	.inst	0x000152d4 ; undefined
    36ac:	00000000 	.inst	0x00000000 ; undefined
    36b0:	00000024 	.inst	0x00000024 ; undefined
    36b4:	00000000 	.inst	0x00000000 ; undefined
    36b8:	db079c01 	.inst	0xdb079c01 ; undefined
    36bc:	01000012 	.inst	0x01000012 ; undefined
    36c0:	00006f08 	.inst	0x00006f08 ; undefined
    36c4:	78910200 	ldursh	x0, [x16, #-240]
	...

Déassemblage de la section .debug_abbrev :

0000000000000000 <.debug_abbrev>:
   0:	25011101 	cmpge	p1.b, p4/z, z8.b, #1
   4:	030b130e 	.inst	0x030b130e ; undefined
   8:	1201110e 	and	w14, w8, #0x8000000f
   c:	00171007 	.inst	0x00171007 ; undefined
  10:	00160200 	.inst	0x00160200 ; undefined
  14:	0b3a0e03 	add	w3, w16, w26, uxtb #3
  18:	13490b3b 	.inst	0x13490b3b ; undefined
  1c:	24030000 	cmphs	p0.b, p0/z, z0.b, z3.b
  20:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
  24:	000e030b 	.inst	0x000e030b ; undefined
  28:	00240400 	.inst	0x00240400 ; NYI
  2c:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
  30:	00000803 	.inst	0x00000803 ; undefined
  34:	0b000f05 	add	w5, w24, w0, lsl #3
  38:	0600000b 	.inst	0x0600000b ; undefined
  3c:	13490035 	.inst	0x13490035 ; undefined
  40:	26070000 	.inst	0x26070000 ; undefined
  44:	00134900 	.inst	0x00134900 ; undefined
  48:	000f0800 	.inst	0x000f0800 ; undefined
  4c:	13490b0b 	.inst	0x13490b0b ; undefined
  50:	15090000 	b	4240050 <_freertos_vector_table+0x4229228>
  54:	01192701 	.inst	0x01192701 ; undefined
  58:	0a000013 	and	w19, w0, w0
  5c:	13490005 	.inst	0x13490005 ; undefined
  60:	340b0000 	cbz	w0, 16060 <xHeap+0x250>
  64:	3a0e0300 	adcs	w0, w24, w14
  68:	490b3b0b 	.inst	0x490b3b0b ; undefined
  6c:	02193f13 	.inst	0x02193f13 ; undefined
  70:	0c000018 	st4	{v24.8b-v27.8b}, [x0]
  74:	193f012e 	.inst	0x193f012e ; undefined
  78:	0b3a0e03 	add	w3, w16, w26, uxtb #3
  7c:	1927053b 	.inst	0x1927053b ; undefined
  80:	01111349 	.inst	0x01111349 ; undefined
  84:	18400712 	ldr	w18, 80164 <_freertos_vector_table+0x6933c>
  88:	01194297 	.inst	0x01194297 ; undefined
  8c:	0d000013 	st1	{v19.b}[0], [x0]
  90:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
  94:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
  98:	18021349 	ldr	w9, 4300 <__module_entries_end-0x3d00>
  9c:	2e0e0000 	ext	v0.8b, v0.8b, v14.8b, #0
  a0:	03193f01 	.inst	0x03193f01 ; undefined
  a4:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
  a8:	11192705 	add	w5, w24, #0x649
  ac:	40071201 	.inst	0x40071201 ; undefined
  b0:	19429718 	.inst	0x19429718 ; undefined
  b4:	00001301 	.inst	0x00001301 ; undefined
  b8:	0300050f 	.inst	0x0300050f ; undefined
  bc:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
  c0:	02134905 	.inst	0x02134905 ; undefined
  c4:	10000018 	adr	x24, c4 <__module_entries_end-0x7f3c>
  c8:	193f002e 	.inst	0x193f002e ; undefined
  cc:	0b3a0e03 	add	w3, w16, w26, uxtb #3
  d0:	1927053b 	.inst	0x1927053b ; undefined
  d4:	07120111 	.inst	0x07120111 ; undefined
  d8:	42971840 	.inst	0x42971840 ; undefined
  dc:	11000019 	add	w25, w0, #0x0
  e0:	193f002e 	.inst	0x193f002e ; undefined
  e4:	0b3a0e03 	add	w3, w16, w26, uxtb #3
  e8:	1927053b 	.inst	0x1927053b ; undefined
  ec:	07120111 	.inst	0x07120111 ; undefined
  f0:	42961840 	.inst	0x42961840 ; undefined
  f4:	12000019 	and	w25, w0, #0x1
  f8:	193f012e 	.inst	0x193f012e ; undefined
  fc:	0b3a0e03 	add	w3, w16, w26, uxtb #3
 100:	1927053b 	.inst	0x1927053b ; undefined
 104:	01111349 	.inst	0x01111349 ; undefined
 108:	18400712 	ldr	w18, 801e8 <_freertos_vector_table+0x693c0>
 10c:	01194296 	.inst	0x01194296 ; undefined
 110:	13000013 	sbfx	w19, w0, #0, #1
 114:	0111010b 	.inst	0x0111010b ; undefined
 118:	00000712 	.inst	0x00000712 ; undefined
 11c:	3f012e14 	.inst	0x3f012e14 ; undefined
 120:	3a0e0319 	adcs	w25, w24, w14
 124:	49053b0b 	.inst	0x49053b0b ; undefined
 128:	00193c13 	.inst	0x00193c13 ; undefined
 12c:	00181500 	.inst	0x00181500 ; undefined
 130:	2e160000 	ext	v0.8b, v0.8b, v22.8b, #0
 134:	03193f01 	.inst	0x03193f01 ; undefined
 138:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
 13c:	4919270b 	.inst	0x4919270b ; undefined
 140:	12011113 	and	w19, w8, #0x8000000f
 144:	97184007 	bl	fffffffffc610160 <_estack+0xfffffffff4600160>
 148:	00001942 	.inst	0x00001942 ; undefined
 14c:	03000517 	.inst	0x03000517 ; undefined
 150:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
 154:	0213490b 	.inst	0x0213490b ; undefined
 158:	00000018 	.inst	0x00000018 ; undefined
 15c:	25011101 	cmpge	p1.b, p4/z, z8.b, #1
 160:	030b130e 	.inst	0x030b130e ; undefined
 164:	0017100e 	.inst	0x0017100e ; undefined
 168:	00240200 	.inst	0x00240200 ; NYI
 16c:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
 170:	00000e03 	.inst	0x00000e03 ; undefined
 174:	0b002403 	add	w3, w0, w0, lsl #9
 178:	030b3e0b 	.inst	0x030b3e0b ; undefined
 17c:	00000008 	.inst	0x00000008 ; undefined
 180:	25011101 	cmpge	p1.b, p4/z, z8.b, #1
 184:	030b130e 	.inst	0x030b130e ; undefined
 188:	1201110e 	and	w14, w8, #0x8000000f
 18c:	00171007 	.inst	0x00171007 ; undefined
 190:	00240200 	.inst	0x00240200 ; NYI
 194:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
 198:	00000e03 	.inst	0x00000e03 ; undefined
 19c:	0b002403 	add	w3, w0, w0, lsl #9
 1a0:	030b3e0b 	.inst	0x030b3e0b ; undefined
 1a4:	04000008 	add	z8.b, p0/m, z8.b, z0.b
 1a8:	0b0b000f 	add	w15, w0, w11
 1ac:	16050000 	b	fffffffff81401ac <_estack+0xfffffffff01301ac>
 1b0:	3a0e0300 	adcs	w0, w24, w14
 1b4:	490b3b0b 	.inst	0x490b3b0b ; undefined
 1b8:	06000013 	.inst	0x06000013 ; undefined
 1bc:	13490026 	.inst	0x13490026 ; undefined
 1c0:	13070000 	sbfiz	w0, w0, #25, #1
 1c4:	0b0e0301 	add	w1, w24, w14
 1c8:	3b0b3a0b 	.inst	0x3b0b3a0b ; undefined
 1cc:	0013010b 	.inst	0x0013010b ; undefined
 1d0:	000d0800 	.inst	0x000d0800 ; undefined
 1d4:	0b3a0e03 	add	w3, w16, w26, uxtb #3
 1d8:	13490b3b 	.inst	0x13490b3b ; undefined
 1dc:	00000b38 	.inst	0x00000b38 ; undefined
 1e0:	0b000f09 	add	w9, w24, w0, lsl #3
 1e4:	0013490b 	.inst	0x0013490b ; undefined
 1e8:	012e0a00 	.inst	0x012e0a00 ; undefined
 1ec:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
 1f0:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
 1f4:	13491927 	.inst	0x13491927 ; undefined
 1f8:	07120111 	.inst	0x07120111 ; undefined
 1fc:	42971840 	.inst	0x42971840 ; undefined
 200:	00130119 	.inst	0x00130119 ; undefined
 204:	00050b00 	.inst	0x00050b00 ; undefined
 208:	0b3a0e03 	add	w3, w16, w26, uxtb #3
 20c:	13490b3b 	.inst	0x13490b3b ; undefined
 210:	00001802 	.inst	0x00001802 ; undefined
 214:	0300340c 	.inst	0x0300340c ; undefined
 218:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
 21c:	0213490b 	.inst	0x0213490b ; undefined
 220:	0d000018 	st1	{v24.b}[0], [x0]
 224:	193f012e 	.inst	0x193f012e ; undefined
 228:	0b3a0e03 	add	w3, w16, w26, uxtb #3
 22c:	19270b3b 	.inst	0x19270b3b ; undefined
 230:	07120111 	.inst	0x07120111 ; undefined
 234:	42971840 	.inst	0x42971840 ; undefined
 238:	00130119 	.inst	0x00130119 ; undefined
 23c:	012e0e00 	.inst	0x012e0e00 ; undefined
 240:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
 244:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
 248:	01111927 	.inst	0x01111927 ; undefined
 24c:	18400712 	ldr	w18, 8032c <_freertos_vector_table+0x69504>
 250:	00194297 	.inst	0x00194297 ; undefined
 254:	11010000 	add	w0, w0, #0x40
 258:	130e2501 	sbfiz	w1, w8, #18, #10
 25c:	110e030b 	add	w11, w24, #0x380
 260:	10071201 	adr	x1, e4a0 <__module_entries_end+0x64a0>
 264:	02000017 	.inst	0x02000017 ; undefined
 268:	0e030016 	tbl	v22.8b, {v0.16b}, v3.8b
 26c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
 270:	00001349 	.inst	0x00001349 ; undefined
 274:	0b002403 	add	w3, w0, w0, lsl #9
 278:	030b3e0b 	.inst	0x030b3e0b ; undefined
 27c:	0400000e 	add	z14.b, p0/m, z14.b, z0.b
 280:	0b0b0024 	add	w4, w1, w11
 284:	08030b3e 	stxrb	w3, w30, [x25]
 288:	0f050000 	.inst	0x0f050000 ; undefined
 28c:	000b0b00 	.inst	0x000b0b00 ; undefined
 290:	00260600 	.inst	0x00260600 ; NYI
 294:	00001349 	.inst	0x00001349 ; undefined
 298:	49003507 	.inst	0x49003507 ; undefined
 29c:	08000013 	stxrb	w0, w19, [x0]
 2a0:	0b0b000f 	add	w15, w0, w11
 2a4:	00001349 	.inst	0x00001349 ; undefined
 2a8:	00002609 	.inst	0x00002609 ; undefined
 2ac:	01130a00 	.inst	0x01130a00 ; undefined
 2b0:	0b0b0e03 	add	w3, w16, w11, lsl #3
 2b4:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
 2b8:	00001301 	.inst	0x00001301 ; undefined
 2bc:	03000d0b 	.inst	0x03000d0b ; undefined
 2c0:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
 2c4:	3813490b 	sttrb	w11, [x8, #-204]
 2c8:	0c00000b 	st4	{v11.8b-v14.8b}, [x0]
 2cc:	0b0b0117 	add	w23, w8, w11
 2d0:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
 2d4:	00001301 	.inst	0x00001301 ; undefined
 2d8:	03000d0d 	.inst	0x03000d0d ; undefined
 2dc:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
 2e0:	0013490b 	.inst	0x0013490b ; undefined
 2e4:	000d0e00 	.inst	0x000d0e00 ; undefined
 2e8:	0b3a0803 	add	w3, w0, w26, uxtb #2
 2ec:	13490b3b 	.inst	0x13490b3b ; undefined
 2f0:	00000b38 	.inst	0x00000b38 ; undefined
 2f4:	3f012e0f 	.inst	0x3f012e0f ; undefined
 2f8:	3a0e0319 	adcs	w25, w24, w14
 2fc:	27053b0b 	.inst	0x27053b0b ; undefined
 300:	11134919 	add	w25, w8, #0x4d2
 304:	40071201 	.inst	0x40071201 ; undefined
 308:	19429718 	.inst	0x19429718 ; undefined
 30c:	00001301 	.inst	0x00001301 ; undefined
 310:	03000510 	.inst	0x03000510 ; undefined
 314:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
 318:	02134905 	.inst	0x02134905 ; undefined
 31c:	11000018 	add	w24, w0, #0x0
 320:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
 324:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
 328:	18021349 	ldr	w9, 4590 <__module_entries_end-0x3a70>
 32c:	2e120000 	ext	v0.8b, v0.8b, v18.8b, #0
 330:	3a0e0301 	adcs	w1, w24, w14
 334:	27053b0b 	.inst	0x27053b0b ; undefined
 338:	11134919 	add	w25, w8, #0x4d2
 33c:	40071201 	.inst	0x40071201 ; undefined
 340:	19429618 	.inst	0x19429618 ; undefined
 344:	00001301 	.inst	0x00001301 ; undefined
 348:	03012e13 	.inst	0x03012e13 ; undefined
 34c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
 350:	11192705 	add	w5, w24, #0x649
 354:	40071201 	.inst	0x40071201 ; undefined
 358:	19429618 	.inst	0x19429618 ; undefined
 35c:	00001301 	.inst	0x00001301 ; undefined
 360:	11010b14 	add	w20, w24, #0x42
 364:	01071201 	.inst	0x01071201 ; undefined
 368:	15000013 	b	40003b4 <_freertos_vector_table+0x3fe958c>
 36c:	0111010b 	.inst	0x0111010b ; undefined
 370:	00000712 	.inst	0x00000712 ; undefined
 374:	3f012e16 	.inst	0x3f012e16 ; undefined
 378:	3a0e0319 	adcs	w25, w24, w14
 37c:	27053b0b 	.inst	0x27053b0b ; undefined
 380:	12011119 	and	w25, w8, #0x8000000f
 384:	96184007 	bl	fffffffff86103a0 <_estack+0xfffffffff06003a0>
 388:	13011942 	sbfx	w2, w10, #1, #6
 38c:	2e170000 	ext	v0.8b, v0.8b, v23.8b, #0
 390:	03193f01 	.inst	0x03193f01 ; undefined
 394:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
 398:	49192705 	.inst	0x49192705 ; undefined
 39c:	12011113 	and	w19, w8, #0x8000000f
 3a0:	96184007 	bl	fffffffff86103bc <_estack+0xfffffffff06003bc>
 3a4:	13011942 	sbfx	w2, w10, #1, #6
 3a8:	2e180000 	ext	v0.8b, v0.8b, v24.8b, #0
 3ac:	03193f01 	.inst	0x03193f01 ; undefined
 3b0:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
 3b4:	49192705 	.inst	0x49192705 ; undefined
 3b8:	12011113 	and	w19, w8, #0x8000000f
 3bc:	96184007 	bl	fffffffff86103d8 <_estack+0xfffffffff06003d8>
 3c0:	00001942 	.inst	0x00001942 ; undefined
 3c4:	01110100 	.inst	0x01110100 ; undefined
 3c8:	0b130e25 	add	w5, w17, w19, lsl #3
 3cc:	01110e03 	.inst	0x01110e03 ; undefined
 3d0:	17100712 	b	fffffffffc402018 <_estack+0xfffffffff43f2018>
 3d4:	16020000 	b	fffffffff80803d4 <_estack+0xfffffffff00703d4>
 3d8:	3a0e0300 	adcs	w0, w24, w14
 3dc:	490b3b0b 	.inst	0x490b3b0b ; undefined
 3e0:	03000013 	.inst	0x03000013 ; undefined
 3e4:	0b0b0024 	add	w4, w1, w11
 3e8:	0e030b3e 	.inst	0x0e030b3e ; undefined
 3ec:	24040000 	cmphs	p0.b, p0/z, z0.b, z4.b
 3f0:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
 3f4:	0008030b 	.inst	0x0008030b ; undefined
 3f8:	000f0500 	.inst	0x000f0500 ; undefined
 3fc:	00000b0b 	.inst	0x00000b0b ; undefined
 400:	49002606 	.inst	0x49002606 ; undefined
 404:	07000013 	.inst	0x07000013 ; undefined
 408:	0b0b000f 	add	w15, w0, w11
 40c:	00001349 	.inst	0x00001349 ; undefined
 410:	49003508 	.inst	0x49003508 ; undefined
 414:	09000013 	.inst	0x09000013 ; undefined
 418:	19270115 	.inst	0x19270115 ; undefined
 41c:	00001301 	.inst	0x00001301 ; undefined
 420:	4900050a 	.inst	0x4900050a ; undefined
 424:	0b000013 	add	w19, w0, w0
 428:	0e030113 	tbl	v19.8b, {v8.16b}, v3.8b
 42c:	0b3a0b0b 	add	w11, w24, w26, uxtb #2
 430:	13010b3b 	sbfx	w27, w25, #1, #2
 434:	0d0c0000 	.inst	0x0d0c0000 ; undefined
 438:	3a0e0300 	adcs	w0, w24, w14
 43c:	490b3b0b 	.inst	0x490b3b0b ; undefined
 440:	000b3813 	.inst	0x000b3813 ; undefined
 444:	01150d00 	.inst	0x01150d00 ; undefined
 448:	13491927 	.inst	0x13491927 ; undefined
 44c:	00001301 	.inst	0x00001301 ; undefined
 450:	0b01040e 	add	w14, w0, w1, lsl #1
 454:	3a13490b 	.inst	0x3a13490b ; undefined
 458:	010b3b0b 	.inst	0x010b3b0b ; undefined
 45c:	0f000013 	.inst	0x0f000013 ; undefined
 460:	0e030028 	tbl	v8.8b, {v1.16b}, v3.8b
 464:	00000b1c 	.inst	0x00000b1c ; undefined
 468:	03011310 	.inst	0x03011310 ; undefined
 46c:	3a0b0b0e 	.inst	0x3a0b0b0e ; undefined
 470:	01053b0b 	.inst	0x01053b0b ; undefined
 474:	11000013 	add	w19, w0, #0x0
 478:	0e03000d 	tbl	v13.8b, {v0.16b}, v3.8b
 47c:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
 480:	0b381349 	add	w9, w26, w24, uxtb #4
 484:	01120000 	.inst	0x01120000 ; undefined
 488:	01134901 	.inst	0x01134901 ; undefined
 48c:	13000013 	sbfx	w19, w0, #0, #1
 490:	13490021 	.inst	0x13490021 ; undefined
 494:	00000b2f 	.inst	0x00000b2f ; undefined
 498:	03001614 	.inst	0x03001614 ; undefined
 49c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
 4a0:	00134905 	.inst	0x00134905 ; undefined
 4a4:	00341500 	.inst	0x00341500 ; NYI
 4a8:	0b3a0e03 	add	w3, w16, w26, uxtb #3
 4ac:	1349053b 	.inst	0x1349053b ; undefined
 4b0:	1802193f 	ldr	wzr, 47d4 <__module_entries_end-0x382c>
 4b4:	34160000 	cbz	w0, 2c4b4 <_freertos_vector_table+0x1568c>
 4b8:	3a0e0300 	adcs	w0, w24, w14
 4bc:	49053b0b 	.inst	0x49053b0b ; undefined
 4c0:	00180213 	.inst	0x00180213 ; undefined
 4c4:	012e1700 	.inst	0x012e1700 ; undefined
 4c8:	0b3a0e03 	add	w3, w16, w26, uxtb #3
 4cc:	1927053b 	.inst	0x1927053b ; undefined
 4d0:	07120111 	.inst	0x07120111 ; undefined
 4d4:	42961840 	.inst	0x42961840 ; undefined
 4d8:	00130119 	.inst	0x00130119 ; undefined
 4dc:	00051800 	.inst	0x00051800 ; undefined
 4e0:	0b3a0e03 	add	w3, w16, w26, uxtb #3
 4e4:	1349053b 	.inst	0x1349053b ; undefined
 4e8:	00001802 	.inst	0x00001802 ; undefined
 4ec:	3f012e19 	.inst	0x3f012e19 ; undefined
 4f0:	3a0e0319 	adcs	w25, w24, w14
 4f4:	27053b0b 	.inst	0x27053b0b ; undefined
 4f8:	11134919 	add	w25, w8, #0x4d2
 4fc:	40071201 	.inst	0x40071201 ; undefined
 500:	19429618 	.inst	0x19429618 ; undefined
 504:	00001301 	.inst	0x00001301 ; undefined
 508:	3f012e1a 	.inst	0x3f012e1a ; undefined
 50c:	3a0e0319 	adcs	w25, w24, w14
 510:	27053b0b 	.inst	0x27053b0b ; undefined
 514:	12011119 	and	w25, w8, #0x8000000f
 518:	96184007 	bl	fffffffff8610534 <_estack+0xfffffffff0600534>
 51c:	13011942 	sbfx	w2, w10, #1, #6
 520:	2e1b0000 	ext	v0.8b, v0.8b, v27.8b, #0
 524:	03193f01 	.inst	0x03193f01 ; undefined
 528:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
 52c:	49192705 	.inst	0x49192705 ; undefined
 530:	12011113 	and	w19, w8, #0x8000000f
 534:	97184007 	bl	fffffffffc610550 <_estack+0xfffffffff4600550>
 538:	13011942 	sbfx	w2, w10, #1, #6
 53c:	2e1c0000 	ext	v0.8b, v0.8b, v28.8b, #0
 540:	3a0e0301 	adcs	w1, w24, w14
 544:	27053b0b 	.inst	0x27053b0b ; undefined
 548:	12011119 	and	w25, w8, #0x8000000f
 54c:	97184007 	bl	fffffffffc610568 <_estack+0xfffffffff4600568>
 550:	13011942 	sbfx	w2, w10, #1, #6
 554:	0b1d0000 	add	w0, w0, w29
 558:	12011101 	and	w1, w8, #0x8000000f
 55c:	1e000007 	.inst	0x1e000007 ; undefined
 560:	193f002e 	.inst	0x193f002e ; undefined
 564:	0b3a0e03 	add	w3, w16, w26, uxtb #3
 568:	1927053b 	.inst	0x1927053b ; undefined
 56c:	07120111 	.inst	0x07120111 ; undefined
 570:	42971840 	.inst	0x42971840 ; undefined
 574:	1f000019 	fmadd	s25, s0, s0, s0
 578:	193f012e 	.inst	0x193f012e ; undefined
 57c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
 580:	1927053b 	.inst	0x1927053b ; undefined
 584:	07120111 	.inst	0x07120111 ; undefined
 588:	42971840 	.inst	0x42971840 ; undefined
 58c:	00130119 	.inst	0x00130119 ; undefined
 590:	002e2000 	.inst	0x002e2000 ; NYI
 594:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
 598:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
 59c:	13491927 	.inst	0x13491927 ; undefined
 5a0:	07120111 	.inst	0x07120111 ; undefined
 5a4:	42971840 	.inst	0x42971840 ; undefined
 5a8:	21000019 	.inst	0x21000019 ; undefined
 5ac:	193f002e 	.inst	0x193f002e ; undefined
 5b0:	0b3a0e03 	add	w3, w16, w26, uxtb #3
 5b4:	1927053b 	.inst	0x1927053b ; undefined
 5b8:	07120111 	.inst	0x07120111 ; undefined
 5bc:	42961840 	.inst	0x42961840 ; undefined
 5c0:	22000019 	.inst	0x22000019 ; undefined
 5c4:	0e03012e 	tbl	v14.8b, {v9.16b}, v3.8b
 5c8:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
 5cc:	13491927 	.inst	0x13491927 ; undefined
 5d0:	07120111 	.inst	0x07120111 ; undefined
 5d4:	42971840 	.inst	0x42971840 ; undefined
 5d8:	00130119 	.inst	0x00130119 ; undefined
 5dc:	00342300 	.inst	0x00342300 ; NYI
 5e0:	0b3a0803 	add	w3, w0, w26, uxtb #2
 5e4:	1349053b 	.inst	0x1349053b ; undefined
 5e8:	00001802 	.inst	0x00001802 ; undefined
 5ec:	3f012e24 	.inst	0x3f012e24 ; undefined
 5f0:	3a0e0319 	adcs	w25, w24, w14
 5f4:	27053b0b 	.inst	0x27053b0b ; undefined
 5f8:	11134919 	add	w25, w8, #0x4d2
 5fc:	40071201 	.inst	0x40071201 ; undefined
 600:	19429618 	.inst	0x19429618 ; undefined
 604:	01000000 	.inst	0x01000000 ; undefined
 608:	0e250111 	saddl	v17.8h, v8.8b, v5.8b
 60c:	0e030b13 	.inst	0x0e030b13 ; undefined
 610:	07120111 	.inst	0x07120111 ; undefined
 614:	00001710 	.inst	0x00001710 ; undefined
 618:	03001602 	.inst	0x03001602 ; undefined
 61c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
 620:	0013490b 	.inst	0x0013490b ; undefined
 624:	000f0300 	.inst	0x000f0300 ; undefined
 628:	13490b0b 	.inst	0x13490b0b ; undefined
 62c:	15040000 	b	410062c <_freertos_vector_table+0x40e9804>
 630:	01192701 	.inst	0x01192701 ; undefined
 634:	05000013 	orr	z19.s, z19.s, #0x1
 638:	13490005 	.inst	0x13490005 ; undefined
 63c:	24060000 	cmphs	p0.b, p0/z, z0.b, z6.b
 640:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
 644:	000e030b 	.inst	0x000e030b ; undefined
 648:	00260700 	.inst	0x00260700 ; NYI
 64c:	00001349 	.inst	0x00001349 ; undefined
 650:	0b000f08 	add	w8, w24, w0, lsl #3
 654:	0900000b 	.inst	0x0900000b ; undefined
 658:	0b0b0113 	add	w19, w8, w11
 65c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
 660:	00001301 	.inst	0x00001301 ; undefined
 664:	03000d0a 	.inst	0x03000d0a ; undefined
 668:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
 66c:	3813490b 	sttrb	w11, [x8, #-204]
 670:	0b00000b 	add	w11, w0, w0
 674:	13490101 	.inst	0x13490101 ; undefined
 678:	00001301 	.inst	0x00001301 ; undefined
 67c:	4900210c 	.inst	0x4900210c ; undefined
 680:	000b2f13 	.inst	0x000b2f13 ; undefined
 684:	00340d00 	.inst	0x00340d00 ; NYI
 688:	0b3a0e03 	add	w3, w16, w26, uxtb #3
 68c:	13490b3b 	.inst	0x13490b3b ; undefined
 690:	00001802 	.inst	0x00001802 ; undefined
 694:	4900350e 	.inst	0x4900350e ; undefined
 698:	0f000013 	.inst	0x0f000013 ; undefined
 69c:	193f012e 	.inst	0x193f012e ; undefined
 6a0:	0b3a0e03 	add	w3, w16, w26, uxtb #3
 6a4:	19270b3b 	.inst	0x19270b3b ; undefined
 6a8:	07120111 	.inst	0x07120111 ; undefined
 6ac:	42971840 	.inst	0x42971840 ; undefined
 6b0:	00130119 	.inst	0x00130119 ; undefined
 6b4:	00051000 	.inst	0x00051000 ; undefined
 6b8:	0b3a0803 	add	w3, w0, w26, uxtb #2
 6bc:	13490b3b 	.inst	0x13490b3b ; undefined
 6c0:	00001802 	.inst	0x00001802 ; undefined
 6c4:	3f012e11 	.inst	0x3f012e11 ; undefined
 6c8:	3a0e0319 	adcs	w25, w24, w14
 6cc:	270b3b0b 	.inst	0x270b3b0b ; undefined
 6d0:	12011119 	and	w25, w8, #0x8000000f
 6d4:	96184007 	bl	fffffffff86106f0 <_estack+0xfffffffff06006f0>
 6d8:	13011942 	sbfx	w2, w10, #1, #6
 6dc:	05120000 	mov	z0.b, p2/z, #0
 6e0:	3a0e0300 	adcs	w0, w24, w14
 6e4:	490b3b0b 	.inst	0x490b3b0b ; undefined
 6e8:	00180213 	.inst	0x00180213 ; undefined
 6ec:	002e1300 	.inst	0x002e1300 ; NYI
 6f0:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
 6f4:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
 6f8:	01111927 	.inst	0x01111927 ; undefined
 6fc:	18400712 	ldr	w18, 807dc <_freertos_vector_table+0x699b4>
 700:	00194297 	.inst	0x00194297 ; undefined
 704:	012e1400 	.inst	0x012e1400 ; undefined
 708:	0b3a0e03 	add	w3, w16, w26, uxtb #3
 70c:	19270b3b 	.inst	0x19270b3b ; undefined
 710:	07120111 	.inst	0x07120111 ; undefined
 714:	42961840 	.inst	0x42961840 ; undefined
 718:	15000019 	b	400077c <_freertos_vector_table+0x3fe9954>
 71c:	0111010b 	.inst	0x0111010b ; undefined
 720:	00000712 	.inst	0x00000712 ; undefined
 724:	03003416 	.inst	0x03003416 ; undefined
 728:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
 72c:	0213490b 	.inst	0x0213490b ; undefined
 730:	00000018 	.inst	0x00000018 ; undefined
 734:	25011101 	cmpge	p1.b, p4/z, z8.b, #1
 738:	030b130e 	.inst	0x030b130e ; undefined
 73c:	1201110e 	and	w14, w8, #0x8000000f
 740:	00171007 	.inst	0x00171007 ; undefined
 744:	01040200 	.inst	0x01040200 ; undefined
 748:	0b0b0e03 	add	w3, w16, w11, lsl #3
 74c:	0b3a1349 	add	w9, w26, w26, uxtb #4
 750:	13010b3b 	sbfx	w27, w25, #1, #2
 754:	28030000 	stnp	w0, w0, [x0, #24]
 758:	1c0e0300 	ldr	s0, 1c7b8 <_freertos_vector_table+0x5990>
 75c:	0400000b 	add	z11.b, p0/m, z11.b, z0.b
 760:	0b0b0024 	add	w4, w1, w11
 764:	0e030b3e 	.inst	0x0e030b3e ; undefined
 768:	13050000 	sbfiz	w0, w0, #27, #1
 76c:	3a050b01 	.inst	0x3a050b01 ; undefined
 770:	010b3b0b 	.inst	0x010b3b0b ; undefined
 774:	06000013 	.inst	0x06000013 ; undefined
 778:	0e03000d 	tbl	v13.8b, {v0.16b}, v3.8b
 77c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
 780:	0b381349 	add	w9, w26, w24, uxtb #4
 784:	0d070000 	.inst	0x0d070000 ; undefined
 788:	3a0e0300 	adcs	w0, w24, w14
 78c:	490b3b0b 	.inst	0x490b3b0b ; undefined
 790:	00053813 	.inst	0x00053813 ; undefined
 794:	01010800 	.inst	0x01010800 ; undefined
 798:	13011349 	sbfx	w9, w26, #1, #4
 79c:	21090000 	.inst	0x21090000 ; undefined
 7a0:	2f134900 	.inst	0x2f134900 ; undefined
 7a4:	0a00000b 	and	w11, w0, w0
 7a8:	0e030016 	tbl	v22.8b, {v0.16b}, v3.8b
 7ac:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
 7b0:	00001349 	.inst	0x00001349 ; undefined
 7b4:	4900350b 	.inst	0x4900350b ; undefined
 7b8:	0c000013 	st4	{v19.8b-v22.8b}, [x0]
 7bc:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
 7c0:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
 7c4:	193f1349 	.inst	0x193f1349 ; undefined
 7c8:	00001802 	.inst	0x00001802 ; undefined
 7cc:	0b000f0d 	add	w13, w24, w0, lsl #3
 7d0:	0013490b 	.inst	0x0013490b ; undefined
 7d4:	00260e00 	.inst	0x00260e00 ; NYI
 7d8:	00001349 	.inst	0x00001349 ; undefined
 7dc:	3f012e0f 	.inst	0x3f012e0f ; undefined
 7e0:	3a0e0319 	adcs	w25, w24, w14
 7e4:	270b3b0b 	.inst	0x270b3b0b ; undefined
 7e8:	12011119 	and	w25, w8, #0x8000000f
 7ec:	97184007 	bl	fffffffffc610808 <_estack+0xfffffffff4600808>
 7f0:	13011942 	sbfx	w2, w10, #1, #6
 7f4:	05100000 	mov	z0.b, p0/z, #0
 7f8:	3a0e0300 	adcs	w0, w24, w14
 7fc:	490b3b0b 	.inst	0x490b3b0b ; undefined
 800:	00180213 	.inst	0x00180213 ; undefined
 804:	00341100 	.inst	0x00341100 ; NYI
 808:	0b3a0e03 	add	w3, w16, w26, uxtb #3
 80c:	13490b3b 	.inst	0x13490b3b ; undefined
 810:	00001802 	.inst	0x00001802 ; undefined
 814:	3f012e12 	.inst	0x3f012e12 ; undefined
 818:	3a0e0319 	adcs	w25, w24, w14
 81c:	270b3b0b 	.inst	0x270b3b0b ; undefined
 820:	11134919 	add	w25, w8, #0x4d2
 824:	40071201 	.inst	0x40071201 ; undefined
 828:	19429718 	.inst	0x19429718 ; undefined
 82c:	00001301 	.inst	0x00001301 ; undefined
 830:	0b002413 	add	w19, w0, w0, lsl #9
 834:	030b3e0b 	.inst	0x030b3e0b ; undefined
 838:	14000008 	b	858 <__module_entries_end-0x77a8>
 83c:	193f012e 	.inst	0x193f012e ; undefined
 840:	0b3a0e03 	add	w3, w16, w26, uxtb #3
 844:	19270b3b 	.inst	0x19270b3b ; undefined
 848:	07120111 	.inst	0x07120111 ; undefined
 84c:	42961840 	.inst	0x42961840 ; undefined
 850:	00130119 	.inst	0x00130119 ; undefined
 854:	00051500 	.inst	0x00051500 ; undefined
 858:	0b3a0803 	add	w3, w0, w26, uxtb #2
 85c:	13490b3b 	.inst	0x13490b3b ; undefined
 860:	00001802 	.inst	0x00001802 ; undefined
 864:	3f012e16 	.inst	0x3f012e16 ; undefined
 868:	3a0e0319 	adcs	w25, w24, w14
 86c:	270b3b0b 	.inst	0x270b3b0b ; undefined
 870:	12011119 	and	w25, w8, #0x8000000f
 874:	97184007 	bl	fffffffffc610890 <_estack+0xfffffffff4600890>
 878:	00001942 	.inst	0x00001942 ; undefined
 87c:	03003417 	.inst	0x03003417 ; undefined
 880:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
 884:	0213490b 	.inst	0x0213490b ; undefined
 888:	00000018 	.inst	0x00000018 ; undefined
 88c:	25011101 	cmpge	p1.b, p4/z, z8.b, #1
 890:	030b130e 	.inst	0x030b130e ; undefined
 894:	1201110e 	and	w14, w8, #0x8000000f
 898:	00171007 	.inst	0x00171007 ; undefined
 89c:	01130200 	.inst	0x01130200 ; undefined
 8a0:	0b3a0b0b 	add	w11, w24, w26, uxtb #2
 8a4:	13010b3b 	sbfx	w27, w25, #1, #2
 8a8:	0d030000 	.inst	0x0d030000 ; undefined
 8ac:	3a0e0300 	adcs	w0, w24, w14
 8b0:	490b3b0b 	.inst	0x490b3b0b ; undefined
 8b4:	000b3813 	.inst	0x000b3813 ; undefined
 8b8:	00240400 	.inst	0x00240400 ; NYI
 8bc:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
 8c0:	00000e03 	.inst	0x00000e03 ; undefined
 8c4:	03001605 	.inst	0x03001605 ; undefined
 8c8:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
 8cc:	0013490b 	.inst	0x0013490b ; undefined
 8d0:	00350600 	.inst	0x00350600 ; NYI
 8d4:	00001349 	.inst	0x00001349 ; undefined
 8d8:	03003407 	.inst	0x03003407 ; undefined
 8dc:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
 8e0:	0213490b 	.inst	0x0213490b ; undefined
 8e4:	08000018 	stxrb	w0, w24, [x0]
 8e8:	0b0b000f 	add	w15, w0, w11
 8ec:	00001349 	.inst	0x00001349 ; undefined
 8f0:	49002609 	.inst	0x49002609 ; undefined
 8f4:	0a000013 	and	w19, w0, w0
 8f8:	0e030113 	tbl	v19.8b, {v8.16b}, v3.8b
 8fc:	0b3a0b0b 	add	w11, w24, w26, uxtb #2
 900:	13010b3b 	sbfx	w27, w25, #1, #2
 904:	0d0b0000 	.inst	0x0d0b0000 ; undefined
 908:	3a080300 	adcs	w0, w24, w8
 90c:	490b3b0b 	.inst	0x490b3b0b ; undefined
 910:	000b3813 	.inst	0x000b3813 ; undefined
 914:	012e0c00 	.inst	0x012e0c00 ; undefined
 918:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
 91c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
 920:	01111927 	.inst	0x01111927 ; undefined
 924:	18400712 	ldr	w18, 80a04 <_freertos_vector_table+0x69bdc>
 928:	01194296 	.inst	0x01194296 ; undefined
 92c:	0d000013 	st1	{v19.b}[0], [x0]
 930:	08030005 	stxrb	w3, w5, [x0]
 934:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
 938:	18021349 	ldr	w9, 4ba0 <__module_entries_end-0x3460>
 93c:	340e0000 	cbz	w0, 1c93c <_freertos_vector_table+0x5b14>
 940:	3a080300 	adcs	w0, w24, w8
 944:	490b3b0b 	.inst	0x490b3b0b ; undefined
 948:	00180213 	.inst	0x00180213 ; undefined
 94c:	012e0f00 	.inst	0x012e0f00 ; undefined
 950:	0b3a0e03 	add	w3, w16, w26, uxtb #3
 954:	19270b3b 	.inst	0x19270b3b ; undefined
 958:	07120111 	.inst	0x07120111 ; undefined
 95c:	42961840 	.inst	0x42961840 ; undefined
 960:	00130119 	.inst	0x00130119 ; undefined
 964:	012e1000 	.inst	0x012e1000 ; undefined
 968:	0b3a0e03 	add	w3, w16, w26, uxtb #3
 96c:	19270b3b 	.inst	0x19270b3b ; undefined
 970:	07120111 	.inst	0x07120111 ; undefined
 974:	42971840 	.inst	0x42971840 ; undefined
 978:	00130119 	.inst	0x00130119 ; undefined
 97c:	00051100 	.inst	0x00051100 ; undefined
 980:	0b3a0e03 	add	w3, w16, w26, uxtb #3
 984:	13490b3b 	.inst	0x13490b3b ; undefined
 988:	00001802 	.inst	0x00001802 ; undefined
 98c:	03012e12 	.inst	0x03012e12 ; undefined
 990:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
 994:	4919270b 	.inst	0x4919270b ; undefined
 998:	12011113 	and	w19, w8, #0x8000000f
 99c:	97184007 	bl	fffffffffc6109b8 <_estack+0xfffffffff46009b8>
 9a0:	13011942 	sbfx	w2, w10, #1, #6
 9a4:	2e130000 	ext	v0.8b, v0.8b, v19.8b, #0
 9a8:	3a0e0301 	adcs	w1, w24, w14
 9ac:	270b3b0b 	.inst	0x270b3b0b ; undefined
 9b0:	12011119 	and	w25, w8, #0x8000000f
 9b4:	97184007 	bl	fffffffffc6109d0 <_estack+0xfffffffff46009d0>
 9b8:	00001942 	.inst	0x00001942 ; undefined
 9bc:	01110100 	.inst	0x01110100 ; undefined
 9c0:	0b130e25 	add	w5, w17, w19, lsl #3
 9c4:	01110e03 	.inst	0x01110e03 ; undefined
 9c8:	17100712 	b	fffffffffc402610 <_estack+0xfffffffff43f2610>
 9cc:	16020000 	b	fffffffff80809cc <_estack+0xfffffffff00709cc>
 9d0:	3a0e0300 	adcs	w0, w24, w14
 9d4:	490b3b0b 	.inst	0x490b3b0b ; undefined
 9d8:	03000013 	.inst	0x03000013 ; undefined
 9dc:	13490026 	.inst	0x13490026 ; undefined
 9e0:	24040000 	cmphs	p0.b, p0/z, z0.b, z4.b
 9e4:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
 9e8:	000e030b 	.inst	0x000e030b ; undefined
 9ec:	00350500 	.inst	0x00350500 ; NYI
 9f0:	00001349 	.inst	0x00001349 ; undefined
 9f4:	0b002406 	add	w6, w0, w0, lsl #9
 9f8:	030b3e0b 	.inst	0x030b3e0b ; undefined
 9fc:	07000008 	.inst	0x07000008 ; undefined
 a00:	0b0b000f 	add	w15, w0, w11
 a04:	17080000 	b	fffffffffc200a04 <_estack+0xfffffffff41f0a04>
 a08:	0b0e0301 	add	w1, w24, w14
 a0c:	3b0b3a05 	.inst	0x3b0b3a05 ; undefined
 a10:	0013010b 	.inst	0x0013010b ; undefined
 a14:	000d0900 	.inst	0x000d0900 ; undefined
 a18:	0b3a0e03 	add	w3, w16, w26, uxtb #3
 a1c:	13490b3b 	.inst	0x13490b3b ; undefined
 a20:	010a0000 	.inst	0x010a0000 ; undefined
 a24:	01134901 	.inst	0x01134901 ; undefined
 a28:	0b000013 	add	w19, w0, w0
 a2c:	13490021 	.inst	0x13490021 ; undefined
 a30:	0000052f 	.inst	0x0000052f ; undefined
 a34:	0300340c 	.inst	0x0300340c ; undefined
 a38:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
 a3c:	0213490b 	.inst	0x0213490b ; undefined
 a40:	0d000018 	st1	{v24.b}[0], [x0]
 a44:	0e030113 	tbl	v19.8b, {v8.16b}, v3.8b
 a48:	0b3a0b0b 	add	w11, w24, w26, uxtb #2
 a4c:	13010b3b 	sbfx	w27, w25, #1, #2
 a50:	0d0e0000 	.inst	0x0d0e0000 ; undefined
 a54:	3a0e0300 	adcs	w0, w24, w14
 a58:	490b3b0b 	.inst	0x490b3b0b ; undefined
 a5c:	000b3813 	.inst	0x000b3813 ; undefined
 a60:	000f0f00 	.inst	0x000f0f00 ; undefined
 a64:	13490b0b 	.inst	0x13490b0b ; undefined
 a68:	34100000 	cbz	w0, 20a68 <_freertos_vector_table+0x9c40>
 a6c:	3a0e0300 	adcs	w0, w24, w14
 a70:	490b3b0b 	.inst	0x490b3b0b ; undefined
 a74:	02193f13 	.inst	0x02193f13 ; undefined
 a78:	11000018 	add	w24, w0, #0x0
 a7c:	0e03012e 	tbl	v14.8b, {v9.16b}, v3.8b
 a80:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
 a84:	01111927 	.inst	0x01111927 ; undefined
 a88:	18400712 	ldr	w18, 80b68 <_freertos_vector_table+0x69d40>
 a8c:	01194297 	.inst	0x01194297 ; undefined
 a90:	12000013 	and	w19, w0, #0x1
 a94:	0e030005 	tbl	v5.8b, {v0.16b}, v3.8b
 a98:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
 a9c:	18021349 	ldr	w9, 4d04 <__module_entries_end-0x32fc>
 aa0:	34130000 	cbz	w0, 26aa0 <_freertos_vector_table+0xfc78>
 aa4:	3a0e0300 	adcs	w0, w24, w14
 aa8:	49053b0b 	.inst	0x49053b0b ; undefined
 aac:	00180213 	.inst	0x00180213 ; undefined
 ab0:	00341400 	.inst	0x00341400 ; NYI
 ab4:	0b3a0803 	add	w3, w0, w26, uxtb #2
 ab8:	1349053b 	.inst	0x1349053b ; undefined
 abc:	00001802 	.inst	0x00001802 ; undefined
 ac0:	3f002e15 	.inst	0x3f002e15 ; undefined
 ac4:	3a0e0319 	adcs	w25, w24, w14
 ac8:	27053b0b 	.inst	0x27053b0b ; undefined
 acc:	12011119 	and	w25, w8, #0x8000000f
 ad0:	97184007 	bl	fffffffffc610aec <_estack+0xfffffffff4600aec>
 ad4:	00001942 	.inst	0x00001942 ; undefined
 ad8:	3f002e16 	.inst	0x3f002e16 ; undefined
 adc:	3a0e0319 	adcs	w25, w24, w14
 ae0:	27053b0b 	.inst	0x27053b0b ; undefined
 ae4:	11134919 	add	w25, w8, #0x4d2
 ae8:	40071201 	.inst	0x40071201 ; undefined
 aec:	19429718 	.inst	0x19429718 ; undefined
 af0:	2e170000 	ext	v0.8b, v0.8b, v23.8b, #0
 af4:	03193f01 	.inst	0x03193f01 ; undefined
 af8:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
 afc:	1119270b 	add	w11, w24, #0x649
 b00:	40071201 	.inst	0x40071201 ; undefined
 b04:	19429618 	.inst	0x19429618 ; undefined
 b08:	00001301 	.inst	0x00001301 ; undefined
 b0c:	03000518 	.inst	0x03000518 ; undefined
 b10:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
 b14:	0213490b 	.inst	0x0213490b ; undefined
 b18:	19000018 	.inst	0x19000018 ; undefined
 b1c:	08030034 	stxrb	w3, w20, [x1]
 b20:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
 b24:	18021349 	ldr	w9, 4d8c <__module_entries_end-0x3274>
 b28:	2e1a0000 	ext	v0.8b, v0.8b, v26.8b, #0
 b2c:	03193f01 	.inst	0x03193f01 ; undefined
 b30:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
 b34:	4919270b 	.inst	0x4919270b ; undefined
 b38:	12011113 	and	w19, w8, #0x8000000f
 b3c:	96184007 	bl	fffffffff8610b58 <_estack+0xfffffffff0600b58>
 b40:	00001942 	.inst	0x00001942 ; undefined
 b44:	0300051b 	.inst	0x0300051b ; undefined
 b48:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
 b4c:	0213490b 	.inst	0x0213490b ; undefined
 b50:	00000018 	.inst	0x00000018 ; undefined
 b54:	25011101 	cmpge	p1.b, p4/z, z8.b, #1
 b58:	030b130e 	.inst	0x030b130e ; undefined
 b5c:	1201110e 	and	w14, w8, #0x8000000f
 b60:	00171007 	.inst	0x00171007 ; undefined
 b64:	00240200 	.inst	0x00240200 ; NYI
 b68:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
 b6c:	00000e03 	.inst	0x00000e03 ; undefined
 b70:	0b002403 	add	w3, w0, w0, lsl #9
 b74:	030b3e0b 	.inst	0x030b3e0b ; undefined
 b78:	04000008 	add	z8.b, p0/m, z8.b, z0.b
 b7c:	0e030016 	tbl	v22.8b, {v0.16b}, v3.8b
 b80:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
 b84:	00001349 	.inst	0x00001349 ; undefined
 b88:	0b000f05 	add	w5, w24, w0, lsl #3
 b8c:	0600000b 	.inst	0x0600000b ; undefined
 b90:	0e030113 	tbl	v19.8b, {v8.16b}, v3.8b
 b94:	0b3a0b0b 	add	w11, w24, w26, uxtb #2
 b98:	13010b3b 	sbfx	w27, w25, #1, #2
 b9c:	0d070000 	.inst	0x0d070000 ; undefined
 ba0:	3a080300 	adcs	w0, w24, w8
 ba4:	490b3b0b 	.inst	0x490b3b0b ; undefined
 ba8:	000b3813 	.inst	0x000b3813 ; undefined
 bac:	00350800 	.inst	0x00350800 ; NYI
 bb0:	00001349 	.inst	0x00001349 ; undefined
 bb4:	03003409 	.inst	0x03003409 ; undefined
 bb8:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
 bbc:	0213490b 	.inst	0x0213490b ; undefined
 bc0:	0a000018 	and	w24, w0, w0
 bc4:	0b0b000f 	add	w15, w0, w11
 bc8:	00001349 	.inst	0x00001349 ; undefined
 bcc:	4900260b 	.inst	0x4900260b ; undefined
 bd0:	0c000013 	st4	{v19.8b-v22.8b}, [x0]
 bd4:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
 bd8:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
 bdc:	193f1349 	.inst	0x193f1349 ; undefined
 be0:	00001802 	.inst	0x00001802 ; undefined
 be4:	3f012e0d 	.inst	0x3f012e0d ; undefined
 be8:	3a0e0319 	adcs	w25, w24, w14
 bec:	270b3b0b 	.inst	0x270b3b0b ; undefined
 bf0:	12011119 	and	w25, w8, #0x8000000f
 bf4:	96184007 	bl	fffffffff8610c10 <_estack+0xfffffffff0600c10>
 bf8:	13011942 	sbfx	w2, w10, #1, #6
 bfc:	050e0000 	.inst	0x050e0000 ; undefined
 c00:	3a0e0300 	adcs	w0, w24, w14
 c04:	490b3b0b 	.inst	0x490b3b0b ; undefined
 c08:	00180213 	.inst	0x00180213 ; undefined
 c0c:	012e0f00 	.inst	0x012e0f00 ; undefined
 c10:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
 c14:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
 c18:	13491927 	.inst	0x13491927 ; undefined
 c1c:	07120111 	.inst	0x07120111 ; undefined
 c20:	42961840 	.inst	0x42961840 ; undefined
 c24:	00130119 	.inst	0x00130119 ; undefined
 c28:	012e1000 	.inst	0x012e1000 ; undefined
 c2c:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
 c30:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
 c34:	193c1349 	.inst	0x193c1349 ; undefined
 c38:	18110000 	ldr	w0, 22c38 <_freertos_vector_table+0xbe10>
 c3c:	12000000 	and	w0, w0, #0x1
 c40:	193f012e 	.inst	0x193f012e ; undefined
 c44:	0b3a0e03 	add	w3, w16, w26, uxtb #3
 c48:	13490b3b 	.inst	0x13490b3b ; undefined
 c4c:	07120111 	.inst	0x07120111 ; undefined
 c50:	42961840 	.inst	0x42961840 ; undefined
 c54:	13000019 	sbfx	w25, w0, #0, #1
 c58:	193f012e 	.inst	0x193f012e ; undefined
 c5c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
 c60:	13490b3b 	.inst	0x13490b3b ; undefined
 c64:	1301193c 	sbfx	w28, w9, #1, #6
 c68:	01000000 	.inst	0x01000000 ; undefined
 c6c:	0e250111 	saddl	v17.8h, v8.8b, v5.8b
 c70:	0e030b13 	.inst	0x0e030b13 ; undefined
 c74:	07120111 	.inst	0x07120111 ; undefined
 c78:	00001710 	.inst	0x00001710 ; undefined
 c7c:	0b002402 	add	w2, w0, w0, lsl #9
 c80:	030b3e0b 	.inst	0x030b3e0b ; undefined
 c84:	0300000e 	.inst	0x0300000e ; undefined
 c88:	0b0b0024 	add	w4, w1, w11
 c8c:	08030b3e 	stxrb	w3, w30, [x25]
 c90:	0f040000 	.inst	0x0f040000 ; undefined
 c94:	000b0b00 	.inst	0x000b0b00 ; undefined
 c98:	002e0500 	.inst	0x002e0500 ; NYI
 c9c:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
 ca0:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
 ca4:	01111927 	.inst	0x01111927 ; undefined
 ca8:	18400712 	ldr	w18, 80d88 <_freertos_vector_table+0x69f60>
 cac:	00194296 	.inst	0x00194296 ; undefined
 cb0:	012e0600 	.inst	0x012e0600 ; undefined
 cb4:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
 cb8:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
 cbc:	01111927 	.inst	0x01111927 ; undefined
 cc0:	18400712 	ldr	w18, 80da0 <_freertos_vector_table+0x69f78>
 cc4:	01194296 	.inst	0x01194296 ; undefined
 cc8:	07000013 	.inst	0x07000013 ; undefined
 ccc:	0e030005 	tbl	v5.8b, {v0.16b}, v3.8b
 cd0:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
 cd4:	18021349 	ldr	w9, 4f3c <__module_entries_end-0x30c4>
 cd8:	2e080000 	ext	v0.8b, v0.8b, v8.8b, #0
 cdc:	03193f01 	.inst	0x03193f01 ; undefined
 ce0:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
 ce4:	1119270b 	add	w11, w24, #0x649
 ce8:	40071201 	.inst	0x40071201 ; undefined
 cec:	19429618 	.inst	0x19429618 ; undefined
 cf0:	Adresse 0x0000000000000cf0 hors intervalle.


Déassemblage de la section .debug_aranges :

0000000000000000 <.debug_aranges>:
   0:	0000002c 	.inst	0x0000002c ; undefined
   4:	00000002 	.inst	0x00000002 ; undefined
   8:	00080000 	.inst	0x00080000 ; undefined
   c:	00000000 	.inst	0x00000000 ; undefined
  10:	00010000 	.inst	0x00010000 ; undefined
  14:	00000000 	.inst	0x00000000 ; undefined
  18:	000006ac 	.inst	0x000006ac ; undefined
	...
  30:	0000001c 	.inst	0x0000001c ; undefined
  34:	03240002 	.inst	0x03240002 ; undefined
  38:	00080000 	.inst	0x00080000 ; undefined
	...
  50:	0000002c 	.inst	0x0000002c ; undefined
  54:	03920002 	.inst	0x03920002 ; undefined
  58:	00080000 	.inst	0x00080000 ; undefined
  5c:	00000000 	.inst	0x00000000 ; undefined
  60:	00010d58 	.inst	0x00010d58 ; undefined
  64:	00000000 	.inst	0x00000000 ; undefined
  68:	00000248 	.inst	0x00000248 ; undefined
	...
  80:	0000002c 	.inst	0x0000002c ; undefined
  84:	06570002 	.inst	0x06570002 ; undefined
  88:	00080000 	.inst	0x00080000 ; undefined
  8c:	00000000 	.inst	0x00000000 ; undefined
  90:	00010fa0 	.inst	0x00010fa0 ; undefined
  94:	00000000 	.inst	0x00000000 ; undefined
  98:	00000d40 	.inst	0x00000d40 ; undefined
	...
  b0:	0000002c 	.inst	0x0000002c ; undefined
  b4:	11bd0002 	.inst	0x11bd0002 ; undefined
  b8:	00080000 	.inst	0x00080000 ; undefined
  bc:	00000000 	.inst	0x00000000 ; undefined
  c0:	00011ce0 	.inst	0x00011ce0 ; undefined
  c4:	00000000 	.inst	0x00000000 ; undefined
  c8:	000024ac 	.inst	0x000024ac ; undefined
	...
  e0:	0000002c 	.inst	0x0000002c ; undefined
  e4:	26880002 	.inst	0x26880002 ; undefined
  e8:	00080000 	.inst	0x00080000 ; undefined
  ec:	00000000 	.inst	0x00000000 ; undefined
  f0:	0001418c 	.inst	0x0001418c ; undefined
  f4:	00000000 	.inst	0x00000000 ; undefined
  f8:	000003d0 	.inst	0x000003d0 ; undefined
	...
 110:	0000002c 	.inst	0x0000002c ; undefined
 114:	29930002 	stp	w2, w0, [x0, #152]!
 118:	00080000 	.inst	0x00080000 ; undefined
 11c:	00000000 	.inst	0x00000000 ; undefined
 120:	0001455c 	.inst	0x0001455c ; undefined
 124:	00000000 	.inst	0x00000000 ; undefined
 128:	00000584 	.inst	0x00000584 ; undefined
	...
 140:	0000002c 	.inst	0x0000002c ; undefined
 144:	2dd40002 	ldp	s2, s0, [x0, #160]!
 148:	00080000 	.inst	0x00080000 ; undefined
 14c:	00000000 	.inst	0x00000000 ; undefined
 150:	00014ae0 	.inst	0x00014ae0 ; undefined
 154:	00000000 	.inst	0x00000000 ; undefined
 158:	00000264 	.inst	0x00000264 ; undefined
	...
 170:	0000002c 	.inst	0x0000002c ; undefined
 174:	30840002 	adr	x2, fffffffffff08175 <_estack+0xfffffffff7ef8175>
 178:	00080000 	.inst	0x00080000 ; undefined
 17c:	00000000 	.inst	0x00000000 ; undefined
 180:	00014d44 	.inst	0x00014d44 ; undefined
 184:	00000000 	.inst	0x00000000 ; undefined
 188:	000004a0 	.inst	0x000004a0 ; undefined
	...
 1a0:	0000002c 	.inst	0x0000002c ; undefined
 1a4:	339b0002 	.inst	0x339b0002 ; undefined
 1a8:	00080000 	.inst	0x00080000 ; undefined
 1ac:	00000000 	.inst	0x00000000 ; undefined
 1b0:	000151e4 	.inst	0x000151e4 ; undefined
 1b4:	00000000 	.inst	0x00000000 ; undefined
 1b8:	000000f0 	.inst	0x000000f0 ; undefined
	...
 1d0:	0000002c 	.inst	0x0000002c ; undefined
 1d4:	35dd0002 	cbnz	w2, fffffffffffba1d4 <_estack+0xfffffffff7faa1d4>
 1d8:	00080000 	.inst	0x00080000 ; undefined
 1dc:	00000000 	.inst	0x00000000 ; undefined
 1e0:	000152d4 	.inst	0x000152d4 ; undefined
 1e4:	00000000 	.inst	0x00000000 ; undefined
 1e8:	000000ac 	.inst	0x000000ac ; undefined
	...

Déassemblage de la section .debug_line :

0000000000000000 <.debug_line>:
       0:	000001d1 	.inst	0x000001d1 ; undefined
       4:	01390002 	.inst	0x01390002 ; undefined
       8:	01040000 	.inst	0x01040000 ; undefined
       c:	000d0efb 	.inst	0x000d0efb ; undefined
      10:	01010101 	.inst	0x01010101 ; undefined
      14:	01000000 	.inst	0x01000000 ; undefined
      18:	2f010000 	.inst	0x2f010000 ; undefined
      1c:	656d6f68 	fnmls	z8.h, p3/m, z27.h, z13.h
      20:	6969632f 	ldpsw	x15, x24, [x25, #-184]
      24:	c3542f64 	.inst	0xc3542f64 ; undefined
      28:	a9c36ca9 	ldp	x9, x27, [x5, #48]!
      2c:	72616863 	.inst	0x72616863 ; undefined
      30:	656d6567 	fnmls	z7.h, p1/m, z11.h, z13.h
      34:	2f73746e 	.inst	0x2f73746e ; undefined
      38:	70736152 	adr	x18, e6c63 <_freertos_vector_table+0xcfe3b>
      3c:	72726562 	.inst	0x72726562 ; undefined
      40:	33695079 	.inst	0x33695079 ; undefined
      44:	6572462d 	fnmla	z13.h, p1/m, z17.h, z18.h
      48:	4f545265 	.inst	0x4f545265 ; undefined
      4c:	6f532f53 	.inst	0x6f532f53 ; undefined
      50:	65637275 	fnmls	z21.h, p4/m, z19.h, z3.h
      54:	726f702f 	.inst	0x726f702f ; undefined
      58:	6c626174 	ldnp	d20, d24, [x11, #-480]
      5c:	43472f65 	.inst	0x43472f65 ; undefined
      60:	52412f43 	.inst	0x52412f43 ; undefined
      64:	41435f4d 	.inst	0x41435f4d ; undefined
      68:	365f3335 	tbz	w21, #11, ffffffffffffe6cc <_estack+0xfffffffff7fee6cc>
      6c:	49425f34 	.inst	0x49425f34 ; undefined
      70:	752f0054 	.inst	0x752f0054 ; undefined
      74:	6c2f7273 	stnp	d19, d28, [x19, #-272]
      78:	672f6269 	.inst	0x672f6269 ; undefined
      7c:	632d6363 	.inst	0x632d6363 ; undefined
      80:	73736f72 	.inst	0x73736f72 ; undefined
      84:	7261612f 	.inst	0x7261612f ; undefined
      88:	34366863 	cbz	w3, 6cd94 <_freertos_vector_table+0x55f6c>
      8c:	6e696c2d 	umin	v13.8h, v1.8h, v9.8h
      90:	672d7875 	.inst	0x672d7875 ; undefined
      94:	362f756e 	tbz	w14, #5, ffffffffffffef40 <_estack+0xfffffffff7feef40>
      98:	636e692f 	.inst	0x636e692f ; undefined
      9c:	6564756c 	fnmls	z12.h, p5/m, z11.h, z4.h
      a0:	73752f00 	.inst	0x73752f00 ; undefined
      a4:	61612f72 	.inst	0x61612f72 ; undefined
      a8:	36686372 	tbz	w18, #13, d14 <__module_entries_end-0x72ec>
      ac:	696c2d34 	ldpsw	x20, x11, [x9, #-160]
      b0:	2d78756e 	ldp	s14, s29, [x11, #-64]
      b4:	2f756e67 	.inst	0x2f756e67 ; undefined
      b8:	6c636e69 	ldnp	d9, d27, [x19, #-464]
      bc:	00656475 	.inst	0x00656475 ; undefined
      c0:	6d6f682f 	ldp	d15, d26, [x1, #-272]
      c4:	69632f65 	ldpsw	x5, x11, [x27, #-232]
      c8:	542f6469 	b.ls	5ed54 <_freertos_vector_table+0x47f2c>  // b.plast
      cc:	c36ca9c3 	.inst	0xc36ca9c3 ; undefined
      d0:	616863a9 	.inst	0x616863a9 ; undefined
      d4:	6d656772 	ldp	d18, d25, [x27, #-432]
      d8:	73746e65 	.inst	0x73746e65 ; undefined
      dc:	7361522f 	.inst	0x7361522f ; undefined
      e0:	72656270 	.inst	0x72656270 ; undefined
      e4:	69507972 	ldpsw	x18, x30, [x11, #128]
      e8:	72462d33 	.inst	0x72462d33 ; undefined
      ec:	54526565 	b.pl	a4d98 <_freertos_vector_table+0x8df70>  // b.nfrst
      f0:	532f534f 	.inst	0x532f534f ; undefined
      f4:	6372756f 	.inst	0x6372756f ; undefined
      f8:	6e692f65 	uqsub	v5.8h, v27.8h, v9.8h
      fc:	64756c63 	.inst	0x64756c63 ; undefined
     100:	70000065 	adr	x5, 10f <__module_entries_end-0x7ef1>
     104:	2e74726f 	uabdl	v15.4s, v19.4h, v20.4h
     108:	00010063 	.inst	0x00010063 ; undefined
     10c:	64747300 	.inst	0x64747300 ; undefined
     110:	2e666564 	umax	v4.4h, v11.4h, v6.4h
     114:	00020068 	.inst	0x00020068 ; undefined
     118:	64747300 	.inst	0x64747300 ; undefined
     11c:	2e746e69 	umin	v9.4h, v19.4h, v20.4h
     120:	00030068 	.inst	0x00030068 ; undefined
     124:	6f727000 	.inst	0x6f727000 ; undefined
     128:	6665646a 	.inst	0x6665646a ; undefined
     12c:	00682e73 	.inst	0x00682e73 ; undefined
     130:	70000004 	adr	x4, 133 <__module_entries_end-0x7ecd>
     134:	6d74726f 	ldp	d15, d28, [x19, #-192]
     138:	6f726361 	umlsl2	v1.4s, v27.8h, v2.h[3]
     13c:	0100682e 	.inst	0x0100682e ; undefined
     140:	00000000 	.inst	0x00000000 ; undefined
     144:	00000209 	.inst	0x00000209 ; undefined
     148:	00000001 	.inst	0x00000001 ; undefined
     14c:	d4030000 	.inst	0xd4030000 ; undefined
     150:	3d4f0101 	ldr	b1, [x8, #960]
     154:	3d3d3d3d 	str	b29, [x9, #3919]
     158:	3d3d3d3d 	str	b29, [x9, #3919]
     15c:	3d3d3d67 	str	b7, [x11, #3919]
     160:	3d3d3d3d 	str	b29, [x9, #3919]
     164:	3d3d3d67 	str	b7, [x11, #3919]
     168:	3d3d3d3d 	str	b29, [x9, #3919]
     16c:	3d673d67 	ldr	b7, [x11, #2511]
     170:	3d673d67 	ldr	b7, [x11, #2511]
     174:	3d673d67 	ldr	b7, [x11, #2511]
     178:	3d3d3d67 	str	b7, [x11, #3919]
     17c:	3d3d3d67 	str	b7, [x11, #3919]
     180:	3d3d3d67 	str	b7, [x11, #3919]
     184:	3d673d67 	ldr	b7, [x11, #2511]
     188:	3d673d67 	ldr	b7, [x11, #2511]
     18c:	3d673d67 	ldr	b7, [x11, #2511]
     190:	3e2f3d2f 	.inst	0x3e2f3d2f ; undefined
     194:	403d3e3d 	.inst	0x403d3e3d ; undefined
     198:	2130412f 	.inst	0x2130412f ; undefined
     19c:	2e270332 	uaddl	v18.8h, v25.8b, v7.8b
     1a0:	6c433f2f 	ldnp	d15, d15, [x25, #48]
     1a4:	2124233f 	.inst	0x2124233f ; undefined
     1a8:	30321632 	adr	x18, 6446d <_freertos_vector_table+0x4d645>
     1ac:	40407b25 	.inst	0x40407b25 ; undefined
     1b0:	5c785c13 	ldr	d19, f0d30 <_freertos_vector_table+0xd9f08>
     1b4:	130332bd 	sbfx	w29, w21, #3, #10
     1b8:	3f334b2e 	.inst	0x3f334b2e ; undefined
     1bc:	40bb4e3e 	.inst	0x40bb4e3e ; undefined
     1c0:	2f324e15 	.inst	0x2f324e15 ; undefined
     1c4:	2540bc3e 	.inst	0x2540bc3e ; undefined
     1c8:	21405b3d 	.inst	0x21405b3d ; undefined
     1cc:	213e314b 	.inst	0x213e314b ; undefined
     1d0:	01000202 	.inst	0x01000202 ; undefined
     1d4:	00001901 	.inst	0x00001901 ; undefined
     1d8:	13000200 	sbfx	w0, w16, #0, #1
     1dc:	04000000 	add	z0.b, p0/m, z0.b, z0.b
     1e0:	0d0efb01 	.inst	0x0d0efb01 ; undefined
     1e4:	01010100 	.inst	0x01010100 ; undefined
     1e8:	00000001 	.inst	0x00000001 ; undefined
     1ec:	01000001 	.inst	0x01000001 ; undefined
     1f0:	01880000 	.inst	0x01880000 ; undefined
     1f4:	00020000 	.inst	0x00020000 ; undefined
     1f8:	00000134 	.inst	0x00000134 ; undefined
     1fc:	0efb0104 	.inst	0x0efb0104 ; undefined
     200:	0101000d 	.inst	0x0101000d ; undefined
     204:	00000101 	.inst	0x00000101 ; undefined
     208:	00000100 	.inst	0x00000100 ; undefined
     20c:	6f682f01 	.inst	0x6f682f01 ; undefined
     210:	632f656d 	.inst	0x632f656d ; undefined
     214:	2f646969 	umlsl	v9.4s, v11.4h, v4.h[6]
     218:	6ca9c354 	stp	d20, d16, [x26], #-360
     21c:	6863a9c3 	.inst	0x6863a9c3 ; undefined
     220:	65677261 	fnmls	z1.h, p4/m, z19.h, z7.h
     224:	746e656d 	.inst	0x746e656d ; undefined
     228:	61522f73 	.inst	0x61522f73 ; undefined
     22c:	65627073 	fnmls	z19.h, p4/m, z3.h, z2.h
     230:	50797272 	adr	x18, f307e <_freertos_vector_table+0xdc256>
     234:	462d3369 	.inst	0x462d3369 ; undefined
     238:	52656572 	.inst	0x52656572 ; undefined
     23c:	2f534f54 	.inst	0x2f534f54 ; undefined
     240:	72756f53 	.inst	0x72756f53 ; undefined
     244:	2f006563 	mvni	v3.2s, #0xb, lsl #24
     248:	2f727375 	.inst	0x2f727375 ; undefined
     24c:	63726161 	.inst	0x63726161 ; undefined
     250:	2d343668 	stp	s8, s13, [x19, #-96]
     254:	756e696c 	.inst	0x756e696c ; undefined
     258:	6e672d78 	uqsub	v24.8h, v11.8h, v7.8h
     25c:	6e692f75 	uqsub	v21.8h, v27.8h, v9.8h
     260:	64756c63 	.inst	0x64756c63 ; undefined
     264:	682f0065 	.inst	0x682f0065 ; undefined
     268:	2f656d6f 	.inst	0x2f656d6f ; undefined
     26c:	64696963 	.inst	0x64696963 ; undefined
     270:	a9c3542f 	ldp	x15, x21, [x1, #48]!
     274:	63a9c36c 	.inst	0x63a9c36c ; undefined
     278:	67726168 	.inst	0x67726168 ; undefined
     27c:	6e656d65 	umin	v5.8h, v11.8h, v5.8h
     280:	522f7374 	eor	w20, w27, #0xfffe3fff
     284:	62707361 	.inst	0x62707361 ; undefined
     288:	79727265 	ldrh	w5, [x19, #6456]
     28c:	2d336950 	stp	s16, s26, [x10, #-104]
     290:	65657246 	fnmls	z6.h, p4/m, z18.h, z5.h
     294:	534f5452 	.inst	0x534f5452 ; undefined
     298:	756f532f 	.inst	0x756f532f ; undefined
     29c:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
     2a0:	74726f70 	.inst	0x74726f70 ; undefined
     2a4:	656c6261 	fnmls	z1.h, p0/m, z19.h, z12.h
     2a8:	4343472f 	.inst	0x4343472f ; undefined
     2ac:	4d52412f 	.inst	0x4d52412f ; undefined
     2b0:	3541435f 	cbnz	wzr, 82b18 <_freertos_vector_table+0x6bcf0>
     2b4:	34365f33 	cbz	w19, 6ce98 <_freertos_vector_table+0x56070>
     2b8:	5449425f 	.inst	0x5449425f ; undefined
     2bc:	6f682f00 	.inst	0x6f682f00 ; undefined
     2c0:	632f656d 	.inst	0x632f656d ; undefined
     2c4:	2f646969 	umlsl	v9.4s, v11.4h, v4.h[6]
     2c8:	6ca9c354 	stp	d20, d16, [x26], #-360
     2cc:	6863a9c3 	.inst	0x6863a9c3 ; undefined
     2d0:	65677261 	fnmls	z1.h, p4/m, z19.h, z7.h
     2d4:	746e656d 	.inst	0x746e656d ; undefined
     2d8:	61522f73 	.inst	0x61522f73 ; undefined
     2dc:	65627073 	fnmls	z19.h, p4/m, z3.h, z2.h
     2e0:	50797272 	adr	x18, f312e <_freertos_vector_table+0xdc306>
     2e4:	462d3369 	.inst	0x462d3369 ; undefined
     2e8:	52656572 	.inst	0x52656572 ; undefined
     2ec:	2f534f54 	.inst	0x2f534f54 ; undefined
     2f0:	72756f53 	.inst	0x72756f53 ; undefined
     2f4:	692f6563 	.inst	0x692f6563 ; undefined
     2f8:	756c636e 	.inst	0x756c636e ; undefined
     2fc:	00006564 	.inst	0x00006564 ; undefined
     300:	7473696c 	.inst	0x7473696c ; undefined
     304:	0100632e 	.inst	0x0100632e ; undefined
     308:	74730000 	.inst	0x74730000 ; undefined
     30c:	746e6964 	.inst	0x746e6964 ; undefined
     310:	0200682e 	.inst	0x0200682e ; undefined
     314:	6f700000 	mla	v0.8h, v0.8h, v0.h[3]
     318:	616d7472 	.inst	0x616d7472 ; undefined
     31c:	2e6f7263 	uabdl	v3.4s, v19.4h, v15.4h
     320:	00030068 	.inst	0x00030068 ; undefined
     324:	73696c00 	.inst	0x73696c00 ; undefined
     328:	00682e74 	.inst	0x00682e74 ; undefined
     32c:	00000004 	.inst	0x00000004 ; undefined
     330:	58020900 	ldr	x0, 4450 <__module_entries_end-0x3bb0>
     334:	0000010d 	.inst	0x0000010d ; undefined
     338:	03000000 	.inst	0x03000000 ; undefined
     33c:	320100cf 	orr	w15, w6, #0x80000000
     340:	4c4b404e 	.inst	0x4c4b404e ; undefined
     344:	34304034 	cbz	w20, 60b48 <_freertos_vector_table+0x49d20>
     348:	0b033d40 	add	w0, w10, w3, lsl #15
     34c:	4b4f3d3c 	sub	w28, w9, w15, lsr #15
     350:	40593e3f 	.inst	0x40593e3f ; undefined
     354:	3c10033e 	stur	b30, [x25, #-256]
     358:	4a1a033e 	eor	w30, w25, w26
     35c:	03040200 	.inst	0x03040200 ; undefined
     360:	02004a06 	.inst	0x02004a06 ; undefined
     364:	063c0104 	.inst	0x063c0104 ; undefined
     368:	3d4b4b6d 	ldr	b13, [x27, #722]
     36c:	40593e40 	.inst	0x40593e40 ; undefined
     370:	5e593e31 	frecps	h17, h17, h25
     374:	5a2f515a 	.inst	0x5a2f515a ; undefined
     378:	0002022f 	.inst	0x0002022f ; undefined
     37c:	03810101 	.inst	0x03810101 ; undefined
     380:	00020000 	.inst	0x00020000 ; undefined
     384:	000001b3 	.inst	0x000001b3 ; undefined
     388:	0efb0104 	.inst	0x0efb0104 ; undefined
     38c:	0101000d 	.inst	0x0101000d ; undefined
     390:	00000101 	.inst	0x00000101 ; undefined
     394:	00000100 	.inst	0x00000100 ; undefined
     398:	6f682f01 	.inst	0x6f682f01 ; undefined
     39c:	632f656d 	.inst	0x632f656d ; undefined
     3a0:	2f646969 	umlsl	v9.4s, v11.4h, v4.h[6]
     3a4:	6ca9c354 	stp	d20, d16, [x26], #-360
     3a8:	6863a9c3 	.inst	0x6863a9c3 ; undefined
     3ac:	65677261 	fnmls	z1.h, p4/m, z19.h, z7.h
     3b0:	746e656d 	.inst	0x746e656d ; undefined
     3b4:	61522f73 	.inst	0x61522f73 ; undefined
     3b8:	65627073 	fnmls	z19.h, p4/m, z3.h, z2.h
     3bc:	50797272 	adr	x18, f320a <_freertos_vector_table+0xdc3e2>
     3c0:	462d3369 	.inst	0x462d3369 ; undefined
     3c4:	52656572 	.inst	0x52656572 ; undefined
     3c8:	2f534f54 	.inst	0x2f534f54 ; undefined
     3cc:	72756f53 	.inst	0x72756f53 ; undefined
     3d0:	2f006563 	mvni	v3.2s, #0xb, lsl #24
     3d4:	2f727375 	.inst	0x2f727375 ; undefined
     3d8:	2f62696c 	umlsl	v12.4s, v11.4h, v2.h[6]
     3dc:	2d636367 	ldp	s7, s24, [x27, #-232]
     3e0:	736f7263 	.inst	0x736f7263 ; undefined
     3e4:	61612f73 	.inst	0x61612f73 ; undefined
     3e8:	36686372 	tbz	w18, #13, 1054 <__module_entries_end-0x6fac>
     3ec:	696c2d34 	ldpsw	x20, x11, [x9, #-160]
     3f0:	2d78756e 	ldp	s14, s29, [x11, #-64]
     3f4:	2f756e67 	.inst	0x2f756e67 ; undefined
     3f8:	6e692f36 	uqsub	v22.8h, v25.8h, v9.8h
     3fc:	64756c63 	.inst	0x64756c63 ; undefined
     400:	752f0065 	.inst	0x752f0065 ; undefined
     404:	612f7273 	.inst	0x612f7273 ; undefined
     408:	68637261 	.inst	0x68637261 ; undefined
     40c:	6c2d3436 	stnp	d22, d13, [x1, #-304]
     410:	78756e69 	.inst	0x78756e69 ; undefined
     414:	756e672d 	.inst	0x756e672d ; undefined
     418:	636e692f 	.inst	0x636e692f ; undefined
     41c:	6564756c 	fnmls	z12.h, p5/m, z11.h, z4.h
     420:	7379732f 	.inst	0x7379732f ; undefined
     424:	73752f00 	.inst	0x73752f00 ; undefined
     428:	61612f72 	.inst	0x61612f72 ; undefined
     42c:	36686372 	tbz	w18, #13, 1098 <__module_entries_end-0x6f68>
     430:	696c2d34 	ldpsw	x20, x11, [x9, #-160]
     434:	2d78756e 	ldp	s14, s29, [x11, #-64]
     438:	2f756e67 	.inst	0x2f756e67 ; undefined
     43c:	6c636e69 	ldnp	d9, d27, [x19, #-464]
     440:	00656475 	.inst	0x00656475 ; undefined
     444:	6d6f682f 	ldp	d15, d26, [x1, #-272]
     448:	69632f65 	ldpsw	x5, x11, [x27, #-232]
     44c:	542f6469 	b.ls	5f0d8 <_freertos_vector_table+0x482b0>  // b.plast
     450:	c36ca9c3 	.inst	0xc36ca9c3 ; undefined
     454:	616863a9 	.inst	0x616863a9 ; undefined
     458:	6d656772 	ldp	d18, d25, [x27, #-432]
     45c:	73746e65 	.inst	0x73746e65 ; undefined
     460:	7361522f 	.inst	0x7361522f ; undefined
     464:	72656270 	.inst	0x72656270 ; undefined
     468:	69507972 	ldpsw	x18, x30, [x11, #128]
     46c:	72462d33 	.inst	0x72462d33 ; undefined
     470:	54526565 	b.pl	a511c <_freertos_vector_table+0x8e2f4>  // b.nfrst
     474:	532f534f 	.inst	0x532f534f ; undefined
     478:	6372756f 	.inst	0x6372756f ; undefined
     47c:	6f702f65 	.inst	0x6f702f65 ; undefined
     480:	62617472 	.inst	0x62617472 ; undefined
     484:	472f656c 	.inst	0x472f656c ; undefined
     488:	412f4343 	.inst	0x412f4343 ; undefined
     48c:	435f4d52 	.inst	0x435f4d52 ; undefined
     490:	5f333541 	.inst	0x5f333541 ; undefined
     494:	425f3436 	.inst	0x425f3436 ; undefined
     498:	2f005449 	bic	v9.2s, #0x2, lsl #16
     49c:	656d6f68 	fnmls	z8.h, p3/m, z27.h, z13.h
     4a0:	6969632f 	ldpsw	x15, x24, [x25, #-184]
     4a4:	c3542f64 	.inst	0xc3542f64 ; undefined
     4a8:	a9c36ca9 	ldp	x9, x27, [x5, #48]!
     4ac:	72616863 	.inst	0x72616863 ; undefined
     4b0:	656d6567 	fnmls	z7.h, p1/m, z11.h, z13.h
     4b4:	2f73746e 	.inst	0x2f73746e ; undefined
     4b8:	70736152 	adr	x18, e70e3 <_freertos_vector_table+0xd02bb>
     4bc:	72726562 	.inst	0x72726562 ; undefined
     4c0:	33695079 	.inst	0x33695079 ; undefined
     4c4:	6572462d 	fnmla	z13.h, p1/m, z17.h, z18.h
     4c8:	4f545265 	.inst	0x4f545265 ; undefined
     4cc:	6f532f53 	.inst	0x6f532f53 ; undefined
     4d0:	65637275 	fnmls	z21.h, p4/m, z19.h, z3.h
     4d4:	636e692f 	.inst	0x636e692f ; undefined
     4d8:	6564756c 	fnmls	z12.h, p5/m, z11.h, z4.h
     4dc:	75710000 	.inst	0x75710000 ; undefined
     4e0:	2e657565 	uabd	v5.4h, v11.4h, v5.4h
     4e4:	00010063 	.inst	0x00010063 ; undefined
     4e8:	64747300 	.inst	0x64747300 ; undefined
     4ec:	2e666564 	umax	v4.4h, v11.4h, v6.4h
     4f0:	00020068 	.inst	0x00020068 ; undefined
     4f4:	70797400 	adr	x0, f3377 <_freertos_vector_table+0xdc54f>
     4f8:	682e7365 	.inst	0x682e7365 ; undefined
     4fc:	00000300 	.inst	0x00000300 ; undefined
     500:	69647473 	ldpsw	x19, x29, [x3, #-224]
     504:	682e746e 	.inst	0x682e746e ; undefined
     508:	00000400 	.inst	0x00000400 ; undefined
     50c:	74726f70 	.inst	0x74726f70 ; undefined
     510:	7263616d 	.inst	0x7263616d ; undefined
     514:	00682e6f 	.inst	0x00682e6f ; undefined
     518:	6c000005 	stnp	d5, d0, [x0]
     51c:	2e747369 	uabdl	v9.4s, v27.4h, v20.4h
     520:	00060068 	.inst	0x00060068 ; undefined
     524:	73617400 	.inst	0x73617400 ; undefined
     528:	00682e6b 	.inst	0x00682e6b ; undefined
     52c:	71000006 	subs	w6, w0, #0x0
     530:	65756575 	fnmls	z21.h, p1/m, z11.h, z21.h
     534:	0600682e 	.inst	0x0600682e ; undefined
     538:	00000000 	.inst	0x00000000 ; undefined
     53c:	0fa00209 	.inst	0x0fa00209 ; undefined
     540:	00000001 	.inst	0x00000001 ; undefined
     544:	97030000 	bl	fffffffffc0c0544 <_estack+0xfffffffff40b0544>
     548:	324b0102 	.inst	0x324b0102 ; undefined
     54c:	4b2f9f22 	.inst	0x4b2f9f22 ; undefined
     550:	433e3dad 	.inst	0x433e3dad ; undefined
     554:	0f035a4c 	fmls	v12.4h, v18.4h, v3.h[4]
     558:	243f3d2e 	cmplo	p14.b, p7/z, z9.b, #124
     55c:	2e3a0321 	uaddl	v1.8h, v25.8b, v26.8b
     560:	4d343f5f 	.inst	0x4d343f5f ; undefined
     564:	0b03404c 	add	w12, w2, w3, lsl #16
     568:	3421693c 	cbz	w28, 4328c <_freertos_vector_table+0x2c464>
     56c:	414f4279 	.inst	0x414f4279 ; undefined
     570:	0f033d3d 	.inst	0x0f033d3d ; undefined
     574:	01fd033c 	.inst	0x01fd033c ; undefined
     578:	0322673c 	.inst	0x0322673c ; undefined
     57c:	00262e11 	.inst	0x00262e11 ; NYI
     580:	06010402 	.inst	0x06010402 ; undefined
     584:	033f0666 	.inst	0x033f0666 ; undefined
     588:	5e4c5837 	.inst	0x5e4c5837 ; undefined
     58c:	09034235 	.inst	0x09034235 ; undefined
     590:	40322120 	.inst	0x40322120 ; undefined
     594:	2f403025 	fcmla	v5.4h, v1.4h, v0.h[0], #90
     598:	252e0903 	.inst	0x252e0903 ; undefined
     59c:	04020021 	.inst	0x04020021 ; undefined
     5a0:	00660601 	.inst	0x00660601 ; undefined
     5a4:	2e030402 	.inst	0x2e030402 ; undefined
     5a8:	04040200 	.inst	0x04040200 ; undefined
     5ac:	04020058 	.inst	0x04020058 ; undefined
     5b0:	02002e06 	.inst	0x02002e06 ; undefined
     5b4:	23060604 	.inst	0x23060604 ; undefined
     5b8:	35514d5a 	cbnz	w26, a2f60 <_freertos_vector_table+0x8c138>
     5bc:	342f343e 	cbz	w30, 5ec40 <_freertos_vector_table+0x47e18>
     5c0:	0200232f 	.inst	0x0200232f ; undefined
     5c4:	32230304 	orr	w4, w24, #0x20000000
     5c8:	2e1b0369 	ext	v9.8b, v27.8b, v27.8b, #0
     5cc:	04020030 	.inst	0x04020030 ; undefined
     5d0:	06660601 	.inst	0x06660601 ; undefined
     5d4:	3c09033e 	stur	b30, [x25, #144]
     5d8:	3c37034e 	.inst	0x3c37034e ; undefined
     5dc:	033e5c4c 	.inst	0x033e5c4c ; undefined
     5e0:	03694a17 	.inst	0x03694a17 ; undefined
     5e4:	032e7f99 	.inst	0x032e7f99 ; undefined
     5e8:	232000ec 	.inst	0x232000ec ; undefined
     5ec:	4d322130 	.inst	0x4d322130 ; undefined
     5f0:	302e2303 	adr	x3, 5ca51 <_freertos_vector_table+0x45c29>
     5f4:	0a035a41 	and	w1, w18, w3, lsl #22
     5f8:	37034e3c 	tbnz	w28, #0, 6fbc <__module_entries_end-0x1044>
     5fc:	3e5c4c3c 	.inst	0x3e5c4c3c ; undefined
     600:	694a1703 	ldpsw	x3, x5, [x24, #80]
     604:	21302341 	.inst	0x21302341 ; undefined
     608:	03236732 	.inst	0x03236732 ; undefined
     60c:	40222e10 	.inst	0x40222e10 ; undefined
     610:	413e3e40 	.inst	0x413e3e40 ; undefined
     614:	4c4a1103 	.inst	0x4c4a1103 ; undefined
     618:	2e12035a 	ext	v26.8b, v26.8b, v18.8b, #0
     61c:	035b4c40 	.inst	0x035b4c40 ; undefined
     620:	3221200d 	orr	w13, w0, #0x800000ff
     624:	40302240 	.inst	0x40302240 ; undefined
     628:	2e09032f 	ext	v15.8b, v25.8b, v9.8b, #0
     62c:	02002125 	.inst	0x02002125 ; undefined
     630:	66060104 	.inst	0x66060104 ; undefined
     634:	03040200 	.inst	0x03040200 ; undefined
     638:	0402002e 	.inst	0x0402002e ; undefined
     63c:	02005804 	.inst	0x02005804 ; undefined
     640:	002e0604 	.inst	0x002e0604 ; NYI
     644:	06060402 	.inst	0x06060402 ; undefined
     648:	15035a23 	b	40d6ed4 <_freertos_vector_table+0x40c00ac>
     64c:	3e2f4b4a 	.inst	0x3e2f4b4a ; undefined
     650:	2f2e0a03 	.inst	0x2f2e0a03 ; undefined
     654:	4d222f33 	.inst	0x4d222f33 ; undefined
     658:	04040200 	.inst	0x04040200 ; undefined
     65c:	035b3228 	.inst	0x035b3228 ; undefined
     660:	3f302e15 	.inst	0x3f302e15 ; undefined
     664:	503d403e 	adr	x30, 7ae6a <_freertos_vector_table+0x64042>
     668:	3e5c4c3e 	.inst	0x3e5c4c3e ; undefined
     66c:	694a1503 	ldpsw	x3, x5, [x8, #80]
     670:	21302440 	.inst	0x21302440 ; undefined
     674:	16034e32 	b	fffffffff80d3f3c <_estack+0xfffffffff00c3f3c>
     678:	3d50312e 	ldr	b14, [x9, #1036]
     67c:	24403e3d 	cmpne	p13.h, p7/z, z17.h, z0.d
     680:	41322130 	.inst	0x41322130 ; undefined
     684:	21223e22 	.inst	0x21223e22 ; undefined
     688:	22314032 	.inst	0x22314032 ; undefined
     68c:	32212268 	orr	w8, w19, #0x800000ff
     690:	32213e33 	orr	w19, w17, #0x80007fff
     694:	2e0f033d 	ext	v29.8b, v25.8b, v15.8b, #0
     698:	032e1603 	.inst	0x032e1603 ; undefined
     69c:	25593c22 	cmplt	p2.h, p7/z, z1.h, #-7
     6a0:	4a11033e 	eor	w30, w25, w17
     6a4:	6875833e 	.inst	0x6875833e ; undefined
     6a8:	83580903 	.inst	0x83580903 ; undefined
     6ac:	3e896883 	.inst	0x3e896883 ; undefined
     6b0:	3c0d0342 	stur	b2, [x26, #208]
     6b4:	4b32214c 	sub	w12, w10, w18, uxth
     6b8:	5068754c 	adr	x12, d1562 <_freertos_vector_table+0xba73a>
     6bc:	22434076 	.inst	0x22434076 ; undefined
     6c0:	2030033f 	.inst	0x2030033f ; undefined
     6c4:	0e035c4c 	.inst	0x0e035c4c ; undefined
     6c8:	7fbc0320 	.inst	0x7fbc0320 ; undefined
     6cc:	4a3f034a 	eon	w10, w26, wzr
     6d0:	22233e28 	.inst	0x22233e28 ; undefined
     6d4:	5a4c223e 	.inst	0x5a4c223e ; undefined
     6d8:	4a730327 	eon	w7, w25, w19, lsr #0
     6dc:	244a1103 	cmphs	p3.h, p4/z, z8.h, z10.h
     6e0:	3f40213e 	.inst	0x3f40213e ; undefined
     6e4:	23404c22 	.inst	0x23404c22 ; undefined
     6e8:	32322122 	orr	w2, w9, #0x7fc000
     6ec:	2123404c 	.inst	0x2123404c ; undefined
     6f0:	68223f32 	.inst	0x68223f32 ; undefined
     6f4:	21222340 	.inst	0x21222340 ; undefined
     6f8:	40683232 	.inst	0x40683232 ; undefined
     6fc:	02022123 	.inst	0x02022123 ; undefined
     700:	1a010100 	adc	w0, w8, w1
     704:	02000006 	.inst	0x02000006 ; undefined
     708:	00018800 	.inst	0x00018800 ; undefined
     70c:	fb010400 	.inst	0xfb010400 ; undefined
     710:	01000d0e 	.inst	0x01000d0e ; undefined
     714:	00010101 	.inst	0x00010101 ; undefined
     718:	00010000 	.inst	0x00010000 ; undefined
     71c:	682f0100 	.inst	0x682f0100 ; undefined
     720:	2f656d6f 	.inst	0x2f656d6f ; undefined
     724:	64696963 	.inst	0x64696963 ; undefined
     728:	a9c3542f 	ldp	x15, x21, [x1, #48]!
     72c:	63a9c36c 	.inst	0x63a9c36c ; undefined
     730:	67726168 	.inst	0x67726168 ; undefined
     734:	6e656d65 	umin	v5.8h, v11.8h, v5.8h
     738:	522f7374 	eor	w20, w27, #0xfffe3fff
     73c:	62707361 	.inst	0x62707361 ; undefined
     740:	79727265 	ldrh	w5, [x19, #6456]
     744:	2d336950 	stp	s16, s26, [x10, #-104]
     748:	65657246 	fnmls	z6.h, p4/m, z18.h, z5.h
     74c:	534f5452 	.inst	0x534f5452 ; undefined
     750:	756f532f 	.inst	0x756f532f ; undefined
     754:	00656372 	.inst	0x00656372 ; undefined
     758:	7273752f 	.inst	0x7273752f ; undefined
     75c:	62696c2f 	.inst	0x62696c2f ; undefined
     760:	6363672f 	.inst	0x6363672f ; undefined
     764:	6f72632d 	umlsl2	v13.4s, v25.8h, v2.h[3]
     768:	612f7373 	.inst	0x612f7373 ; undefined
     76c:	68637261 	.inst	0x68637261 ; undefined
     770:	6c2d3436 	stnp	d22, d13, [x1, #-304]
     774:	78756e69 	.inst	0x78756e69 ; undefined
     778:	756e672d 	.inst	0x756e672d ; undefined
     77c:	692f362f 	.inst	0x692f362f ; undefined
     780:	756c636e 	.inst	0x756c636e ; undefined
     784:	2f006564 	mvni	v4.2s, #0xb, lsl #24
     788:	2f727375 	.inst	0x2f727375 ; undefined
     78c:	63726161 	.inst	0x63726161 ; undefined
     790:	2d343668 	stp	s8, s13, [x19, #-96]
     794:	756e696c 	.inst	0x756e696c ; undefined
     798:	6e672d78 	uqsub	v24.8h, v11.8h, v7.8h
     79c:	6e692f75 	uqsub	v21.8h, v27.8h, v9.8h
     7a0:	64756c63 	.inst	0x64756c63 ; undefined
     7a4:	682f0065 	.inst	0x682f0065 ; undefined
     7a8:	2f656d6f 	.inst	0x2f656d6f ; undefined
     7ac:	64696963 	.inst	0x64696963 ; undefined
     7b0:	a9c3542f 	ldp	x15, x21, [x1, #48]!
     7b4:	63a9c36c 	.inst	0x63a9c36c ; undefined
     7b8:	67726168 	.inst	0x67726168 ; undefined
     7bc:	6e656d65 	umin	v5.8h, v11.8h, v5.8h
     7c0:	522f7374 	eor	w20, w27, #0xfffe3fff
     7c4:	62707361 	.inst	0x62707361 ; undefined
     7c8:	79727265 	ldrh	w5, [x19, #6456]
     7cc:	2d336950 	stp	s16, s26, [x10, #-104]
     7d0:	65657246 	fnmls	z6.h, p4/m, z18.h, z5.h
     7d4:	534f5452 	.inst	0x534f5452 ; undefined
     7d8:	756f532f 	.inst	0x756f532f ; undefined
     7dc:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
     7e0:	6c636e69 	ldnp	d9, d27, [x19, #-464]
     7e4:	00656475 	.inst	0x00656475 ; undefined
     7e8:	6d6f682f 	ldp	d15, d26, [x1, #-272]
     7ec:	69632f65 	ldpsw	x5, x11, [x27, #-232]
     7f0:	542f6469 	b.ls	5f47c <_freertos_vector_table+0x48654>  // b.plast
     7f4:	c36ca9c3 	.inst	0xc36ca9c3 ; undefined
     7f8:	616863a9 	.inst	0x616863a9 ; undefined
     7fc:	6d656772 	ldp	d18, d25, [x27, #-432]
     800:	73746e65 	.inst	0x73746e65 ; undefined
     804:	7361522f 	.inst	0x7361522f ; undefined
     808:	72656270 	.inst	0x72656270 ; undefined
     80c:	69507972 	ldpsw	x18, x30, [x11, #128]
     810:	72462d33 	.inst	0x72462d33 ; undefined
     814:	54526565 	b.pl	a54c0 <_freertos_vector_table+0x8e698>  // b.nfrst
     818:	532f534f 	.inst	0x532f534f ; undefined
     81c:	6372756f 	.inst	0x6372756f ; undefined
     820:	6f702f65 	.inst	0x6f702f65 ; undefined
     824:	62617472 	.inst	0x62617472 ; undefined
     828:	472f656c 	.inst	0x472f656c ; undefined
     82c:	412f4343 	.inst	0x412f4343 ; undefined
     830:	435f4d52 	.inst	0x435f4d52 ; undefined
     834:	5f333541 	.inst	0x5f333541 ; undefined
     838:	425f3436 	.inst	0x425f3436 ; undefined
     83c:	00005449 	.inst	0x00005449 ; undefined
     840:	6b736174 	.inst	0x6b736174 ; undefined
     844:	00632e73 	.inst	0x00632e73 ; undefined
     848:	73000001 	.inst	0x73000001 ; undefined
     84c:	65646474 	fnmls	z20.h, p1/m, z3.h, z4.h
     850:	00682e66 	.inst	0x00682e66 ; undefined
     854:	73000002 	.inst	0x73000002 ; undefined
     858:	6e696474 	umax	v20.8h, v3.8h, v9.8h
     85c:	00682e74 	.inst	0x00682e74 ; undefined
     860:	70000003 	adr	x3, 863 <__module_entries_end-0x779d>
     864:	646a6f72 	.inst	0x646a6f72 ; undefined
     868:	2e736665 	umax	v5.4h, v19.4h, v19.4h
     86c:	00040068 	.inst	0x00040068 ; undefined
     870:	726f7000 	.inst	0x726f7000 ; undefined
     874:	63616d74 	.inst	0x63616d74 ; undefined
     878:	682e6f72 	.inst	0x682e6f72 ; undefined
     87c:	00000500 	.inst	0x00000500 ; undefined
     880:	7473696c 	.inst	0x7473696c ; undefined
     884:	0400682e 	mls	z14.b, p2/m, z1.b, z0.b
     888:	61740000 	.inst	0x61740000 ; undefined
     88c:	682e6b73 	.inst	0x682e6b73 ; undefined
     890:	00000400 	.inst	0x00000400 ; undefined
     894:	02090000 	.inst	0x02090000 ; undefined
     898:	00011ce0 	.inst	0x00011ce0 ; undefined
     89c:	00000000 	.inst	0x00000000 ; undefined
     8a0:	0105a903 	.inst	0x0105a903 ; undefined
     8a4:	4c822203 	st1	{v3.16b-v6.16b}, [x16], x2
     8a8:	503f3e3f 	adr	xzr, 7f06e <_freertos_vector_table+0x68246>
     8ac:	0a032541 	and	w1, w10, w3, lsl #9
     8b0:	402f9f3c 	.inst	0x402f9f3c ; undefined
     8b4:	0d032131 	.inst	0x0d032131 ; undefined
     8b8:	9e20032e 	fcvtns	x14, s25
     8bc:	3c130383 	stur	b3, [x28, #-208]
     8c0:	02009530 	.inst	0x02009530 ; undefined
     8c4:	79030204 	strh	w4, [x16, #384]
     8c8:	04020066 	.inst	0x04020066 ; undefined
     8cc:	063c0601 	.inst	0x063c0601 ; undefined
     8d0:	034a0903 	.inst	0x034a0903 ; undefined
     8d4:	3e32200a 	.inst	0x3e32200a ; undefined
     8d8:	403d4435 	.inst	0x403d4435 ; undefined
     8dc:	0a03593f 	and	wzr, w9, w3, lsl #22
     8e0:	2e20033c 	uaddl	v28.8h, v25.8b, v0.8b
     8e4:	2e1b032f 	ext	v15.8b, v25.8b, v27.8b, #0
     8e8:	40424078 	.inst	0x40424078 ; undefined
     8ec:	5c75223f 	ldr	d31, ead30 <_freertos_vector_table+0xd3f08>
     8f0:	0c035d4c 	.inst	0x0c035d4c ; undefined
     8f4:	03845a2e 	.inst	0x03845a2e ; undefined
     8f8:	0a034a0d 	and	w13, w16, w3, lsl #18
     8fc:	22940874 	.inst	0x22940874 ; undefined
     900:	0b03845c 	.inst	0x0b03845c ; undefined
     904:	243f4220 	cmphs	p0.b, p0/z, z17.b, #125
     908:	01040200 	.inst	0x01040200 ; undefined
     90c:	02003c06 	.inst	0x02003c06 ; undefined
     910:	004a0204 	.inst	0x004a0204 ; undefined
     914:	20040402 	.inst	0x20040402 ; undefined
     918:	04040200 	.inst	0x04040200 ; undefined
     91c:	005a2306 	.inst	0x005a2306 ; undefined
     920:	06010402 	.inst	0x06010402 ; undefined
     924:	4cd006ba 	ld4	{v26.8h-v29.8h}, [x21], x16
     928:	763c0b03 	.inst	0x763c0b03 ; undefined
     92c:	0b035d6d 	add	w13, w11, w3, lsl #23
     930:	25327582 	.inst	0x25327582 ; undefined
     934:	27695a24 	.inst	0x27695a24 ; undefined
     938:	24264c44 	cmphs	p4.b, p3/z, z2.b, #25
     93c:	005f5a4d 	.inst	0x005f5a4d ; undefined
     940:	06010402 	.inst	0x06010402 ; undefined
     944:	034c0658 	.inst	0x034c0658 ; undefined
     948:	02003c0c 	.inst	0x02003c0c ; undefined
     94c:	58060104 	ldr	x4, c96c <__module_entries_end+0x496c>
     950:	09034c06 	.inst	0x09034c06 ; undefined
     954:	5f423e2e 	.inst	0x5f423e2e ; undefined
     958:	44263e32 	.inst	0x44263e32 ; undefined
     95c:	033f233d 	.inst	0x033f233d ; undefined
     960:	033e200b 	.inst	0x033e200b ; undefined
     964:	263e2e09 	.inst	0x263e2e09 ; undefined
     968:	3c00cf03 	str	b3, [x24, #12]!
     96c:	02002440 	.inst	0x02002440 ; undefined
     970:	3c060104 	stur	b4, [x8, #96]
     974:	02040200 	.inst	0x02040200 ; undefined
     978:	0402004a 	.inst	0x0402004a ; undefined
     97c:	02002004 	.inst	0x02002004 ; undefined
     980:	21060404 	.inst	0x21060404 ; undefined
     984:	04040200 	.inst	0x04040200 ; undefined
     988:	0402003e 	.inst	0x0402003e ; undefined
     98c:	02002204 	.inst	0x02002204 ; undefined
     990:	36210404 	tbz	w4, #4, 2a10 <__module_entries_end-0x55f0>
     994:	323c1603 	orr	w3, w16, #0x3f0
     998:	01040200 	.inst	0x01040200 ; undefined
     99c:	02003c06 	.inst	0x02003c06 ; undefined
     9a0:	004a0204 	.inst	0x004a0204 ; undefined
     9a4:	20040402 	.inst	0x20040402 ; undefined
     9a8:	04040200 	.inst	0x04040200 ; undefined
     9ac:	02002106 	.inst	0x02002106 ; undefined
     9b0:	003e0404 	.inst	0x003e0404 ; NYI
     9b4:	30040402 	adr	x2, 8a35 <__module_entries_end+0xa35>
     9b8:	04040200 	.inst	0x04040200 ; undefined
     9bc:	254d3621 	cmplt	p1.h, p5/z, z17.h, #13
     9c0:	0024353e 	.inst	0x0024353e ; NYI
     9c4:	06010402 	.inst	0x06010402 ; undefined
     9c8:	0402003c 	.inst	0x0402003c ; undefined
     9cc:	02004a02 	.inst	0x02004a02 ; undefined
     9d0:	00200404 	.inst	0x00200404 ; NYI
     9d4:	06040402 	.inst	0x06040402 ; undefined
     9d8:	00200a03 	.inst	0x00200a03 ; NYI
     9dc:	40040402 	.inst	0x40040402 ; undefined
     9e0:	766b4c4e 	.inst	0x766b4c4e ; undefined
     9e4:	6b3c0e03 	subs	w3, w16, w28, uxtb #3
     9e8:	032e0c03 	.inst	0x032e0c03 ; undefined
     9ec:	5a423c14 	.inst	0x5a423c14 ; undefined
     9f0:	00580b03 	.inst	0x00580b03 ; undefined
     9f4:	06010402 	.inst	0x06010402 ; undefined
     9f8:	040200ba 	.inst	0x040200ba ; undefined
     9fc:	02002e02 	.inst	0x02002e02 ; undefined
     a00:	06200404 	.inst	0x06200404 ; undefined
     a04:	08c05d33 	ldlarb	w19, [x9]
     a08:	0c033e97 	.inst	0x0c033e97 ; undefined
     a0c:	3f442120 	.inst	0x3f442120 ; undefined
     a10:	04020024 	.inst	0x04020024 ; undefined
     a14:	003c0601 	.inst	0x003c0601 ; NYI
     a18:	4a020402 	eor	w2, w0, w2, lsl #1
     a1c:	04040200 	.inst	0x04040200 ; undefined
     a20:	04020020 	.inst	0x04020020 ; undefined
     a24:	5a260604 	.inst	0x5a260604 ; undefined
     a28:	01040200 	.inst	0x01040200 ; undefined
     a2c:	d006ba06 	adrp	x6, d742000 <_estack+0x5732000>
     a30:	225a434c 	.inst	0x225a434c ; undefined
     a34:	2722225c 	.inst	0x2722225c ; undefined
     a38:	19035c68 	.inst	0x19035c68 ; undefined
     a3c:	206e0320 	.inst	0x206e0320 ; undefined
     a40:	3c0c0388 	stur	b8, [x28, #192]
     a44:	28207803 	stnp	w3, w30, [x0, #-256]
     a48:	03212f44 	.inst	0x03212f44 ; undefined
     a4c:	02002e09 	.inst	0x02002e09 ; undefined
     a50:	66060104 	.inst	0x66060104 ; undefined
     a54:	02040200 	.inst	0x02040200 ; undefined
     a58:	0402002e 	.inst	0x0402002e ; undefined
     a5c:	31062004 	adds	w4, w0, #0x188
     a60:	0402006a 	.inst	0x0402006a ; undefined
     a64:	004a0601 	.inst	0x004a0601 ; undefined
     a68:	2e020402 	.inst	0x2e020402 ; undefined
     a6c:	04040200 	.inst	0x04040200 ; undefined
     a70:	03300620 	.inst	0x03300620 ; undefined
     a74:	36212e11 	tbz	w17, #4, 3034 <__module_entries_end-0x4fcc>
     a78:	0200353d 	.inst	0x0200353d ; undefined
     a7c:	3c060104 	stur	b4, [x8, #96]
     a80:	50226806 	adr	x6, 45782 <_freertos_vector_table+0x2e95a>
     a84:	8793083d 	.inst	0x8793083d ; undefined
     a88:	26200c03 	.inst	0x26200c03 ; undefined
     a8c:	3d3c0903 	str	b3, [x8, #3842]
     a90:	2e170321 	ext	v1.8b, v25.8b, v23.8b, #0
     a94:	845c4f30 	ld1b	{z16.s}, p3/z, [x25, z28.s, sxtw]
     a98:	a5083d35 	ld1rqw	{z21.s}, p7/z, [x9, #-128]
     a9c:	34213060 	cbz	w0, 430a8 <_freertos_vector_table+0x2c280>
     aa0:	032e2103 	.inst	0x032e2103 ; undefined
     aa4:	0343ba15 	.inst	0x0343ba15 ; undefined
     aa8:	4b4b3c0a 	sub	w10, w0, w11, lsr #15
     aac:	033c0903 	.inst	0x033c0903 ; undefined
     ab0:	32402015 	.inst	0x32402015 ; undefined
     ab4:	40213d3d 	.inst	0x40213d3d ; undefined
     ab8:	c3037517 	.inst	0xc3037517 ; undefined
     abc:	212f2e00 	.inst	0x212f2e00 ; undefined
     ac0:	22200b03 	.inst	0x22200b03 ; undefined
     ac4:	225c5a76 	.inst	0x225c5a76 ; undefined
     ac8:	083d3d59 	.inst	0x083d3d59 ; undefined
     acc:	75038494 	.inst	0x75038494 ; undefined
     ad0:	5813034a 	ldr	x10, 26b38 <_freertos_vector_table+0xfd10>
     ad4:	404c2844 	.inst	0x404c2844 ; undefined
     ad8:	3e3d503e 	.inst	0x3e3d503e ; undefined
     adc:	03315c44 	.inst	0x03315c44 ; undefined
     ae0:	2122200d 	.inst	0x2122200d ; undefined
     ae4:	214e2632 	.inst	0x214e2632 ; undefined
     ae8:	20140332 	.inst	0x20140332 ; undefined
     aec:	32214e22 	orr	w2, w17, #0x8007ffff
     af0:	33243d15 	.inst	0x33243d15 ; undefined
     af4:	01040200 	.inst	0x01040200 ; undefined
     af8:	02003c06 	.inst	0x02003c06 ; undefined
     afc:	004a0204 	.inst	0x004a0204 ; undefined
     b00:	20040402 	.inst	0x20040402 ; undefined
     b04:	04040200 	.inst	0x04040200 ; undefined
     b08:	02002206 	.inst	0x02002206 ; undefined
     b0c:	032f0404 	.inst	0x032f0404 ; undefined
     b10:	312e02b6 	adds	w22, w21, #0xb80
     b14:	4c5c5c26 	.inst	0x4c5c5c26 ; undefined
     b18:	080b033e 	stxrb	w11, w30, [x25]
     b1c:	02006a58 	.inst	0x02006a58 ; undefined
     b20:	66060104 	.inst	0x66060104 ; undefined
     b24:	02040200 	.inst	0x02040200 ; undefined
     b28:	0402002e 	.inst	0x0402002e ; undefined
     b2c:	35062004 	cbnz	w4, cf2c <__module_entries_end+0x4f2c>
     b30:	3e67284b 	.inst	0x3e67284b ; undefined
     b34:	40284b51 	.inst	0x40284b51 ; undefined
     b38:	3c09034c 	stur	b12, [x26, #144]
     b3c:	90080a03 	adrp	x3, 10140000 <_estack+0x8130000>
     b40:	2e420384 	.inst	0x2e420384 ; undefined
     b44:	2000cf03 	.inst	0x2000cf03 ; undefined
     b48:	3c1a03d8 	stur	b24, [x30, #-96]
     b4c:	5a740d03 	.inst	0x5a740d03 ; undefined
     b50:	212e0903 	.inst	0x212e0903 ; undefined
     b54:	5c3e4f34 	ldr	d20, 7d538 <_freertos_vector_table+0x66710>
     b58:	213d2133 	.inst	0x213d2133 ; undefined
     b5c:	5c3e4144 	ldr	d4, 7d384 <_freertos_vector_table+0x6655c>
     b60:	223e2233 	.inst	0x223e2233 ; undefined
     b64:	3e4f3621 	.inst	0x3e4f3621 ; undefined
     b68:	6a4c315c 	ands	w28, w10, w12, lsr #12
     b6c:	21342123 	.inst	0x21342123 ; undefined
     b70:	4a32035c 	eon	w28, w26, w18
     b74:	03205203 	.inst	0x03205203 ; undefined
     b78:	02003c23 	.inst	0x02003c23 ; undefined
     b7c:	08060104 	stxrb	w6, w4, [x8]
     b80:	040200ac 	.inst	0x040200ac ; undefined
     b84:	03065803 	.inst	0x03065803 ; undefined
     b88:	0340660b 	.inst	0x0340660b ; undefined
     b8c:	3d764a0a 	ldr	b10, [x16, #3474]
     b90:	580a0340 	ldr	x0, 14bf8 <uart_init+0x7c>
     b94:	033d766d 	.inst	0x033d766d ; undefined
     b98:	11033c25 	add	w5, w1, #0xcf
     b9c:	5a3e4c3c 	.inst	0x5a3e4c3c ; undefined
     ba0:	5ba4083d 	.inst	0x5ba4083d ; undefined
     ba4:	035c3287 	.inst	0x035c3287 ; undefined
     ba8:	32212011 	orr	w17, w0, #0x800000ff
     bac:	4e4a0903 	.inst	0x4e4a0903 ; undefined
     bb0:	083d333e 	.inst	0x083d333e ; undefined
     bb4:	5c328892 	ldr	d18, 65cc4 <_freertos_vector_table+0x4ee9c>
     bb8:	30322123 	adr	x3, 64fdd <_freertos_vector_table+0x4e1b5>
     bbc:	50405959 	adr	x25, 816e6 <_freertos_vector_table+0x6a8be>
     bc0:	4a0e0323 	eor	w3, w25, w14
     bc4:	0200334f 	.inst	0x0200334f ; undefined
     bc8:	74060104 	.inst	0x74060104 ; undefined
     bcc:	853e5f06 	ld1w	{z6.s}, p7/z, [x24, z30.s, uxtw #2]
     bd0:	31322f91 	adds	w17, w28, #0xc8b
     bd4:	13322122 	.inst	0x13322122 ; undefined
     bd8:	2e35034b 	uaddl	v11.8h, v26.8b, v21.8b
     bdc:	033c0b03 	.inst	0x033c0b03 ; undefined
     be0:	035a2017 	.inst	0x035a2017 ; undefined
     be4:	bf032067 	.inst	0xbf032067 ; undefined
     be8:	00312001 	.inst	0x00312001 ; NYI
     bec:	30030402 	adr	x2, 6c6d <__module_entries_end-0x1393>
     bf0:	03040200 	.inst	0x03040200 ; undefined
     bf4:	0402008e 	.inst	0x0402008e ; undefined
     bf8:	063c0601 	.inst	0x063c0601 ; undefined
     bfc:	403d3d41 	.inst	0x403d3d41 ; undefined
     c00:	59594242 	.inst	0x59594242 ; undefined
     c04:	2e0a0340 	ext	v0.8b, v26.8b, v10.8b, #0
     c08:	22842222 	.inst	0x22842222 ; undefined
     c0c:	3d592240 	ldr	b0, [x18, #1608]
     c10:	03227675 	.inst	0x03227675 ; undefined
     c14:	1e032e6b 	.inst	0x1e032e6b ; undefined
     c18:	01b00358 	.inst	0x01b00358 ; undefined
     c1c:	3c12033c 	stur	b28, [x25, #-224]
     c20:	2e1d033d 	ext	v29.8b, v25.8b, v29.8b, #0
     c24:	02002342 	.inst	0x02002342 ; undefined
     c28:	66060104 	.inst	0x66060104 ; undefined
     c2c:	02040200 	.inst	0x02040200 ; undefined
     c30:	0402002e 	.inst	0x0402002e ; undefined
     c34:	34062004 	cbz	w4, d034 <__module_entries_end+0x5034>
     c38:	1d4a0b03 	.inst	0x1d4a0b03 ; undefined
     c3c:	fb035a67 	.inst	0xfb035a67 ; undefined
     c40:	5c233c03 	ldr	d3, 473c0 <_freertos_vector_table+0x30598>
     c44:	170321a0 	b	fffffffffc0c92c4 <_estack+0xfffffffff40b92c4>
     c48:	69234d2e 	.inst	0x69234d2e ; undefined
     c4c:	03433e5a 	.inst	0x03433e5a ; undefined
     c50:	2322200c 	.inst	0x2322200c ; undefined
     c54:	5c3e3e5a 	ldr	d26, 7d41c <_freertos_vector_table+0x665f4>
     c58:	21224c6e 	.inst	0x21224c6e ; undefined
     c5c:	79236936 	strh	w22, [x9, #4532]
     c60:	433e5a85 	.inst	0x433e5a85 ; undefined
     c64:	22200c03 	.inst	0x22200c03 ; undefined
     c68:	776d4024 	.inst	0x776d4024 ; undefined
     c6c:	4c318334 	.inst	0x4c318334 ; undefined
     c70:	68362122 	.inst	0x68362122 ; undefined
     c74:	3e223032 	.inst	0x3e223032 ; undefined
     c78:	933e3e4d 	.inst	0x933e3e4d ; undefined
     c7c:	23592367 	.inst	0x23592367 ; undefined
     c80:	433e233d 	.inst	0x433e233d ; undefined
     c84:	2725221e 	.inst	0x2725221e ; undefined
     c88:	15033d3e 	b	40d0180 <_freertos_vector_table+0x40b9358>
     c8c:	03869008 	.inst	0x03869008 ; undefined
     c90:	2122200c 	.inst	0x2122200c ; undefined
     c94:	17037736 	b	fffffffffc0de96c <_estack+0xfffffffff40ce96c>
     c98:	3e30302e 	.inst	0x3e30302e ; undefined
     c9c:	933e3d4d 	.inst	0x933e3d4d ; undefined
     ca0:	23592367 	.inst	0x23592367 ; undefined
     ca4:	433e233d 	.inst	0x433e233d ; undefined
     ca8:	2725221e 	.inst	0x2725221e ; undefined
     cac:	083d5a41 	.inst	0x083d5a41 ; undefined
     cb0:	3e865ba4 	.inst	0x3e865ba4 ; undefined
     cb4:	4a090351 	eor	w17, w26, w9
     cb8:	03362130 	.inst	0x03362130 ; undefined
     cbc:	30304a19 	adr	x25, 615fd <_freertos_vector_table+0x4a7d5>
     cc0:	415e403d 	.inst	0x415e403d ; undefined
     cc4:	a4083d5a 	ld1rqb	{z26.b}, p7/z, [x10, #-128]
     cc8:	513e865b 	sub	w27, w18, #0xfa1
     ccc:	2f4a0903 	mla	v3.4h, v8.4h, v10.h[4]
     cd0:	423c0903 	.inst	0x423c0903 ; undefined
     cd4:	01040200 	.inst	0x01040200 ; undefined
     cd8:	02003c06 	.inst	0x02003c06 ; undefined
     cdc:	004a0204 	.inst	0x004a0204 ; undefined
     ce0:	20040402 	.inst	0x20040402 ; undefined
     ce4:	04040200 	.inst	0x04040200 ; undefined
     ce8:	02002206 	.inst	0x02002206 ; undefined
     cec:	5a220404 	.inst	0x5a220404 ; undefined
     cf0:	2223402f 	.inst	0x2223402f ; undefined
     cf4:	034c3521 	.inst	0x034c3521 ; undefined
     cf8:	03784a0d 	.inst	0x03784a0d ; undefined
     cfc:	0200e409 	.inst	0x0200e409 ; undefined
     d00:	3c060104 	stur	b4, [x8, #96]
     d04:	cb034106 	sub	x6, x8, x3, lsl #16
     d08:	bc037400 	str	s0, [x0], #55
     d0c:	5a4d207f 	.inst	0x5a4d207f ; undefined
     d10:	9e3b034e 	.inst	0x9e3b034e ; undefined
     d14:	a3204b03 	.inst	0xa3204b03 ; undefined
     d18:	4a2e0368 	eon	w8, w27, w14
     d1c:	01000302 	.inst	0x01000302 ; undefined
     d20:	0000c401 	.inst	0x0000c401 ; undefined
     d24:	65000200 	.inst	0x65000200 ; undefined
     d28:	04000000 	add	z0.b, p0/m, z0.b, z0.b
     d2c:	0d0efb01 	.inst	0x0d0efb01 ; undefined
     d30:	01010100 	.inst	0x01010100 ; undefined
     d34:	00000001 	.inst	0x00000001 ; undefined
     d38:	01000001 	.inst	0x01000001 ; undefined
     d3c:	6d6f682f 	ldp	d15, d26, [x1, #-272]
     d40:	69632f65 	ldpsw	x5, x11, [x27, #-232]
     d44:	542f6469 	b.ls	5f9d0 <_freertos_vector_table+0x48ba8>  // b.plast
     d48:	c36ca9c3 	.inst	0xc36ca9c3 ; undefined
     d4c:	616863a9 	.inst	0x616863a9 ; undefined
     d50:	6d656772 	ldp	d18, d25, [x27, #-432]
     d54:	73746e65 	.inst	0x73746e65 ; undefined
     d58:	7361522f 	.inst	0x7361522f ; undefined
     d5c:	72656270 	.inst	0x72656270 ; undefined
     d60:	69507972 	ldpsw	x18, x30, [x11, #128]
     d64:	72462d33 	.inst	0x72462d33 ; undefined
     d68:	54526565 	b.pl	a5a14 <_freertos_vector_table+0x8ebec>  // b.nfrst
     d6c:	442f534f 	.inst	0x442f534f ; undefined
     d70:	2f6f6d65 	.inst	0x2f6f6d65 ; undefined
     d74:	76697244 	.inst	0x76697244 ; undefined
     d78:	00737265 	.inst	0x00737265 ; undefined
     d7c:	71726900 	subs	w0, w8, #0xc9a, lsl #12
     d80:	0100632e 	.inst	0x0100632e ; undefined
     d84:	72690000 	.inst	0x72690000 ; undefined
     d88:	00682e71 	.inst	0x00682e71 ; undefined
     d8c:	00000001 	.inst	0x00000001 ; undefined
     d90:	8c020900 	.inst	0x8c020900 ; undefined
     d94:	00000141 	.inst	0x00000141 ; undefined
     d98:	03000000 	.inst	0x03000000 ; undefined
     d9c:	234b011e 	.inst	0x234b011e ; undefined
     da0:	e7834d5b 	.inst	0xe7834d5b ; undefined
     da4:	03747303 	.inst	0x03747303 ; undefined
     da8:	3d443c0f 	ldr	b15, [x0, #271]
     dac:	3d933d3f 	str	q31, [x9, #19696]
     db0:	4d753d93 	.inst	0x4d753d93 ; undefined
     db4:	13312113 	.inst	0x13312113 ; undefined
     db8:	3d593121 	ldr	b1, [x9, #1612]
     dbc:	22757521 	.inst	0x22757521 ; undefined
     dc0:	3d5a2f3f 	ldr	b31, [x25, #1675]
     dc4:	820a034b 	.inst	0x820a034b ; undefined
     dc8:	3d207803 	str	b3, [x0, #2078]
     dcc:	3d1c884b 	str	b11, [x2, #1826]
     dd0:	2f3f844b 	sqshrun	v11.2s, v2.2d, #1
     dd4:	034b3d5a 	.inst	0x034b3d5a ; undefined
     dd8:	7803900a 	sturh	w10, [x0, #57]
     ddc:	964b3d20 	bl	fffffffff92d025c <_estack+0xfffffffff12c025c>
     de0:	924b3d1c 	and	x28, x8, #0xffe000000000001f
     de4:	01000302 	.inst	0x01000302 ; undefined
     de8:	0000be01 	.inst	0x0000be01 ; undefined
     dec:	67000200 	.inst	0x67000200 ; undefined
     df0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
     df4:	0d0efb01 	.inst	0x0d0efb01 ; undefined
     df8:	01010100 	.inst	0x01010100 ; undefined
     dfc:	00000001 	.inst	0x00000001 ; undefined
     e00:	01000001 	.inst	0x01000001 ; undefined
     e04:	6d6f682f 	ldp	d15, d26, [x1, #-272]
     e08:	69632f65 	ldpsw	x5, x11, [x27, #-232]
     e0c:	542f6469 	b.ls	5fa98 <_freertos_vector_table+0x48c70>  // b.plast
     e10:	c36ca9c3 	.inst	0xc36ca9c3 ; undefined
     e14:	616863a9 	.inst	0x616863a9 ; undefined
     e18:	6d656772 	ldp	d18, d25, [x27, #-432]
     e1c:	73746e65 	.inst	0x73746e65 ; undefined
     e20:	7361522f 	.inst	0x7361522f ; undefined
     e24:	72656270 	.inst	0x72656270 ; undefined
     e28:	69507972 	ldpsw	x18, x30, [x11, #128]
     e2c:	72462d33 	.inst	0x72462d33 ; undefined
     e30:	54526565 	b.pl	a5adc <_freertos_vector_table+0x8ecb4>  // b.nfrst
     e34:	442f534f 	.inst	0x442f534f ; undefined
     e38:	2f6f6d65 	.inst	0x2f6f6d65 ; undefined
     e3c:	76697244 	.inst	0x76697244 ; undefined
     e40:	00737265 	.inst	0x00737265 ; undefined
     e44:	69706700 	ldpsw	x0, x25, [x24, #-128]
     e48:	00632e6f 	.inst	0x00632e6f ; undefined
     e4c:	67000001 	.inst	0x67000001 ; undefined
     e50:	2e6f6970 	.inst	0x2e6f6970 ; undefined
     e54:	00010068 	.inst	0x00010068 ; undefined
     e58:	09000000 	.inst	0x09000000 ; undefined
     e5c:	01455c02 	.inst	0x01455c02 ; undefined
     e60:	00000000 	.inst	0x00000000 ; undefined
     e64:	01260300 	.inst	0x01260300 ; undefined
     e68:	bb4c763e 	.inst	0xbb4c763e ; undefined
     e6c:	3e4badad 	.inst	0x3e4badad ; undefined
     e70:	3d3e3d4b 	str	b11, [x10, #3983]
     e74:	da3d684b 	.inst	0xda3d684b ; undefined
     e78:	2f3ea01e 	.inst	0x2f3ea01e ; undefined
     e7c:	593d31bb 	.inst	0x593d31bb ; undefined
     e80:	22d7924c 	.inst	0x22d7924c ; undefined
     e84:	22d7229f 	.inst	0x22d7229f ; undefined
     e88:	22d7229f 	.inst	0x22d7229f ; undefined
     e8c:	3f22229f 	.inst	0x3f22229f ; undefined
     e90:	924c753d 	and	x29, x9, #0xfff000000003ffff
     e94:	229f22d7 	.inst	0x229f22d7 ; undefined
     e98:	229f22d7 	.inst	0x229f22d7 ; undefined
     e9c:	229f22d7 	.inst	0x229f22d7 ; undefined
     ea0:	672f3f22 	.inst	0x672f3f22 ; undefined
     ea4:	0302594c 	.inst	0x0302594c ; undefined
     ea8:	c0010100 	.inst	0xc0010100 ; undefined
     eac:	02000000 	.inst	0x02000000 ; undefined
     eb0:	00006700 	.inst	0x00006700 ; undefined
     eb4:	fb010400 	.inst	0xfb010400 ; undefined
     eb8:	01000d0e 	.inst	0x01000d0e ; undefined
     ebc:	00010101 	.inst	0x00010101 ; undefined
     ec0:	00010000 	.inst	0x00010000 ; undefined
     ec4:	682f0100 	.inst	0x682f0100 ; undefined
     ec8:	2f656d6f 	.inst	0x2f656d6f ; undefined
     ecc:	64696963 	.inst	0x64696963 ; undefined
     ed0:	a9c3542f 	ldp	x15, x21, [x1, #48]!
     ed4:	63a9c36c 	.inst	0x63a9c36c ; undefined
     ed8:	67726168 	.inst	0x67726168 ; undefined
     edc:	6e656d65 	umin	v5.8h, v11.8h, v5.8h
     ee0:	522f7374 	eor	w20, w27, #0xfffe3fff
     ee4:	62707361 	.inst	0x62707361 ; undefined
     ee8:	79727265 	ldrh	w5, [x19, #6456]
     eec:	2d336950 	stp	s16, s26, [x10, #-104]
     ef0:	65657246 	fnmls	z6.h, p4/m, z18.h, z5.h
     ef4:	534f5452 	.inst	0x534f5452 ; undefined
     ef8:	6d65442f 	ldp	d15, d17, [x1, #-432]
     efc:	72442f6f 	.inst	0x72442f6f ; undefined
     f00:	72657669 	.inst	0x72657669 ; undefined
     f04:	75000073 	.inst	0x75000073 ; undefined
     f08:	2e747261 	uabdl	v1.4s, v19.4h, v20.4h
     f0c:	00010063 	.inst	0x00010063 ; undefined
     f10:	67657200 	.inst	0x67657200 ; undefined
     f14:	00682e73 	.inst	0x00682e73 ; undefined
     f18:	00000001 	.inst	0x00000001 ; undefined
     f1c:	e0020900 	.inst	0xe0020900 ; undefined
     f20:	0000014a 	.inst	0x0000014a ; undefined
     f24:	15000000 	b	4000f24 <_freertos_vector_table+0x3fea0fc>
     f28:	2f3f4b3d 	.inst	0x2f3f4b3d ; undefined
     f2c:	2130312f 	.inst	0x2130312f ; undefined
     f30:	4b854031 	sub	w17, w1, w5, asr #16
     f34:	4b4b313f 	sub	wzr, w9, w11, lsr #12
     f38:	4b4b4b4b 	sub	w11, w26, w11, lsr #18
     f3c:	3d4b4b4b 	ldr	b11, [x26, #722]
     f40:	4b3d3d3d 	.inst	0x4b3d3d3d ; undefined
     f44:	0402004b 	.inst	0x0402004b ; undefined
     f48:	002e0603 	.inst	0x002e0603 ; NYI
     f4c:	58010402 	ldr	x2, 2fcc <__module_entries_end-0x5034>
     f50:	004b3d06 	.inst	0x004b3d06 ; undefined
     f54:	06030402 	.inst	0x06030402 ; undefined
     f58:	0402002e 	.inst	0x0402002e ; undefined
     f5c:	3d065801 	str	b1, [x0, #406]
     f60:	3d3f4b4b 	str	b11, [x26, #4050]
     f64:	4f393d22 	.inst	0x4f393d22 ; undefined
     f68:	03022f2f 	.inst	0x03022f2f ; undefined
     f6c:	25010100 	cmpge	p0.b, p0/z, z8.b, #1
     f70:	02000001 	.inst	0x02000001 ; undefined
     f74:	0000a500 	.inst	0x0000a500 ; undefined
     f78:	fb010400 	.inst	0xfb010400 ; undefined
     f7c:	01000d0e 	.inst	0x01000d0e ; undefined
     f80:	00010101 	.inst	0x00010101 ; undefined
     f84:	00010000 	.inst	0x00010000 ; undefined
     f88:	682f0100 	.inst	0x682f0100 ; undefined
     f8c:	2f656d6f 	.inst	0x2f656d6f ; undefined
     f90:	64696963 	.inst	0x64696963 ; undefined
     f94:	a9c3542f 	ldp	x15, x21, [x1, #48]!
     f98:	63a9c36c 	.inst	0x63a9c36c ; undefined
     f9c:	67726168 	.inst	0x67726168 ; undefined
     fa0:	6e656d65 	umin	v5.8h, v11.8h, v5.8h
     fa4:	522f7374 	eor	w20, w27, #0xfffe3fff
     fa8:	62707361 	.inst	0x62707361 ; undefined
     fac:	79727265 	ldrh	w5, [x19, #6456]
     fb0:	2d336950 	stp	s16, s26, [x10, #-104]
     fb4:	65657246 	fnmls	z6.h, p4/m, z18.h, z5.h
     fb8:	534f5452 	.inst	0x534f5452 ; undefined
     fbc:	756f532f 	.inst	0x756f532f ; undefined
     fc0:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
     fc4:	74726f70 	.inst	0x74726f70 ; undefined
     fc8:	656c6261 	fnmls	z1.h, p0/m, z19.h, z12.h
     fcc:	6d654d2f 	ldp	d15, d19, [x9, #-432]
     fd0:	676e614d 	.inst	0x676e614d ; undefined
     fd4:	73752f00 	.inst	0x73752f00 ; undefined
     fd8:	696c2f72 	ldpsw	x18, x11, [x27, #-160]
     fdc:	63672f62 	.inst	0x63672f62 ; undefined
     fe0:	72632d63 	.inst	0x72632d63 ; undefined
     fe4:	2f73736f 	.inst	0x2f73736f ; undefined
     fe8:	63726161 	.inst	0x63726161 ; undefined
     fec:	2d343668 	stp	s8, s13, [x19, #-96]
     ff0:	756e696c 	.inst	0x756e696c ; undefined
     ff4:	6e672d78 	uqsub	v24.8h, v11.8h, v7.8h
     ff8:	2f362f75 	.inst	0x2f362f75 ; undefined
     ffc:	6c636e69 	ldnp	d9, d27, [x19, #-464]
    1000:	00656475 	.inst	0x00656475 ; undefined
    1004:	61656800 	.inst	0x61656800 ; undefined
    1008:	2e345f70 	uqrshl	v16.8b, v27.8b, v20.8b
    100c:	00010063 	.inst	0x00010063 ; undefined
    1010:	64747300 	.inst	0x64747300 ; undefined
    1014:	2e666564 	umax	v4.4h, v11.4h, v6.4h
    1018:	00020068 	.inst	0x00020068 ; undefined
    101c:	09000000 	.inst	0x09000000 ; undefined
    1020:	014d4402 	.inst	0x014d4402 ; undefined
    1024:	00000000 	.inst	0x00000000 ; undefined
    1028:	01920300 	.inst	0x01920300 ; undefined
    102c:	24223e01 	cmplo	p1.b, p7/z, z16.b, #8
    1030:	5c3e255a 	ldr	d26, 7d4d8 <_freertos_vector_table+0x666b0>
    1034:	02004e4d 	.inst	0x02004e4d ; undefined
    1038:	3c060104 	stur	b4, [x8, #96]
    103c:	4b3d4e06 	sub	w6, w16, w29, uxtw #3
    1040:	00392f22 	.inst	0x00392f22 ; NYI
    1044:	06010402 	.inst	0x06010402 ; undefined
    1048:	6a520658 	ands	w24, w18, w18, lsr #1
    104c:	4e954d6a 	.inst	0x4e954d6a ; undefined
    1050:	94313f67 	bl	c50dec <_freertos_vector_table+0xc39fc4>
    1054:	84200c03 	prfb	pldl2strm, p3, [x0, z0.s, uxtw]
    1058:	313d3221 	adds	w1, w17, #0xf4c
    105c:	23306940 	.inst	0x23306940 ; undefined
    1060:	40223091 	.inst	0x40223091 ; undefined
    1064:	14243d13 	b	9104b0 <_freertos_vector_table+0x8f9688>
    1068:	20090332 	.inst	0x20090332 ; undefined
    106c:	67594059 	.inst	0x67594059 ; undefined
    1070:	3d4e4b4c 	ldr	b12, [x26, #914]
    1074:	40915b67 	.inst	0x40915b67 ; undefined
    1078:	04020034 	.inst	0x04020034 ; undefined
    107c:	004a0603 	.inst	0x004a0603 ; undefined
    1080:	3c010402 	str	b2, [x0], #16
    1084:	762f5f06 	.inst	0x762f5f06 ; undefined
    1088:	842f3375 	.inst	0x842f3375 ; undefined
    108c:	6b6a8377 	.inst	0x6b6a8377 ; undefined
    1090:	023e4c51 	.inst	0x023e4c51 ; undefined
    1094:	01010003 	.inst	0x01010003 ; undefined
    1098:	0000011d 	.inst	0x0000011d ; undefined
    109c:	00ee0002 	.inst	0x00ee0002 ; undefined
    10a0:	01040000 	.inst	0x01040000 ; undefined
    10a4:	000d0efb 	.inst	0x000d0efb ; undefined
    10a8:	01010101 	.inst	0x01010101 ; undefined
    10ac:	01000000 	.inst	0x01000000 ; undefined
    10b0:	2f010000 	.inst	0x2f010000 ; undefined
    10b4:	656d6f68 	fnmls	z8.h, p3/m, z27.h, z13.h
    10b8:	6969632f 	ldpsw	x15, x24, [x25, #-184]
    10bc:	c3542f64 	.inst	0xc3542f64 ; undefined
    10c0:	a9c36ca9 	ldp	x9, x27, [x5, #48]!
    10c4:	72616863 	.inst	0x72616863 ; undefined
    10c8:	656d6567 	fnmls	z7.h, p1/m, z11.h, z13.h
    10cc:	2f73746e 	.inst	0x2f73746e ; undefined
    10d0:	70736152 	adr	x18, e7cfb <_freertos_vector_table+0xd0ed3>
    10d4:	72726562 	.inst	0x72726562 ; undefined
    10d8:	33695079 	.inst	0x33695079 ; undefined
    10dc:	6572462d 	fnmla	z13.h, p1/m, z17.h, z18.h
    10e0:	4f545265 	.inst	0x4f545265 ; undefined
    10e4:	65442f53 	fmaxnmv	h19, p3, z26.h
    10e8:	2f006f6d 	.inst	0x2f006f6d ; undefined
    10ec:	2f727375 	.inst	0x2f727375 ; undefined
    10f0:	63726161 	.inst	0x63726161 ; undefined
    10f4:	2d343668 	stp	s8, s13, [x19, #-96]
    10f8:	756e696c 	.inst	0x756e696c ; undefined
    10fc:	6e672d78 	uqsub	v24.8h, v11.8h, v7.8h
    1100:	6e692f75 	uqsub	v21.8h, v27.8h, v9.8h
    1104:	64756c63 	.inst	0x64756c63 ; undefined
    1108:	682f0065 	.inst	0x682f0065 ; undefined
    110c:	2f656d6f 	.inst	0x2f656d6f ; undefined
    1110:	64696963 	.inst	0x64696963 ; undefined
    1114:	a9c3542f 	ldp	x15, x21, [x1, #48]!
    1118:	63a9c36c 	.inst	0x63a9c36c ; undefined
    111c:	67726168 	.inst	0x67726168 ; undefined
    1120:	6e656d65 	umin	v5.8h, v11.8h, v5.8h
    1124:	522f7374 	eor	w20, w27, #0xfffe3fff
    1128:	62707361 	.inst	0x62707361 ; undefined
    112c:	79727265 	ldrh	w5, [x19, #6456]
    1130:	2d336950 	stp	s16, s26, [x10, #-104]
    1134:	65657246 	fnmls	z6.h, p4/m, z18.h, z5.h
    1138:	534f5452 	.inst	0x534f5452 ; undefined
    113c:	756f532f 	.inst	0x756f532f ; undefined
    1140:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
    1144:	74726f70 	.inst	0x74726f70 ; undefined
    1148:	656c6261 	fnmls	z1.h, p0/m, z19.h, z12.h
    114c:	4343472f 	.inst	0x4343472f ; undefined
    1150:	4d52412f 	.inst	0x4d52412f ; undefined
    1154:	3541435f 	cbnz	wzr, 839bc <_freertos_vector_table+0x6cb94>
    1158:	34365f33 	cbz	w19, 6dd3c <_freertos_vector_table+0x56f14>
    115c:	5449425f 	.inst	0x5449425f ; undefined
    1160:	72460000 	.inst	0x72460000 ; undefined
    1164:	54526565 	b.pl	a5e10 <_freertos_vector_table+0x8efe8>  // b.nfrst
    1168:	495f534f 	.inst	0x495f534f ; undefined
    116c:	632e5152 	.inst	0x632e5152 ; undefined
    1170:	00000100 	.inst	0x00000100 ; undefined
    1174:	69647473 	ldpsw	x19, x29, [x3, #-224]
    1178:	682e746e 	.inst	0x682e746e ; undefined
    117c:	00000200 	.inst	0x00000200 ; undefined
    1180:	74726f70 	.inst	0x74726f70 ; undefined
    1184:	7263616d 	.inst	0x7263616d ; undefined
    1188:	00682e6f 	.inst	0x00682e6f ; undefined
    118c:	00000003 	.inst	0x00000003 ; undefined
    1190:	e4020900 	.inst	0xe4020900 ; undefined
    1194:	00000151 	.inst	0x00000151 ; undefined
    1198:	03000000 	.inst	0x03000000 ; undefined
    119c:	03340119 	.inst	0x03340119 ; undefined
    11a0:	4b222e0a 	sub	w10, w16, w2, uxth #3
    11a4:	3d4b4b4b 	ldr	b11, [x26, #722]
    11a8:	2130685a 	.inst	0x2130685a ; undefined
    11ac:	44213e3d 	.inst	0x44213e3d ; undefined
    11b0:	3d23234b 	str	b11, [x26, #2248]
    11b4:	01000302 	.inst	0x01000302 ; undefined
    11b8:	00009c01 	.inst	0x00009c01 ; undefined
    11bc:	55000200 	.inst	0x55000200 ; undefined
    11c0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    11c4:	0d0efb01 	.inst	0x0d0efb01 ; undefined
    11c8:	01010100 	.inst	0x01010100 ; undefined
    11cc:	00000001 	.inst	0x00000001 ; undefined
    11d0:	01000001 	.inst	0x01000001 ; undefined
    11d4:	6d6f682f 	ldp	d15, d26, [x1, #-272]
    11d8:	69632f65 	ldpsw	x5, x11, [x27, #-232]
    11dc:	542f6469 	b.ls	5fe68 <_freertos_vector_table+0x49040>  // b.plast
    11e0:	c36ca9c3 	.inst	0xc36ca9c3 ; undefined
    11e4:	616863a9 	.inst	0x616863a9 ; undefined
    11e8:	6d656772 	ldp	d18, d25, [x27, #-432]
    11ec:	73746e65 	.inst	0x73746e65 ; undefined
    11f0:	7361522f 	.inst	0x7361522f ; undefined
    11f4:	72656270 	.inst	0x72656270 ; undefined
    11f8:	69507972 	ldpsw	x18, x30, [x11, #128]
    11fc:	72462d33 	.inst	0x72462d33 ; undefined
    1200:	54526565 	b.pl	a5eac <_freertos_vector_table+0x8f084>  // b.nfrst
    1204:	442f534f 	.inst	0x442f534f ; undefined
    1208:	006f6d65 	.inst	0x006f6d65 ; undefined
    120c:	69616d00 	ldpsw	x0, x27, [x8, #-248]
    1210:	00632e6e 	.inst	0x00632e6e ; undefined
    1214:	00000001 	.inst	0x00000001 ; undefined
    1218:	d4020900 	.inst	0xd4020900 ; undefined
    121c:	00000152 	.inst	0x00000152 ; undefined
    1220:	19000000 	.inst	0x19000000 ; undefined
    1224:	01040200 	.inst	0x01040200 ; undefined
    1228:	0402003f 	.inst	0x0402003f ; undefined
    122c:	02003d01 	.inst	0x02003d01 ; undefined
    1230:	252d0104 	.inst	0x252d0104 ; undefined
    1234:	01040200 	.inst	0x01040200 ; undefined
    1238:	0402003f 	.inst	0x0402003f ; undefined
    123c:	02002f01 	.inst	0x02002f01 ; undefined
    1240:	003d0104 	.inst	0x003d0104 ; NYI
    1244:	2c010402 	stnp	s2, s1, [x0, #8]
    1248:	2f200d03 	.inst	0x2f200d03 ; undefined
    124c:	00929122 	.inst	0x00929122 ; undefined
    1250:	26010402 	.inst	0x26010402 ; undefined
    1254:	01000102 	.inst	0x01000102 ; undefined
    1258:	Adresse 0x0000000000001258 hors intervalle.


Déassemblage de la section .debug_str :

0000000000000000 <.debug_str>:
       0:	657a6973 	fnmls	z19.h, p2/m, z11.h, z26.h
       4:	7600745f 	.inst	0x7600745f ; undefined
       8:	74726f50 	.inst	0x74726f50 ; undefined
       c:	65746e45 	fnmls	z5.h, p3/m, z18.h, z20.h
      10:	69724372 	ldpsw	x18, x16, [x27, #-112]
      14:	61636974 	.inst	0x61636974 ; undefined
      18:	7870006c 	ldaddlh	w16, w12, [x3]
      1c:	65646f43 	fnmls	z3.h, p3/m, z26.h, z4.h
      20:	6f507600 	uqshl	v0.2d, v16.2d, #16
      24:	6e457472 	.inst	0x6e457472 ; undefined
      28:	68635364 	.inst	0x68635364 ; undefined
      2c:	6c756465 	ldnp	d5, d25, [x3, #-176]
      30:	75007265 	.inst	0x75007265 ; undefined
      34:	43496c6c 	.inst	0x43496c6c ; undefined
      38:	52414943 	.inst	0x52414943 ; undefined
      3c:	6e697500 	uabd	v0.8h, v8.8h, v9.8h
      40:	5f343674 	.inst	0x5f343674 ; undefined
      44:	78750074 	ldaddlh	w21, w20, [x3]
      48:	4d77654e 	.inst	0x4d77654e ; undefined
      4c:	566b7361 	.inst	0x566b7361 ; undefined
      50:	65756c61 	fnmls	z1.h, p3/m, z3.h, z21.h
      54:	73615400 	.inst	0x73615400 ; undefined
      58:	6e75466b 	ushl	v11.8h, v19.8h, v21.8h
      5c:	6f697463 	uqshl	v3.2d, v3.2d, #41
      60:	00745f6e 	.inst	0x00745f6e ; undefined
      64:	726f5076 	.inst	0x726f5076 ; undefined
      68:	73615474 	.inst	0x73615474 ; undefined
      6c:	6573556b 	fnmla	z11.h, p5/m, z11.h, z19.h
      70:	55504673 	.inst	0x55504673 ; undefined
      74:	6c6c7500 	ldnp	d0, d29, [x8, #-320]
      78:	74726f50 	.inst	0x74726f50 ; undefined
      7c:	6c656959 	ldnp	d25, d26, [x10, #-432]
      80:	71655264 	subs	w4, w19, #0x954, lsl #12
      84:	65726975 	fnmls	z21.h, p2/m, z11.h, z18.h
      88:	4e470064 	.inst	0x4e470064 ; undefined
      8c:	31432055 	adds	w21, w2, #0xc8, lsl #12
      90:	2e362031 	usubl	v17.8h, v1.8b, v22.8b
      94:	20302e33 	.inst	0x20302e33 ; undefined
      98:	37313032 	tbnz	w18, #6, 269c <__module_entries_end-0x5964>
      9c:	31323330 	adds	w16, w25, #0xc8c
      a0:	616d2d20 	.inst	0x616d2d20 ; undefined
      a4:	3d686372 	ldr	b18, [x27, #2584]
      a8:	766d7261 	.inst	0x766d7261 ; undefined
      ac:	20612d38 	.inst	0x20612d38 ; undefined
      b0:	72616d2d 	.inst	0x72616d2d ; undefined
      b4:	613d6863 	.inst	0x613d6863 ; undefined
      b8:	38766d72 	.inst	0x38766d72 ; undefined
      bc:	2d20612d 	stp	s13, s24, [x9, #-256]
      c0:	6372616d 	.inst	0x6372616d ; undefined
      c4:	72613d68 	.inst	0x72613d68 ; undefined
      c8:	2d38766d 	stp	s13, s29, [x19, #-64]
      cc:	6d2d2061 	stp	d1, d8, [x3, #-304]
      d0:	7474696c 	.inst	0x7474696c ; undefined
      d4:	652d656c 	.inst	0x652d656c ; undefined
      d8:	6169646e 	.inst	0x6169646e ; undefined
      dc:	6d2d206e 	stp	d14, d8, [x3, #-304]
      e0:	3d696261 	ldr	b1, [x19, #2648]
      e4:	3436706c 	cbz	w12, 6cef0 <_freertos_vector_table+0x560c8>
      e8:	20672d20 	.inst	0x20672d20 ; undefined
      ec:	2d20672d 	stp	s13, s25, [x25, #-256]
      f0:	6e750067 	uaddl2	v7.4s, v3.8h, v21.8h
      f4:	6e676973 	.inst	0x6e676973 ; undefined
      f8:	63206465 	.inst	0x63206465 ; undefined
      fc:	00726168 	.inst	0x00726168 ; undefined
     100:	436c6c75 	.inst	0x436c6c75 ; undefined
     104:	69746972 	ldpsw	x18, x26, [x11, #-96]
     108:	4e6c6163 	subhn2	v3.8h, v11.4s, v12.4s
     10c:	69747365 	ldpsw	x5, x28, [x27, #-96]
     110:	7500676e 	.inst	0x7500676e ; undefined
     114:	5350416c 	.inst	0x5350416c ; undefined
     118:	68730052 	.inst	0x68730052 ; undefined
     11c:	2074726f 	.inst	0x2074726f ; undefined
     120:	69736e75 	ldpsw	x21, x27, [x19, #-104]
     124:	64656e67 	.inst	0x64656e67 ; undefined
     128:	746e6920 	.inst	0x746e6920 ; undefined
     12c:	6c6c7500 	ldnp	d0, d29, [x8, #-320]
     130:	74726f50 	.inst	0x74726f50 ; undefined
     134:	65746e49 	fnmls	z9.h, p3/m, z18.h, z20.h
     138:	70757272 	adr	x18, eaf87 <_freertos_vector_table+0xd415f>
     13c:	73654e74 	.inst	0x73654e74 ; undefined
     140:	676e6974 	.inst	0x676e6974 ; undefined
     144:	65724600 	fnmla	z0.h, p1/m, z16.h, z18.h
     148:	4f545265 	.inst	0x4f545265 ; undefined
     14c:	69545f53 	ldpsw	x19, x23, [x26, #160]
     150:	485f6b63 	ldxrh	w3, [x27]
     154:	6c646e61 	ldnp	d1, d27, [x19, #-448]
     158:	73007265 	.inst	0x73007265 ; undefined
     15c:	74726f68 	.inst	0x74726f68 ; undefined
     160:	746e6920 	.inst	0x746e6920 ; undefined
     164:	50787000 	adr	x0, f0f66 <_freertos_vector_table+0xda13e>
     168:	4974726f 	.inst	0x4974726f ; undefined
     16c:	6974696e 	ldpsw	x14, x26, [x11, #-96]
     170:	73696c61 	.inst	0x73696c61 ; undefined
     174:	61745365 	.inst	0x61745365 ; undefined
     178:	53006b63 	ubfx	w3, w27, #0, #27
     17c:	6b636174 	.inst	0x6b636174 ; undefined
     180:	65707954 	fnmls	z20.h, p6/m, z10.h, z16.h
     184:	7500745f 	.inst	0x7500745f ; undefined
     188:	614d6c6c 	.inst	0x614d6c6c ; undefined
     18c:	49504178 	.inst	0x49504178 ; undefined
     190:	6f697250 	fcmla	v16.8h, v18.8h, v9.h[1], #270
     194:	79746972 	ldrh	w18, [x11, #6708]
     198:	6b73614d 	.inst	0x6b73614d ; undefined
     19c:	6e6f6c00 	umin	v0.8h, v0.8h, v15.8h
     1a0:	6f6c2067 	umlal2	v7.4s, v3.8h, v12.h[2]
     1a4:	7520676e 	.inst	0x7520676e ; undefined
     1a8:	6769736e 	.inst	0x6769736e ; undefined
     1ac:	2064656e 	.inst	0x2064656e ; undefined
     1b0:	00746e69 	.inst	0x00746e69 ; undefined
     1b4:	746e6975 	.inst	0x746e6975 ; undefined
     1b8:	00745f38 	.inst	0x00745f38 ; undefined
     1bc:	6d6f682f 	ldp	d15, d26, [x1, #-272]
     1c0:	69632f65 	ldpsw	x5, x11, [x27, #-232]
     1c4:	542f6469 	b.ls	5ee50 <_freertos_vector_table+0x48028>  // b.plast
     1c8:	c36ca9c3 	.inst	0xc36ca9c3 ; undefined
     1cc:	616863a9 	.inst	0x616863a9 ; undefined
     1d0:	6d656772 	ldp	d18, d25, [x27, #-432]
     1d4:	73746e65 	.inst	0x73746e65 ; undefined
     1d8:	7361522f 	.inst	0x7361522f ; undefined
     1dc:	72656270 	.inst	0x72656270 ; undefined
     1e0:	69507972 	ldpsw	x18, x30, [x11, #128]
     1e4:	72462d33 	.inst	0x72462d33 ; undefined
     1e8:	54526565 	b.pl	a4e94 <_freertos_vector_table+0x8e06c>  // b.nfrst
     1ec:	532f534f 	.inst	0x532f534f ; undefined
     1f0:	6372756f 	.inst	0x6372756f ; undefined
     1f4:	6f702f65 	.inst	0x6f702f65 ; undefined
     1f8:	62617472 	.inst	0x62617472 ; undefined
     1fc:	472f656c 	.inst	0x472f656c ; undefined
     200:	412f4343 	.inst	0x412f4343 ; undefined
     204:	435f4d52 	.inst	0x435f4d52 ; undefined
     208:	5f333541 	.inst	0x5f333541 ; undefined
     20c:	425f3436 	.inst	0x425f3436 ; undefined
     210:	702f5449 	adr	x9, 5ec9b <_freertos_vector_table+0x47e73>
     214:	2e74726f 	uabdl	v15.4s, v19.4h, v20.4h
     218:	50760063 	adr	x3, ec226 <_freertos_vector_table+0xd53fe>
     21c:	4374726f 	.inst	0x4374726f ; undefined
     220:	7261656c 	.inst	0x7261656c ; undefined
     224:	65746e49 	fnmls	z9.h, p3/m, z18.h, z20.h
     228:	70757272 	adr	x18, eb077 <_freertos_vector_table+0xd424f>
     22c:	73614d74 	.inst	0x73614d74 ; undefined
     230:	6973006b 	ldpsw	x11, x0, [x3, #-104]
     234:	7974657a 	ldrh	w26, [x11, #6706]
     238:	75006570 	.inst	0x75006570 ; undefined
     23c:	7465526c 	.inst	0x7465526c ; undefined
     240:	006e7275 	.inst	0x006e7275 ; undefined
     244:	676e6f6c 	.inst	0x676e6f6c ; undefined
     248:	6e6f6c20 	umin	v0.8h, v1.8h, v15.8h
     24c:	6e692067 	usubl2	v7.4s, v3.8h, v9.8h
     250:	76700074 	.inst	0x76700074 ; undefined
     254:	61726150 	.inst	0x61726150 ; undefined
     258:	6574656d 	fnmls	z13.h, p1/m, z11.h, z20.h
     25c:	76007372 	.inst	0x76007372 ; undefined
     260:	75746553 	.inst	0x75746553 ; undefined
     264:	63695470 	.inst	0x63695470 ; undefined
     268:	746e496b 	.inst	0x746e496b ; undefined
     26c:	75727265 	.inst	0x75727265 ; undefined
     270:	70007470 	adr	x16, 10ff <__module_entries_end-0x6f01>
     274:	706f5478 	adr	x24, ded03 <_freertos_vector_table+0xc7edb>
     278:	7453664f 	.inst	0x7453664f ; undefined
     27c:	006b6361 	.inst	0x006b6361 ; undefined
     280:	506c6c75 	adr	x21, d900e <_freertos_vector_table+0xc21e6>
     284:	5474726f 	b.nv	e90d0 <_freertos_vector_table+0xd22a8>
     288:	486b7361 	.inst	0x486b7361 ; undefined
     28c:	50467361 	adr	x1, 8d0fa <_freertos_vector_table+0x762d2>
     290:	6e6f4355 	raddhn2	v21.8h, v26.4s, v15.4s
     294:	74786574 	.inst	0x74786574 ; undefined
     298:	6f507600 	uqshl	v0.2d, v16.2d, #16
     29c:	78457472 	ldrh	w18, [x3], #87
     2a0:	72437469 	.inst	0x72437469 ; undefined
     2a4:	63697469 	.inst	0x63697469 ; undefined
     2a8:	75006c61 	.inst	0x75006c61 ; undefined
     2ac:	43496c6c 	.inst	0x43496c6c ; undefined
     2b0:	524d5043 	.inst	0x524d5043 ; undefined
     2b4:	6e697500 	uabd	v0.8h, v8.8h, v9.8h
     2b8:	5f323374 	.inst	0x5f323374 ; undefined
     2bc:	6f6c0074 	mla	v20.8h, v3.8h, v12.h[2]
     2c0:	6420676e 	.inst	0x6420676e ; undefined
     2c4:	6c62756f 	ldnp	d15, d29, [x11, #-480]
     2c8:	50780065 	adr	x5, f02d6 <_freertos_vector_table+0xd94ae>
     2cc:	5374726f 	.inst	0x5374726f ; undefined
     2d0:	74726174 	.inst	0x74726174 ; undefined
     2d4:	65686353 	fnmls	z19.h, p0/m, z26.h, z8.h
     2d8:	656c7564 	fnmls	z4.h, p5/m, z11.h, z12.h
     2dc:	6c750072 	ldnp	d18, d0, [x3, #-176]
     2e0:	4343496c 	.inst	0x4343496c ; undefined
     2e4:	52494f45 	.inst	0x52494f45 ; undefined
     2e8:	61425500 	.inst	0x61425500 ; undefined
     2ec:	79546573 	ldrh	w19, [x11, #2610]
     2f0:	745f6570 	.inst	0x745f6570 ; undefined
     2f4:	50787500 	adr	x0, f1196 <_freertos_vector_table+0xda36e>
     2f8:	5374726f 	.inst	0x5374726f ; undefined
     2fc:	6e497465 	.inst	0x6e497465 ; undefined
     300:	72726574 	.inst	0x72726574 ; undefined
     304:	4d747075 	.inst	0x4d747075 ; undefined
     308:	006b7361 	.inst	0x006b7361 ; undefined
     30c:	6d6f682f 	ldp	d15, d26, [x1, #-272]
     310:	69632f65 	ldpsw	x5, x11, [x27, #-232]
     314:	542f6469 	b.ls	5efa0 <_freertos_vector_table+0x48178>  // b.plast
     318:	c36ca9c3 	.inst	0xc36ca9c3 ; undefined
     31c:	616863a9 	.inst	0x616863a9 ; undefined
     320:	6d656772 	ldp	d18, d25, [x27, #-432]
     324:	73746e65 	.inst	0x73746e65 ; undefined
     328:	7361522f 	.inst	0x7361522f ; undefined
     32c:	72656270 	.inst	0x72656270 ; undefined
     330:	69507972 	ldpsw	x18, x30, [x11, #128]
     334:	72462d33 	.inst	0x72462d33 ; undefined
     338:	54526565 	b.pl	a4fe4 <_freertos_vector_table+0x8e1bc>  // b.nfrst
     33c:	532f534f 	.inst	0x532f534f ; undefined
     340:	6372756f 	.inst	0x6372756f ; undefined
     344:	72632f65 	.inst	0x72632f65 ; undefined
     348:	6974756f 	ldpsw	x15, x29, [x11, #-96]
     34c:	632e656e 	.inst	0x632e656e ; undefined
     350:	43767000 	.inst	0x43767000 ; undefined
     354:	61746e6f 	.inst	0x61746e6f ; undefined
     358:	72656e69 	.inst	0x72656e69 ; undefined
     35c:	63695400 	.inst	0x63695400 ; undefined
     360:	7079546b 	adr	x11, f2def <_freertos_vector_table+0xdbfc7>
     364:	00745f65 	.inst	0x00745f65 ; undefined
     368:	696e694d 	ldpsw	x13, x26, [x10, #-144]
     36c:	7473694c 	.inst	0x7473694c ; undefined
     370:	6d657449 	ldp	d9, d29, [x2, #-432]
     374:	7800745f 	strh	wzr, [x2], #7
     378:	6d657449 	ldp	d9, d29, [x2, #-432]
     37c:	756c6156 	.inst	0x756c6156 ; undefined
     380:	4c780065 	.inst	0x4c780065 ; undefined
     384:	45747369 	.inst	0x45747369 ; undefined
     388:	7000646e 	adr	x14, 1017 <__module_entries_end-0x6fe9>
     38c:	6e774f76 	uqshl	v22.8h, v27.8h, v23.8h
     390:	70007265 	adr	x5, 11df <__module_entries_end-0x6e21>
     394:	65744978 	fnmla	z24.h, p2/m, z11.h, z20.h
     398:	526f546d 	.inst	0x526f546d ; undefined
     39c:	766f6d65 	.inst	0x766f6d65 ; undefined
     3a0:	682f0065 	.inst	0x682f0065 ; undefined
     3a4:	2f656d6f 	.inst	0x2f656d6f ; undefined
     3a8:	64696963 	.inst	0x64696963 ; undefined
     3ac:	a9c3542f 	ldp	x15, x21, [x1, #48]!
     3b0:	63a9c36c 	.inst	0x63a9c36c ; undefined
     3b4:	67726168 	.inst	0x67726168 ; undefined
     3b8:	6e656d65 	umin	v5.8h, v11.8h, v5.8h
     3bc:	522f7374 	eor	w20, w27, #0xfffe3fff
     3c0:	62707361 	.inst	0x62707361 ; undefined
     3c4:	79727265 	ldrh	w5, [x19, #6456]
     3c8:	2d336950 	stp	s16, s26, [x10, #-104]
     3cc:	65657246 	fnmls	z6.h, p4/m, z18.h, z5.h
     3d0:	534f5452 	.inst	0x534f5452 ; undefined
     3d4:	756f532f 	.inst	0x756f532f ; undefined
     3d8:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
     3dc:	7473696c 	.inst	0x7473696c ; undefined
     3e0:	7600632e 	.inst	0x7600632e ; undefined
     3e4:	7473694c 	.inst	0x7473694c ; undefined
     3e8:	74696e49 	.inst	0x74696e49 ; undefined
     3ec:	696c6169 	ldpsw	x9, x24, [x11, #-160]
     3f0:	74496573 	.inst	0x74496573 ; undefined
     3f4:	4c006d65 	st1	{v5.2d-v7.2d}, [x11]
     3f8:	5f747369 	sqdmlsl	s9, h27, v4.h[3]
     3fc:	78750074 	ldaddlh	w21, w20, [x3]
     400:	626d754e 	.inst	0x626d754e ; undefined
     404:	664f7265 	.inst	0x664f7265 ; undefined
     408:	6d657449 	ldp	d9, d29, [x2, #-432]
     40c:	4c760073 	.inst	0x4c760073 ; undefined
     410:	49747369 	.inst	0x49747369 ; undefined
     414:	7265736e 	.inst	0x7265736e ; undefined
     418:	646e4574 	.inst	0x646e4574 ; undefined
     41c:	4e787000 	sabdl2	v0.4s, v0.8h, v24.8h
     420:	00747865 	.inst	0x00747865 ; undefined
     424:	73694c76 	.inst	0x73694c76 ; undefined
     428:	696e4974 	ldpsw	x20, x18, [x11, #-144]
     42c:	6c616974 	ldnp	d20, d26, [x11, #-496]
     430:	00657369 	.inst	0x00657369 ; undefined
     434:	6c615678 	ldnp	d24, d21, [x19, #-496]
     438:	664f6575 	.inst	0x664f6575 ; undefined
     43c:	65736e49 	fnmls	z9.h, p3/m, z18.h, z19.h
     440:	6f697472 	uqshl	v18.2d, v3.2d, #41
     444:	7870006e 	ldaddlh	w16, w14, [x3]
     448:	6d657449 	ldp	d9, d29, [x2, #-432]
     44c:	49787000 	.inst	0x49787000 ; undefined
     450:	61726574 	.inst	0x61726574 ; undefined
     454:	00726f74 	.inst	0x00726f74 ; undefined
     458:	6e497870 	.inst	0x6e497870 ; undefined
     45c:	00786564 	.inst	0x00786564 ; undefined
     460:	72507870 	.inst	0x72507870 ; undefined
     464:	6f697665 	uqshl	v5.2d, v19.2d, #41
     468:	78007375 	sturh	w21, [x27, #7]
     46c:	494e494d 	.inst	0x494e494d ; undefined
     470:	53494c5f 	.inst	0x53494c5f ; undefined
     474:	54495f54 	.inst	0x54495f54 ; undefined
     478:	70004d45 	adr	x5, e23 <__module_entries_end-0x71dd>
     47c:	73694c78 	.inst	0x73694c78 ; undefined
     480:	4c780074 	.inst	0x4c780074 ; undefined
     484:	00545349 	.inst	0x00545349 ; undefined
     488:	53494c78 	.inst	0x53494c78 ; undefined
     48c:	54495f54 	.inst	0x54495f54 ; undefined
     490:	75004d45 	.inst	0x75004d45 ; undefined
     494:	73694c78 	.inst	0x73694c78 ; undefined
     498:	6d655274 	ldp	d20, d20, [x19, #-432]
     49c:	0065766f 	.inst	0x0065766f ; undefined
     4a0:	654e7870 	fcmne	p0.h, p6/z, z3.h, z14.h
     4a4:	73694c77 	.inst	0x73694c77 ; undefined
     4a8:	65744974 	fnmla	z20.h, p2/m, z11.h, z20.h
     4ac:	4c76006d 	.inst	0x4c76006d ; undefined
     4b0:	49747369 	.inst	0x49747369 ; undefined
     4b4:	7265736e 	.inst	0x7265736e ; undefined
     4b8:	69540074 	ldpsw	x20, x0, [x3, #160]
     4bc:	754f656d 	.inst	0x754f656d ; undefined
     4c0:	00745f74 	.inst	0x00745f74 ; undefined
     4c4:	65755178 	fnmla	z24.h, p4/m, z11.h, z21.h
     4c8:	65476575 	fcmne	p5.h, p1/z, z11.h, z7.h
     4cc:	6972656e 	ldpsw	x14, x25, [x11, #-112]
     4d0:	73655263 	.inst	0x73655263 ; undefined
     4d4:	70007465 	adr	x5, 1363 <__module_entries_end-0x6c9d>
     4d8:	75516375 	.inst	0x75516375 ; undefined
     4dc:	53657565 	.inst	0x53657565 ; undefined
     4e0:	61726f74 	.inst	0x61726f74 ; undefined
     4e4:	78006567 	strh	w7, [x11], #6
     4e8:	454d4954 	.inst	0x454d4954 ; undefined
     4ec:	54554f5f 	.inst	0x54554f5f ; undefined
     4f0:	76727000 	.inst	0x76727000 ; undefined
     4f4:	79706f43 	ldrh	w3, [x26, #6198]
     4f8:	61746144 	.inst	0x61746144 ; undefined
     4fc:	75516f54 	.inst	0x75516f54 ; undefined
     500:	00657565 	.inst	0x00657565 ; undefined
     504:	736f5078 	.inst	0x736f5078 ; undefined
     508:	6f697469 	uqshl	v9.2d, v3.2d, #41
     50c:	7875006e 	ldaddlh	w21, w14, [x3]
     510:	75657551 	.inst	0x75657551 ; undefined
     514:	73654d65 	.inst	0x73654d65 ; undefined
     518:	65676173 	fnmls	z19.h, p0/m, z11.h, z7.h
     51c:	69615773 	ldpsw	x19, x21, [x27, #-248]
     520:	676e6974 	.inst	0x676e6974 ; undefined
     524:	6f682f00 	.inst	0x6f682f00 ; undefined
     528:	632f656d 	.inst	0x632f656d ; undefined
     52c:	2f646969 	umlsl	v9.4s, v11.4h, v4.h[6]
     530:	6ca9c354 	stp	d20, d16, [x26], #-360
     534:	6863a9c3 	.inst	0x6863a9c3 ; undefined
     538:	65677261 	fnmls	z1.h, p4/m, z19.h, z7.h
     53c:	746e656d 	.inst	0x746e656d ; undefined
     540:	61522f73 	.inst	0x61522f73 ; undefined
     544:	65627073 	fnmls	z19.h, p4/m, z3.h, z2.h
     548:	50797272 	adr	x18, f3396 <_freertos_vector_table+0xdc56e>
     54c:	462d3369 	.inst	0x462d3369 ; undefined
     550:	52656572 	.inst	0x52656572 ; undefined
     554:	2f534f54 	.inst	0x2f534f54 ; undefined
     558:	72756f53 	.inst	0x72756f53 ; undefined
     55c:	712f6563 	subs	w3, w11, #0xbd9
     560:	65756575 	fnmls	z21.h, p1/m, z11.h, z21.h
     564:	7800632e 	sturh	w14, [x25, #6]
     568:	75657551 	.inst	0x75657551 ; undefined
     56c:	51734965 	sub	w5, w11, #0xcd2, lsl #12
     570:	65756575 	fnmls	z21.h, p1/m, z11.h, z21.h
     574:	74706d45 	.inst	0x74706d45 ; undefined
     578:	6f724679 	sri	v25.2d, v19.2d, #14
     57c:	5253496d 	.inst	0x5253496d ; undefined
     580:	754a7800 	.inst	0x754a7800 ; undefined
     584:	65507473 	fcmne	p3.h, p5/z, z3.h, z16.h
     588:	6e696b65 	.inst	0x6e696b65 ; undefined
     58c:	78750067 	ldaddlh	w21, w7, [x3]
     590:	75657551 	.inst	0x75657551 ; undefined
     594:	61705365 	.inst	0x61705365 ; undefined
     598:	41736563 	.inst	0x41736563 ; undefined
     59c:	6c696176 	ldnp	d22, d24, [x11, #-368]
     5a0:	656c6261 	fnmls	z1.h, p0/m, z19.h, z12.h
     5a4:	75517800 	.inst	0x75517800 ; undefined
     5a8:	52657565 	.inst	0x52657565 ; undefined
     5ac:	69656365 	ldpsw	x5, x24, [x27, #-216]
     5b0:	72466576 	.inst	0x72466576 ; undefined
     5b4:	53496d6f 	.inst	0x53496d6f ; undefined
     5b8:	63700052 	.inst	0x63700052 ; undefined
     5bc:	6769724f 	.inst	0x6769724f ; undefined
     5c0:	6c616e69 	ldnp	d9, d27, [x19, #-496]
     5c4:	64616552 	.inst	0x64616552 ; undefined
     5c8:	69736f50 	ldpsw	x16, x27, [x26, #-104]
     5cc:	6e6f6974 	.inst	0x6e6f6974 ; undefined
     5d0:	76727000 	.inst	0x76727000 ; undefined
     5d4:	75517349 	.inst	0x75517349 ; undefined
     5d8:	46657565 	.inst	0x46657565 ; undefined
     5dc:	006c6c75 	.inst	0x006c6c75 ; undefined
     5e0:	61546370 	.inst	0x61546370 ; undefined
     5e4:	78006c69 	strh	w9, [x3, #6]!
     5e8:	6c656959 	ldnp	d25, d26, [x10, #-432]
     5ec:	71655264 	subs	w4, w19, #0x954, lsl #12
     5f0:	65726975 	fnmls	z21.h, p2/m, z11.h, z18.h
     5f4:	51780064 	sub	w4, w3, #0xe00, lsl #12
     5f8:	65756575 	fnmls	z21.h, p1/m, z11.h, z21.h
     5fc:	656e6547 	fnmls	z7.h, p1/m, z10.h, z14.h
     600:	53636972 	.inst	0x53636972 ; undefined
     604:	00646e65 	.inst	0x00646e65 ; undefined
     608:	75427670 	.inst	0x75427670 ; undefined
     60c:	72656666 	.inst	0x72656666 ; undefined
     610:	4c787500 	.inst	0x4c787500 ; undefined
     614:	74676e65 	.inst	0x74676e65 ; undefined
     618:	63750068 	.inst	0x63750068 ; undefined
     61c:	75657551 	.inst	0x75657551 ; undefined
     620:	70795465 	adr	x5, f30af <_freertos_vector_table+0xdc287>
     624:	78750065 	ldaddlh	w21, w5, [x3]
     628:	75657551 	.inst	0x75657551 ; undefined
     62c:	73654d65 	.inst	0x73654d65 ; undefined
     630:	65676173 	fnmls	z19.h, p0/m, z11.h, z7.h
     634:	69615773 	ldpsw	x19, x21, [x27, #-248]
     638:	676e6974 	.inst	0x676e6974 ; undefined
     63c:	6d6f7246 	ldp	d6, d28, [x18, #-272]
     640:	00525349 	.inst	0x00525349 ; undefined
     644:	45555178 	.inst	0x45555178 ; undefined
     648:	75004555 	.inst	0x75004555 ; undefined
     64c:	65744978 	fnmla	z24.h, p2/m, z11.h, z20.h
     650:	7a69536d 	.inst	0x7a69536d ; undefined
     654:	54630065 	b.pl	c6660 <_freertos_vector_table+0xaf838>  // b.nfrst
     658:	636f4c78 	.inst	0x636f4c78 ; undefined
     65c:	7270006b 	.inst	0x7270006b ; undefined
     660:	696e4976 	ldpsw	x22, x18, [x11, #-144]
     664:	6c616974 	ldnp	d20, d26, [x11, #-496]
     668:	4e657369 	sabdl2	v9.4s, v27.8h, v5.8h
     66c:	75517765 	.inst	0x75517765 ; undefined
     670:	00657565 	.inst	0x00657565 ; undefined
     674:	65755178 	fnmla	z24.h, p4/m, z11.h, z21.h
     678:	65476575 	fcmne	p5.h, p1/z, z11.h, z7.h
     67c:	6972656e 	ldpsw	x14, x25, [x11, #-112]
     680:	65724363 	fnmla	z3.h, p0/m, z27.h, z18.h
     684:	00657461 	.inst	0x00657461 ; undefined
     688:	654e7870 	fcmne	p0.h, p6/z, z3.h, z14.h
     68c:	65755177 	fnmla	z23.h, p4/m, z11.h, z21.h
     690:	78006575 	strh	w21, [x11], #6
     694:	656d6954 	fnmls	z20.h, p2/m, z10.h, z13.h
     698:	6e456e4f 	.inst	0x6e456e4f ; undefined
     69c:	69726574 	ldpsw	x20, x25, [x11, #-112]
     6a0:	7800676e 	strh	w14, [x27], #6
     6a4:	7265764f 	.inst	0x7265764f ; undefined
     6a8:	776f6c66 	.inst	0x776f6c66 ; undefined
     6ac:	6e756f43 	umin	v3.8h, v26.8h, v21.8h
     6b0:	72700074 	.inst	0x72700074 ; undefined
     6b4:	706f4376 	adr	x22, def23 <_freertos_vector_table+0xc80fb>
     6b8:	74614479 	.inst	0x74614479 ; undefined
     6bc:	6f724661 	sri	v1.2d, v19.2d, #14
     6c0:	6575516d 	fnmla	z13.h, p4/m, z11.h, z21.h
     6c4:	51006575 	sub	w21, w11, #0x19
     6c8:	65756575 	fnmls	z21.h, p1/m, z11.h, z21.h
     6cc:	7000745f 	adr	xzr, 1557 <__module_entries_end-0x6aa9>
     6d0:	61654863 	.inst	0x61654863 ; undefined
     6d4:	76700064 	.inst	0x76700064 ; undefined
     6d8:	6d657449 	ldp	d9, d29, [x2, #-432]
     6dc:	75516f54 	.inst	0x75516f54 ; undefined
     6e0:	00657565 	.inst	0x00657565 ; undefined
     6e4:	73615478 	.inst	0x73615478 ; undefined
     6e8:	6157736b 	.inst	0x6157736b ; undefined
     6ec:	6e697469 	uabd	v9.8h, v3.8h, v9.8h
     6f0:	526f5467 	.inst	0x526f5467 ; undefined
     6f4:	69656365 	ldpsw	x5, x24, [x27, #-216]
     6f8:	78006576 	strh	w22, [x11], #6
     6fc:	75657551 	.inst	0x75657551 ; undefined
     700:	7a695365 	.inst	0x7a695365 ; undefined
     704:	426e4965 	.inst	0x426e4965 ; undefined
     708:	73657479 	.inst	0x73657479 ; undefined
     70c:	65755100 	fnmla	z0.h, p4/m, z8.h, z21.h
     710:	65446575 	fcmne	p5.h, p1/z, z11.h, z4.h
     714:	696e6966 	ldpsw	x6, x26, [x11, #-144]
     718:	6e6f6974 	.inst	0x6e6f6974 ; undefined
     71c:	76727000 	.inst	0x76727000 ; undefined
     720:	6f6c6e55 	.inst	0x6f6c6e55 ; undefined
     724:	75516b63 	.inst	0x75516b63 ; undefined
     728:	00657565 	.inst	0x00657565 ; undefined
     72c:	75517875 	.inst	0x75517875 ; undefined
     730:	4c657565 	.inst	0x4c657565 ; undefined
     734:	74676e65 	.inst	0x74676e65 ; undefined
     738:	78700068 	ldaddlh	w16, w8, [x3]
     73c:	75657551 	.inst	0x75657551 ; undefined
     740:	51780065 	sub	w5, w3, #0xe00, lsl #12
     744:	65756575 	fnmls	z21.h, p1/m, z11.h, z21.h
     748:	656e6547 	fnmls	z7.h, p1/m, z10.h, z14.h
     74c:	53636972 	.inst	0x53636972 ; undefined
     750:	46646e65 	.inst	0x46646e65 ; undefined
     754:	496d6f72 	.inst	0x496d6f72 ; undefined
     758:	78005253 	sturh	w19, [x18, #5]
     75c:	75657551 	.inst	0x75657551 ; undefined
     760:	65655065 	fnmla	z5.h, p4/m, z3.h, z5.h
     764:	6f72466b 	sri	v11.2d, v19.2d, #14
     768:	5253496d 	.inst	0x5253496d ; undefined
     76c:	57637000 	.inst	0x57637000 ; undefined
     770:	65746972 	fnmls	z18.h, p2/m, z11.h, z20.h
     774:	78006f54 	strh	w20, [x26, #6]!
     778:	75657551 	.inst	0x75657551 ; undefined
     77c:	51734965 	sub	w5, w11, #0xcd2, lsl #12
     780:	65756575 	fnmls	z21.h, p1/m, z11.h, z21.h
     784:	6c6c7546 	ldnp	d6, d29, [x10, #-320]
     788:	6d6f7246 	ldp	d6, d28, [x18, #-272]
     78c:	00525349 	.inst	0x00525349 ; undefined
     790:	65526370 	fcmne	p0.h, p0/z, z27.h, z18.h
     794:	72466461 	.inst	0x72466461 ; undefined
     798:	78006d6f 	strh	w15, [x11, #6]!
     79c:	75657551 	.inst	0x75657551 ; undefined
     7a0:	6e654765 	ushl	v5.8h, v27.8h, v5.8h
     7a4:	63697265 	.inst	0x63697265 ; undefined
     7a8:	65636552 	fnmls	z18.h, p1/m, z10.h, z3.h
     7ac:	00657669 	.inst	0x00657669 ; undefined
     7b0:	746e4578 	.inst	0x746e4578 ; undefined
     7b4:	69547972 	ldpsw	x18, x30, [x11, #160]
     7b8:	6553656d 	fcmeq	p13.h, p1/z, z11.h, z19.h
     7bc:	51760074 	sub	w20, w3, #0xd80, lsl #12
     7c0:	65756575 	fnmls	z21.h, p1/m, z11.h, z21.h
     7c4:	656c6544 	fnmls	z4.h, p1/m, z10.h, z12.h
     7c8:	75006574 	.inst	0x75006574 ; undefined
     7cc:	74655278 	.inst	0x74655278 ; undefined
     7d0:	006e7275 	.inst	0x006e7275 ; undefined
     7d4:	65755178 	fnmla	z24.h, p4/m, z11.h, z21.h
     7d8:	69476575 	ldpsw	x21, x25, [x11, #56]
     7dc:	72466576 	.inst	0x72466576 ; undefined
     7e0:	53496d6f 	.inst	0x53496d6f ; undefined
     7e4:	43780052 	.inst	0x43780052 ; undefined
     7e8:	5079706f 	adr	x15, f35f6 <_freertos_vector_table+0xdc7ce>
     7ec:	7469736f 	.inst	0x7469736f ; undefined
     7f0:	006e6f69 	.inst	0x006e6f69 ; undefined
     7f4:	49767270 	.inst	0x49767270 ; undefined
     7f8:	65755173 	fnmla	z19.h, p4/m, z11.h, z21.h
     7fc:	6d456575 	ldp	d21, d25, [x11, #80]
     800:	00797470 	.inst	0x00797470 ; undefined
     804:	654d7875 	fcmne	p5.h, p6/z, z3.h, z13.h
     808:	67617373 	.inst	0x67617373 ; undefined
     80c:	61577365 	.inst	0x61577365 ; undefined
     810:	6e697469 	uabd	v9.8h, v3.8h, v9.8h
     814:	78750067 	ldaddlh	w21, w7, [x3]
     818:	65766153 	fnmls	z19.h, p0/m, z10.h, z22.h
     81c:	746e4964 	.inst	0x746e4964 ; undefined
     820:	75727265 	.inst	0x75727265 ; undefined
     824:	74537470 	.inst	0x74537470 ; undefined
     828:	73757461 	.inst	0x73757461 ; undefined
     82c:	52787500 	.inst	0x52787500 ; undefined
     830:	72756365 	.inst	0x72756365 ; undefined
     834:	65766973 	fnmls	z19.h, p2/m, z11.h, z22.h
     838:	6c6c6143 	ldnp	d3, d24, [x10, #-320]
     83c:	6e756f43 	umin	v3.8h, v26.8h, v21.8h
     840:	78700074 	ldaddlh	w16, w20, [x3]
     844:	68676948 	.inst	0x68676948 ; undefined
     848:	72507265 	.inst	0x72507265 ; undefined
     84c:	69726f69 	ldpsw	x9, x27, [x27, #-112]
     850:	61547974 	.inst	0x61547974 ; undefined
     854:	6f576b73 	umlsl2	v19.4s, v27.8h, v7.h[5]
     858:	006e656b 	.inst	0x006e656b ; undefined
     85c:	75657551 	.inst	0x75657551 ; undefined
     860:	6e614865 	uqxtn2	v5.8h, v3.4s
     864:	5f656c64 	.inst	0x5f656c64 ; undefined
     868:	54780074 	.inst	0x54780074 ; undefined
     86c:	736b7361 	.inst	0x736b7361 ; undefined
     870:	74696157 	.inst	0x74696157 ; undefined
     874:	54676e69 	b.ls	cf640 <_freertos_vector_table+0xb8818>  // b.plast
     878:	6e65536f 	uabal2	v15.4s, v27.8h, v5.8h
     87c:	52630064 	.inst	0x52630064 ; undefined
     880:	636f4c78 	.inst	0x636f4c78 ; undefined
     884:	6370006b 	.inst	0x6370006b ; undefined
     888:	6b736154 	.inst	0x6b736154 ; undefined
     88c:	656d614e 	fnmls	z14.h, p0/m, z10.h, z13.h
     890:	50787500 	adr	x0, f1732 <_freertos_vector_table+0xda90a>
     894:	726f6972 	.inst	0x726f6972 ; undefined
     898:	00797469 	.inst	0x00797469 ; undefined
     89c:	6f437870 	fcmla	v16.8h, v3.8h, v3.h[2], #270
     8a0:	4c74736e 	.inst	0x4c74736e ; undefined
     8a4:	00747369 	.inst	0x00747369 ; undefined
     8a8:	546b7374 	.inst	0x546b7374 ; undefined
     8ac:	436b7361 	.inst	0x436b7361 ; undefined
     8b0:	72746e6f 	.inst	0x72746e6f ; undefined
     8b4:	6c426c6f 	ldnp	d15, d27, [x3, #32]
     8b8:	006b636f 	.inst	0x006b636f ; undefined
     8bc:	65507875 	fcmne	p5.h, p6/z, z3.h, z16.h
     8c0:	6465646e 	.inst	0x6465646e ; undefined
     8c4:	6e756f43 	umin	v3.8h, v26.8h, v21.8h
     8c8:	75007374 	.inst	0x75007374 ; undefined
     8cc:	7469426c 	.inst	0x7469426c ; undefined
     8d0:	436f5473 	.inst	0x436f5473 ; undefined
     8d4:	7261656c 	.inst	0x7261656c ; undefined
     8d8:	78456e4f 	ldrh	w15, [x18, #86]!
     8dc:	75007469 	.inst	0x75007469 ; undefined
     8e0:	73615478 	.inst	0x73615478 ; undefined
     8e4:	7465476b 	.inst	0x7465476b ; undefined
     8e8:	626d754e 	.inst	0x626d754e ; undefined
     8ec:	664f7265 	.inst	0x664f7265 ; undefined
     8f0:	6b736154 	.inst	0x6b736154 ; undefined
     8f4:	4e650073 	saddl2	v19.4s, v3.8h, v5.8h
     8f8:	7463416f 	.inst	0x7463416f ; undefined
     8fc:	006e6f69 	.inst	0x006e6f69 ; undefined
     900:	6f547875 	.inst	0x6f547875 ; undefined
     904:	61655270 	.inst	0x61655270 ; undefined
     908:	72507964 	.inst	0x72507964 ; undefined
     90c:	69726f69 	ldpsw	x9, x27, [x27, #-112]
     910:	70007974 	adr	x20, 183f <__module_entries_end-0x67c1>
     914:	65764578 	fnmla	z24.h, p1/m, z11.h, z22.h
     918:	694c746e 	ldpsw	x14, x29, [x3, #96]
     91c:	78007473 	strh	w19, [x3], #7
     920:	65686353 	fnmls	z19.h, p0/m, z26.h, z8.h
     924:	656c7564 	fnmls	z4.h, p5/m, z11.h, z12.h
     928:	6e755272 	uabal2	v18.4s, v19.8h, v21.8h
     92c:	676e696e 	.inst	0x676e696e ; undefined
     930:	44787500 	.inst	0x44787500 ; undefined
     934:	74656c65 	.inst	0x74656c65 ; undefined
     938:	61546465 	.inst	0x61546465 ; undefined
     93c:	57736b73 	.inst	0x57736b73 ; undefined
     940:	69746961 	ldpsw	x1, x26, [x11, #-96]
     944:	6c43676e 	ldnp	d14, d25, [x27, #48]
     948:	556e6165 	.inst	0x556e6165 ; undefined
     94c:	78700070 	ldaddlh	w16, w16, [x3]
     950:	64616552 	.inst	0x64616552 ; undefined
     954:	73615479 	.inst	0x73615479 ; undefined
     958:	694c736b 	ldpsw	x11, x28, [x27, #96]
     95c:	00737473 	.inst	0x00737473 ; undefined
     960:	724f6375 	.inst	0x724f6375 ; undefined
     964:	6e696769 	umax	v9.8h, v27.8h, v9.8h
     968:	6f4e6c61 	.inst	0x6f4e6c61 ; undefined
     96c:	79666974 	ldrh	w20, [x11, #4916]
     970:	74617453 	.inst	0x74617453 ; undefined
     974:	54760065 	b.pl	ec980 <_freertos_vector_table+0xd5b58>  // b.nfrst
     978:	536b7361 	.inst	0x536b7361 ; undefined
     97c:	69547465 	ldpsw	x5, x29, [x3, #160]
     980:	754f656d 	.inst	0x754f656d ; undefined
     984:	61745374 	.inst	0x61745374 ; undefined
     988:	78006574 	strh	w20, [x11], #6
     98c:	6b736154 	.inst	0x6b736154 ; undefined
     990:	656e6547 	fnmls	z7.h, p1/m, z10.h, z14.h
     994:	4e636972 	.inst	0x4e636972 ; undefined
     998:	6669746f 	.inst	0x6669746f ; undefined
     99c:	6f724679 	sri	v25.2d, v19.2d, #14
     9a0:	5253496d 	.inst	0x5253496d ; undefined
     9a4:	61547800 	.inst	0x61547800 ; undefined
     9a8:	6e496b73 	.inst	0x6e496b73 ; undefined
     9ac:	6d657263 	ldp	d3, d28, [x19, #-432]
     9b0:	54746e65 	b.pl	e977c <_freertos_vector_table+0xd2954>  // b.nfrst
     9b4:	006b6369 	.inst	0x006b6369 ; undefined
     9b8:	6c654478 	ldnp	d24, d17, [x3, #-432]
     9bc:	64657961 	.inst	0x64657961 ; undefined
     9c0:	6b736154 	.inst	0x6b736154 ; undefined
     9c4:	7473694c 	.inst	0x7473694c ; undefined
     9c8:	44780031 	.inst	0x44780031 ; undefined
     9cc:	79616c65 	ldrh	w5, [x3, #4278]
     9d0:	61546465 	.inst	0x61546465 ; undefined
     9d4:	694c6b73 	ldpsw	x19, x26, [x27, #96]
     9d8:	00327473 	.inst	0x00327473 ; NYI
     9dc:	61506c75 	.inst	0x61506c75 ; undefined
     9e0:	656d6172 	fnmls	z18.h, p0/m, z11.h, z13.h
     9e4:	73726574 	.inst	0x73726574 ; undefined
     9e8:	61547800 	.inst	0x61547800 ; undefined
     9ec:	6f546b73 	umlsl2	v19.4s, v27.8h, v4.h[5]
     9f0:	75736552 	.inst	0x75736552 ; undefined
     9f4:	7600656d 	.inst	0x7600656d ; undefined
     9f8:	6b736154 	.inst	0x6b736154 ; undefined
     9fc:	41746553 	.inst	0x41746553 ; undefined
     a00:	696c7070 	ldpsw	x16, x28, [x3, #-160]
     a04:	69746163 	ldpsw	x3, x24, [x11, #-96]
     a08:	61546e6f 	.inst	0x61546e6f ; undefined
     a0c:	61546b73 	.inst	0x61546b73 ; undefined
     a10:	73740067 	.inst	0x73740067 ; undefined
     a14:	4243546b 	.inst	0x4243546b ; undefined
     a18:	4e637500 	sabd	v0.8h, v8.8h, v3.8h
     a1c:	6669746f 	.inst	0x6669746f ; undefined
     a20:	61745379 	.inst	0x61745379 ; undefined
     a24:	78006574 	strh	w20, [x11], #6
     a28:	6b736154 	.inst	0x6b736154 ; undefined
     a2c:	656e6547 	fnmls	z7.h, p1/m, z10.h, z14.h
     a30:	4e636972 	.inst	0x4e636972 ; undefined
     a34:	6669746f 	.inst	0x6669746f ; undefined
     a38:	78700079 	ldaddlh	w16, w25, [x3]
     a3c:	6c626e55 	ldnp	d21, d27, [x18, #-480]
     a40:	656b636f 	fnmls	z15.h, p0/m, z27.h, z11.h
     a44:	42435464 	.inst	0x42435464 ; undefined
     a48:	53737500 	.inst	0x53737500 ; undefined
     a4c:	6b636174 	.inst	0x6b636174 ; undefined
     a50:	74706544 	.inst	0x74706544 ; undefined
     a54:	43780068 	.inst	0x43780068 ; undefined
     a58:	7261656c 	.inst	0x7261656c ; undefined
     a5c:	6e756f43 	umin	v3.8h, v26.8h, v21.8h
     a60:	456e4f74 	.inst	0x456e4f74 ; undefined
     a64:	00746978 	.inst	0x00746978 ; undefined
     a68:	74655365 	.inst	0x74655365 ; undefined
     a6c:	756c6156 	.inst	0x756c6156 ; undefined
     a70:	74695765 	.inst	0x74695765 ; undefined
     a74:	65764f68 	fnmla	z8.h, p3/m, z27.h, z22.h
     a78:	69727772 	ldpsw	x18, x29, [x27, #-112]
     a7c:	78006574 	strh	w20, [x11], #6
     a80:	6b736154 	.inst	0x6b736154 ; undefined
     a84:	54746547 	b.vc	e972c <_freertos_vector_table+0xd2904>
     a88:	436b6369 	.inst	0x436b6369 ; undefined
     a8c:	746e756f 	.inst	0x746e756f ; undefined
     a90:	6d6f7246 	ldp	d6, d28, [x18, #-272]
     a94:	00525349 	.inst	0x00525349 ; undefined
     a98:	61537875 	.inst	0x61537875 ; undefined
     a9c:	49646576 	.inst	0x49646576 ; undefined
     aa0:	7265746e 	.inst	0x7265746e ; undefined
     aa4:	74707572 	.inst	0x74707572 ; undefined
     aa8:	74617453 	.inst	0x74617453 ; undefined
     aac:	6c750065 	ldnp	d5, d0, [x3, #-176]
     ab0:	73746942 	.inst	0x73746942 ; undefined
     ab4:	6c436f54 	ldnp	d20, d27, [x26, #48]
     ab8:	4f726165 	smlsl2	v5.4s, v11.8h, v2.h[3]
     abc:	746e456e 	.inst	0x746e456e ; undefined
     ac0:	78007972 	sttrh	w18, [x11, #7]
     ac4:	646e6550 	.inst	0x646e6550 ; undefined
     ac8:	52676e69 	.inst	0x52676e69 ; undefined
     acc:	79646165 	ldrh	w5, [x11, #4656]
     ad0:	7473694c 	.inst	0x7473694c ; undefined
     ad4:	61547800 	.inst	0x61547800 ; undefined
     ad8:	65476b73 	fcmne	p3.h, p2/z, z27.h, z7.h
     adc:	70704174 	adr	x20, e130b <_freertos_vector_table+0xca4e3>
     ae0:	6163696c 	.inst	0x6163696c ; undefined
     ae4:	6e6f6974 	.inst	0x6e6f6974 ; undefined
     ae8:	6b736154 	.inst	0x6b736154 ; undefined
     aec:	00676154 	.inst	0x00676154 ; undefined
     af0:	65547870 	fcmne	p0.h, p6/z, z3.h, z20.h
     af4:	7600706d 	.inst	0x7600706d ; undefined
     af8:	6b736154 	.inst	0x6b736154 ; undefined
     afc:	70737553 	adr	x19, e79a7 <_freertos_vector_table+0xd0b7f>
     b00:	41646e65 	.inst	0x41646e65 ; undefined
     b04:	65006c6c 	.inst	0x65006c6c ; undefined
     b08:	69746f4e 	ldpsw	x14, x27, [x26, #-96]
     b0c:	63417966 	.inst	0x63417966 ; undefined
     b10:	6e6f6974 	.inst	0x6e6f6974 ; undefined
     b14:	69547800 	ldpsw	x0, x30, [x0, #160]
     b18:	6f436b63 	umlsl2	v3.4s, v27.8h, v3.h[4]
     b1c:	00746e75 	.inst	0x00746e75 ; undefined
     b20:	73615476 	.inst	0x73615476 ; undefined
     b24:	646e456b 	.inst	0x646e456b ; undefined
     b28:	65686353 	fnmls	z19.h, p0/m, z26.h, z8.h
     b2c:	656c7564 	fnmls	z4.h, p5/m, z11.h, z12.h
     b30:	78750072 	ldaddlh	w21, w18, [x3]
     b34:	6b736154 	.inst	0x6b736154 ; undefined
     b38:	6f697250 	fcmla	v16.8h, v18.8h, v9.h[1], #270
     b3c:	79746972 	ldrh	w18, [x11, #6708]
     b40:	00746547 	.inst	0x00746547 ; undefined
     b44:	6e6f4378 	raddhn2	v24.8h, v27.4s, v15.4s
     b48:	69547473 	ldpsw	x19, x29, [x3, #160]
     b4c:	6f436b63 	umlsl2	v3.4s, v27.8h, v3.h[4]
     b50:	00746e75 	.inst	0x00746e75 ; undefined
     b54:	73755378 	.inst	0x73755378 ; undefined
     b58:	646e6570 	.inst	0x646e6570 ; undefined
     b5c:	61546465 	.inst	0x61546465 ; undefined
     b60:	694c6b73 	ldpsw	x19, x26, [x27, #96]
     b64:	70007473 	adr	x19, 19f3 <__module_entries_end-0x660d>
     b68:	6d614e63 	ldp	d3, d19, [x19, #-496]
     b6c:	78700065 	ldaddlh	w16, w5, [x3]
     b70:	7265764f 	.inst	0x7265764f ; undefined
     b74:	776f6c66 	.inst	0x776f6c66 ; undefined
     b78:	616c6544 	.inst	0x616c6544 ; undefined
     b7c:	54646579 	.inst	0x54646579 ; undefined
     b80:	4c6b7361 	.inst	0x4c6b7361 ; undefined
     b84:	00747369 	.inst	0x00747369 ; undefined
     b88:	73615478 	.inst	0x73615478 ; undefined
     b8c:	746f4e6b 	.inst	0x746f4e6b ; undefined
     b90:	53796669 	.inst	0x53796669 ; undefined
     b94:	65746174 	fnmls	z20.h, p0/m, z11.h, z20.h
     b98:	61656c43 	.inst	0x61656c43 ; undefined
     b9c:	54760072 	.inst	0x54760072 ; undefined
     ba0:	446b7361 	.inst	0x446b7361 ; undefined
     ba4:	79616c65 	ldrh	w5, [x3, #4278]
     ba8:	4e6c7500 	sabd	v0.8h, v8.8h, v12.8h
     bac:	6669746f 	.inst	0x6669746f ; undefined
     bb0:	56646569 	.inst	0x56646569 ; undefined
     bb4:	65756c61 	fnmls	z1.h, p3/m, z3.h, z21.h
     bb8:	61547800 	.inst	0x61547800 ; undefined
     bbc:	57736b73 	.inst	0x57736b73 ; undefined
     bc0:	69746961 	ldpsw	x1, x26, [x11, #-96]
     bc4:	6554676e 	fcmeq	p14.h, p1/z, z27.h, z20.h
     bc8:	6e696d72 	umin	v18.8h, v11.8h, v9.8h
     bcc:	6f697461 	uqshl	v1.2d, v3.2d, #41
     bd0:	5478006e 	b.al	f0bdc <_freertos_vector_table+0xd9db4>
     bd4:	526b7361 	.inst	0x526b7361 ; undefined
     bd8:	766f6d65 	.inst	0x766f6d65 ; undefined
     bdc:	6f724665 	sri	v5.2d, v19.2d, #14
     be0:	6576456d 	fnmla	z13.h, p1/m, z11.h, z22.h
     be4:	694c746e 	ldpsw	x14, x29, [x3, #96]
     be8:	65007473 	.inst	0x65007473 ; undefined
     bec:	56746553 	.inst	0x56746553 ; undefined
     bf0:	65756c61 	fnmls	z1.h, p3/m, z3.h, z21.h
     bf4:	68746957 	.inst	0x68746957 ; undefined
     bf8:	4f74756f 	sqshl	v15.2d, v11.2d, #52
     bfc:	77726576 	.inst	0x77726576 ; undefined
     c00:	65746972 	fnmls	z18.h, p2/m, z11.h, z20.h
     c04:	61547800 	.inst	0x61547800 ; undefined
     c08:	6f4e6b73 	umlsl2	v19.4s, v27.8h, v14.h[4]
     c0c:	79666974 	ldrh	w20, [x11, #4916]
     c10:	74696157 	.inst	0x74696157 ; undefined
     c14:	536c7500 	.inst	0x536c7500 ; undefined
     c18:	6b636174 	.inst	0x6b636174 ; undefined
     c1c:	74706544 	.inst	0x74706544 ; undefined
     c20:	53780068 	.inst	0x53780068 ; undefined
     c24:	6c756f68 	ldnp	d8, d27, [x27, #-176]
     c28:	6c654464 	ldnp	d4, d17, [x3, #-432]
     c2c:	70007961 	adr	x1, 1b5b <__module_entries_end-0x64a5>
     c30:	64497672 	fcmla	z18.h, p5/m, z19.h, z9.h, #270
     c34:	6154656c 	.inst	0x6154656c ; undefined
     c38:	78006b73 	sttrh	w19, [x27, #6]
     c3c:	7473694c 	.inst	0x7473694c ; undefined
     c40:	6d457349 	ldp	d9, d28, [x26, #80]
     c44:	00797470 	.inst	0x00797470 ; undefined
     c48:	61546c75 	.inst	0x61546c75 ; undefined
     c4c:	6f4e6b73 	umlsl2	v19.4s, v27.8h, v14.h[4]
     c50:	79666974 	ldrh	w20, [x11, #4916]
     c54:	656b6154 	fnmls	z20.h, p0/m, z10.h, z11.h
     c58:	61547800 	.inst	0x61547800 ; undefined
     c5c:	72436b73 	.inst	0x72436b73 ; undefined
     c60:	65746165 	fnmls	z5.h, p0/m, z11.h, z20.h
     c64:	76727000 	.inst	0x76727000 ; undefined
     c68:	4e646441 	smax	v1.8h, v2.8h, v4.8h
     c6c:	61547765 	.inst	0x61547765 ; undefined
     c70:	6f546b73 	umlsl2	v19.4s, v27.8h, v4.h[5]
     c74:	64616552 	.inst	0x64616552 ; undefined
     c78:	73694c79 	.inst	0x73694c79 ; undefined
     c7c:	78700074 	ldaddlh	w16, w20, [x3]
     c80:	6b6f6f48 	.inst	0x6b6f6f48 ; undefined
     c84:	636e7546 	.inst	0x636e7546 ; undefined
     c88:	6e6f6974 	.inst	0x6e6f6974 ; undefined
     c8c:	4e787000 	sabdl2	v0.4s, v0.8h, v24.8h
     c90:	43547765 	.inst	0x43547765 ; undefined
     c94:	78700042 	ldaddlh	w16, w2, [x2]
     c98:	6b736154 	.inst	0x6b736154 ; undefined
     c9c:	65646f43 	fnmls	z3.h, p3/m, z26.h, z4.h
     ca0:	6d654d00 	ldp	d0, d19, [x8, #-432]
     ca4:	5279726f 	.inst	0x5279726f ; undefined
     ca8:	6f696765 	sqshlu	v5.2d, v27.2d, #41
     cac:	00745f6e 	.inst	0x00745f6e ; undefined
     cb0:	78654e78 	.inst	0x78654e78 ; undefined
     cb4:	73615474 	.inst	0x73615474 ; undefined
     cb8:	626e556b 	.inst	0x626e556b ; undefined
     cbc:	6b636f6c 	.inst	0x6b636f6c ; undefined
     cc0:	656d6954 	fnmls	z20.h, p2/m, z10.h, z13.h
     cc4:	4c6c7500 	.inst	0x4c6c7500 ; undefined
     cc8:	74676e65 	.inst	0x74676e65 ; undefined
     ccc:	426e4968 	.inst	0x426e4968 ; undefined
     cd0:	73657479 	.inst	0x73657479 ; undefined
     cd4:	76727000 	.inst	0x76727000 ; undefined
     cd8:	65736552 	fnmls	z18.h, p1/m, z10.h, z19.h
     cdc:	78654e74 	.inst	0x78654e74 ; undefined
     ce0:	73615474 	.inst	0x73615474 ; undefined
     ce4:	626e556b 	.inst	0x626e556b ; undefined
     ce8:	6b636f6c 	.inst	0x6b636f6c ; undefined
     cec:	656d6954 	fnmls	z20.h, p2/m, z10.h, z13.h
     cf0:	4e787500 	sabd	v0.8h, v8.8h, v24.8h
     cf4:	72507765 	.inst	0x72507765 ; undefined
     cf8:	69726f69 	ldpsw	x9, x27, [x27, #-112]
     cfc:	70007974 	adr	x20, 1c2b <__module_entries_end-0x63d5>
     d00:	72506c75 	.inst	0x72506c75 ; undefined
     d04:	6f697665 	uqshl	v5.2d, v19.2d, #41
     d08:	6f4e7375 	fcmla	v21.8h, v27.8h, v14.h[0], #270
     d0c:	69666974 	ldpsw	x20, x26, [x11, #-208]
     d10:	69746163 	ldpsw	x3, x24, [x11, #-96]
     d14:	61566e6f 	.inst	0x61566e6f ; undefined
     d18:	0065756c 	.inst	0x0065756c ; undefined
     d1c:	69547870 	ldpsw	x16, x30, [x3, #160]
     d20:	754f656d 	.inst	0x754f656d ; undefined
     d24:	78750074 	ldaddlh	w21, w20, [x3]
     d28:	6b736154 	.inst	0x6b736154 ; undefined
     d2c:	6f697250 	fcmla	v16.8h, v18.8h, v9.h[1], #270
     d30:	79746972 	ldrh	w18, [x11, #6708]
     d34:	46746547 	.inst	0x46746547 ; undefined
     d38:	496d6f72 	.inst	0x496d6f72 ; undefined
     d3c:	78005253 	sturh	w19, [x18, #5]
     d40:	6b736154 	.inst	0x6b736154 ; undefined
     d44:	54746547 	b.vc	e99ec <_freertos_vector_table+0xd2bc4>
     d48:	436b6369 	.inst	0x436b6369 ; undefined
     d4c:	746e756f 	.inst	0x746e756f ; undefined
     d50:	54787500 	b.eq	f1bf0 <_freertos_vector_table+0xdadc8>  // b.none
     d54:	4e6b7361 	sabdl2	v1.4s, v27.8h, v11.8h
     d58:	65626d75 	fnmls	z21.h, p3/m, z11.h, z2.h
     d5c:	61540072 	.inst	0x61540072 ; undefined
     d60:	61486b73 	.inst	0x61486b73 ; undefined
     d64:	656c646e 	fnmls	z14.h, p1/m, z3.h, z12.h
     d68:	6500745f 	.inst	0x6500745f ; undefined
     d6c:	69746341 	ldpsw	x1, x24, [x26, #-96]
     d70:	75006e6f 	.inst	0x75006e6f ; undefined
     d74:	73615478 	.inst	0x73615478 ; undefined
     d78:	7365526b 	.inst	0x7365526b ; undefined
     d7c:	76457465 	.inst	0x76457465 ; undefined
     d80:	49746e65 	.inst	0x49746e65 ; undefined
     d84:	566d6574 	.inst	0x566d6574 ; undefined
     d88:	65756c61 	fnmls	z1.h, p3/m, z3.h, z21.h
     d8c:	61547600 	.inst	0x61547600 ; undefined
     d90:	72506b73 	.inst	0x72506b73 ; undefined
     d94:	69726f69 	ldpsw	x9, x27, [x27, #-112]
     d98:	65537974 	fcmne	p4.h, p6/z, z11.h, z19.h
     d9c:	54780074 	.inst	0x54780074 ; undefined
     da0:	546b7361 	b.ne	d7c0c <_freertos_vector_table+0xc0de4>  // b.any
     da4:	6575516f 	fnmla	z15.h, p4/m, z11.h, z21.h
     da8:	78007972 	sttrh	w18, [x11, #7]
     dac:	6b736154 	.inst	0x6b736154 ; undefined
     db0:	6f4e6f54 	.inst	0x6f4e6f54 ; undefined
     db4:	79666974 	ldrh	w20, [x11, #4916]
     db8:	61547800 	.inst	0x61547800 ; undefined
     dbc:	65006b73 	.inst	0x65006b73 ; undefined
     dc0:	42746553 	.inst	0x42746553 ; undefined
     dc4:	00737469 	.inst	0x00737469 ; undefined
     dc8:	4d454d78 	.inst	0x4d454d78 ; undefined
     dcc:	5f59524f 	.inst	0x5f59524f ; undefined
     dd0:	49474552 	.inst	0x49474552 ; undefined
     dd4:	75004e4f 	.inst	0x75004e4f ; undefined
     dd8:	31746e69 	adds	w9, w19, #0xd1b, lsl #12
     ddc:	00745f36 	.inst	0x00745f36 ; undefined
     de0:	73615476 	.inst	0x73615476 ; undefined
     de4:	6c65446b 	ldnp	d11, d17, [x3, #-432]
     de8:	00657465 	.inst	0x00657465 ; undefined
     dec:	73615478 	.inst	0x73615478 ; undefined
     df0:	6c61436b 	ldnp	d11, d16, [x27, #-496]
     df4:	7070416c 	adr	x12, e1623 <_freertos_vector_table+0xca7fb>
     df8:	6163696c 	.inst	0x6163696c ; undefined
     dfc:	6e6f6974 	.inst	0x6e6f6974 ; undefined
     e00:	6b736154 	.inst	0x6b736154 ; undefined
     e04:	6b6f6f48 	.inst	0x6b6f6f48 ; undefined
     e08:	61547600 	.inst	0x61547600 ; undefined
     e0c:	77536b73 	.inst	0x77536b73 ; undefined
     e10:	68637469 	.inst	0x68637469 ; undefined
     e14:	746e6f43 	.inst	0x746e6f43 ; undefined
     e18:	00747865 	.inst	0x00747865 ; undefined
     e1c:	6d754e78 	ldp	d24, d19, [x19, #-176]
     e20:	764f664f 	.inst	0x764f664f ; undefined
     e24:	6c667265 	ldnp	d5, d28, [x19, #-416]
     e28:	0073776f 	.inst	0x0073776f ; undefined
     e2c:	75437870 	.inst	0x75437870 ; undefined
     e30:	6e657272 	uabdl2	v18.4s, v19.8h, v5.8h
     e34:	42435474 	.inst	0x42435474 ; undefined
     e38:	61547600 	.inst	0x61547600 ; undefined
     e3c:	6c506b73 	ldnp	d19, d26, [x27, #256]
     e40:	4f656361 	smlsl2	v1.4s, v27.8h, v5.h[2]
     e44:	6576456e 	fnmla	z14.h, p1/m, z11.h, z22.h
     e48:	694c746e 	ldpsw	x14, x29, [x3, #96]
     e4c:	70007473 	adr	x19, 1cdb <__module_entries_end-0x6325>
     e50:	73615478 	.inst	0x73615478 ; undefined
     e54:	6761546b 	.inst	0x6761546b ; undefined
     e58:	76727000 	.inst	0x76727000 ; undefined
     e5c:	74696e49 	.inst	0x74696e49 ; undefined
     e60:	696c6169 	ldpsw	x9, x24, [x11, #-160]
     e64:	654e6573 	fcmne	p3.h, p1/z, z11.h, z14.h
     e68:	73615477 	.inst	0x73615477 ; undefined
     e6c:	7870006b 	ldaddlh	w16, w11, [x3]
     e70:	63617453 	.inst	0x63617453 ; undefined
     e74:	5478006b 	b.lt	f0e80 <_freertos_vector_table+0xda058>  // b.tstop
     e78:	526b7361 	.inst	0x526b7361 ; undefined
     e7c:	6d757365 	ldp	d5, d28, [x27, #-176]
     e80:	6c6c4165 	ldnp	d5, d16, [x11, #-320]
     e84:	61547600 	.inst	0x61547600 ; undefined
     e88:	6f4e6b73 	umlsl2	v19.4s, v27.8h, v14.h[4]
     e8c:	79666974 	ldrh	w20, [x11, #4916]
     e90:	65766947 	fnmls	z7.h, p2/m, z10.h, z22.h
     e94:	6d6f7246 	ldp	d6, d28, [x18, #-272]
     e98:	00525349 	.inst	0x00525349 ; undefined
     e9c:	65447870 	fcmne	p0.h, p6/z, z3.h, z4.h
     ea0:	6579616c 	fnmls	z12.h, p0/m, z11.h, z25.h
     ea4:	73615464 	.inst	0x73615464 ; undefined
     ea8:	73694c6b 	.inst	0x73694c6b ; undefined
     eac:	72700074 	.inst	0x72700074 ; undefined
     eb0:	73615476 	.inst	0x73615476 ; undefined
     eb4:	5473496b 	b.lt	e77e0 <_freertos_vector_table+0xd09b8>  // b.tstop
     eb8:	536b7361 	.inst	0x536b7361 ; undefined
     ebc:	65707375 	fnmls	z21.h, p4/m, z27.h, z16.h
     ec0:	6465646e 	.inst	0x6465646e ; undefined
     ec4:	77537800 	.inst	0x77537800 ; undefined
     ec8:	68637469 	.inst	0x68637469 ; undefined
     ecc:	75716552 	.inst	0x75716552 ; undefined
     ed0:	64657269 	.inst	0x64657269 ; undefined
     ed4:	61547800 	.inst	0x61547800 ; undefined
     ed8:	6f546b73 	umlsl2	v19.4s, v27.8h, v4.h[5]
     edc:	656c6544 	fnmls	z4.h, p1/m, z10.h, z12.h
     ee0:	75006574 	.inst	0x75006574 ; undefined
     ee4:	6c61566c 	ldnp	d12, d21, [x19, #-496]
     ee8:	78006575 	strh	w21, [x11], #6
     eec:	6b736154 	.inst	0x6b736154 ; undefined
     ef0:	75536f54 	.inst	0x75536f54 ; undefined
     ef4:	6e657073 	uabdl2	v19.4s, v3.8h, v5.8h
     ef8:	54780064 	b.mi	f0f04 <_freertos_vector_table+0xda0dc>  // b.first
     efc:	436b7361 	.inst	0x436b7361 ; undefined
     f00:	6b636568 	.inst	0x6b636568 ; undefined
     f04:	54726f46 	b.vs	e5cec <_freertos_vector_table+0xceec4>
     f08:	4f656d69 	.inst	0x4f656d69 ; undefined
     f0c:	70007475 	adr	x21, 1d9b <__module_entries_end-0x6265>
     f10:	65725078 	fnmla	z24.h, p4/m, z3.h, z18.h
     f14:	756f6976 	.inst	0x756f6976 ; undefined
     f18:	6b615773 	.inst	0x6b615773 ; undefined
     f1c:	6d695465 	ldp	d5, d21, [x3, #-368]
     f20:	49780065 	.inst	0x49780065 ; undefined
     f24:	54656c64 	b.mi	cbcb0 <_freertos_vector_table+0xb4e88>  // b.first
     f28:	486b7361 	.inst	0x486b7361 ; undefined
     f2c:	6c646e61 	ldnp	d1, d27, [x19, #-448]
     f30:	54780065 	b.pl	f0f3c <_freertos_vector_table+0xda114>  // b.nfrst
     f34:	526b7361 	.inst	0x526b7361 ; undefined
     f38:	6d757365 	ldp	d5, d28, [x27, #-176]
     f3c:	6f724665 	sri	v5.2d, v19.2d, #14
     f40:	5253496d 	.inst	0x5253496d ; undefined
     f44:	6c757000 	ldnp	d0, d28, [x0, #-176]
     f48:	69746f4e 	ldpsw	x14, x27, [x26, #-96]
     f4c:	61636966 	.inst	0x61636966 ; undefined
     f50:	6e6f6974 	.inst	0x6e6f6974 ; undefined
     f54:	756c6156 	.inst	0x756c6156 ; undefined
     f58:	61540065 	.inst	0x61540065 ; undefined
     f5c:	6f486b73 	umlsl2	v19.4s, v27.8h, v8.h[4]
     f60:	75466b6f 	.inst	0x75466b6f ; undefined
     f64:	6974636e 	ldpsw	x14, x24, [x27, #-96]
     f68:	745f6e6f 	.inst	0x745f6e6f ; undefined
     f6c:	61547600 	.inst	0x61547600 ; undefined
     f70:	694d6b73 	ldpsw	x19, x26, [x27, #104]
     f74:	64657373 	.inst	0x64657373 ; undefined
     f78:	6c656959 	ldnp	d25, d26, [x10, #-432]
     f7c:	78750064 	ldaddlh	w21, w4, [x3]
     f80:	646e6550 	.inst	0x646e6550 ; undefined
     f84:	69546465 	ldpsw	x5, x25, [x3, #160]
     f88:	00736b63 	.inst	0x00736b63 ; undefined
     f8c:	61546370 	.inst	0x61546370 ; undefined
     f90:	65476b73 	fcmne	p3.h, p2/z, z27.h, z7.h
     f94:	6d614e74 	ldp	d20, d19, [x19, #-496]
     f98:	54780065 	b.pl	f0fa4 <_freertos_vector_table+0xda17c>  // b.nfrst
     f9c:	736b6369 	.inst	0x736b6369 ; undefined
     fa0:	61547600 	.inst	0x61547600 ; undefined
     fa4:	74536b73 	.inst	0x74536b73 ; undefined
     fa8:	53747261 	.inst	0x53747261 ; undefined
     fac:	64656863 	.inst	0x64656863 ; undefined
     fb0:	72656c75 	.inst	0x72656c75 ; undefined
     fb4:	61437800 	.inst	0x61437800 ; undefined
     fb8:	6f6c426e 	mls	v14.8h, v19.8h, v12.h[2]
     fbc:	6e496b63 	.inst	0x6e496b63 ; undefined
     fc0:	69666564 	ldpsw	x4, x25, [x11, #-208]
     fc4:	6574696e 	fnmls	z14.h, p2/m, z11.h, z20.h
     fc8:	7000796c 	adr	x12, 1ef7 <__module_entries_end-0x6109>
     fcc:	73614276 	.inst	0x73614276 ; undefined
     fd0:	64644165 	.inst	0x64644165 ; undefined
     fd4:	73736572 	.inst	0x73736572 ; undefined
     fd8:	69547800 	ldpsw	x0, x30, [x0, #160]
     fdc:	54736b63 	b.cc	e7d48 <_freertos_vector_table+0xd0f20>  // b.lo, b.ul, b.last
     fe0:	6c65446f 	ldnp	d15, d17, [x3, #-432]
     fe4:	76007961 	.inst	0x76007961 ; undefined
     fe8:	6b736154 	.inst	0x6b736154 ; undefined
     fec:	63616c50 	.inst	0x63616c50 ; undefined
     ff0:	556e4f65 	.inst	0x556e4f65 ; undefined
     ff4:	64726f6e 	.inst	0x64726f6e ; undefined
     ff8:	64657265 	.inst	0x64657265 ; undefined
     ffc:	6e657645 	uabd	v5.8h, v18.8h, v5.8h
    1000:	73694c74 	.inst	0x73694c74 ; undefined
    1004:	54780074 	.inst	0x54780074 ; undefined
    1008:	526b7361 	.inst	0x526b7361 ; undefined
    100c:	766f6d65 	.inst	0x766f6d65 ; undefined
    1010:	6f724665 	sri	v5.2d, v19.2d, #14
    1014:	6f6e556d 	sli	v13.2d, v11.2d, #46
    1018:	72656472 	.inst	0x72656472 ; undefined
    101c:	76456465 	.inst	0x76456465 ; undefined
    1020:	4c746e65 	.inst	0x4c746e65 ; undefined
    1024:	00747369 	.inst	0x00747369 ; undefined
    1028:	69547870 	ldpsw	x16, x30, [x3, #160]
    102c:	54736b63 	b.cc	e7d98 <_freertos_vector_table+0xd0f70>  // b.lo, b.ul, b.last
    1030:	6961576f 	ldpsw	x15, x21, [x27, #-248]
    1034:	78750074 	ldaddlh	w21, w20, [x3]
    1038:	50706f54 	adr	x20, e1e22 <_freertos_vector_table+0xcaffa>
    103c:	726f6972 	.inst	0x726f6972 ; undefined
    1040:	00797469 	.inst	0x00797469 ; undefined
    1044:	73615476 	.inst	0x73615476 ; undefined
    1048:	6c65446b 	ldnp	d11, d17, [x3, #-432]
    104c:	6e557961 	.inst	0x6e557961 ; undefined
    1050:	006c6974 	.inst	0x006c6974 ; undefined
    1054:	72507875 	.inst	0x72507875 ; undefined
    1058:	69726f69 	ldpsw	x9, x27, [x27, #-112]
    105c:	73557974 	.inst	0x73557974 ; undefined
    1060:	6e4f6465 	.inst	0x6e4f6465 ; undefined
    1064:	72746e45 	.inst	0x72746e45 ; undefined
    1068:	43540079 	.inst	0x43540079 ; undefined
    106c:	00745f42 	.inst	0x00745f42 ; undefined
    1070:	44767270 	.inst	0x44767270 ; undefined
    1074:	74656c65 	.inst	0x74656c65 ; undefined
    1078:	42435465 	.inst	0x42435465 ; undefined
    107c:	61547600 	.inst	0x61547600 ; undefined
    1080:	75536b73 	.inst	0x75536b73 ; undefined
    1084:	6e657073 	uabdl2	v19.4s, v3.8h, v5.8h
    1088:	41780064 	.inst	0x41780064 ; undefined
    108c:	6165726c 	.inst	0x6165726c ; undefined
    1090:	69597964 	ldpsw	x4, x30, [x11, #200]
    1094:	65646c65 	fnmls	z5.h, p3/m, z3.h, z4.h
    1098:	76700064 	.inst	0x76700064 ; undefined
    109c:	61726150 	.inst	0x61726150 ; undefined
    10a0:	6574656d 	fnmls	z13.h, p1/m, z11.h, z20.h
    10a4:	682f0072 	.inst	0x682f0072 ; undefined
    10a8:	2f656d6f 	.inst	0x2f656d6f ; undefined
    10ac:	64696963 	.inst	0x64696963 ; undefined
    10b0:	a9c3542f 	ldp	x15, x21, [x1, #48]!
    10b4:	63a9c36c 	.inst	0x63a9c36c ; undefined
    10b8:	67726168 	.inst	0x67726168 ; undefined
    10bc:	6e656d65 	umin	v5.8h, v11.8h, v5.8h
    10c0:	522f7374 	eor	w20, w27, #0xfffe3fff
    10c4:	62707361 	.inst	0x62707361 ; undefined
    10c8:	79727265 	ldrh	w5, [x19, #6456]
    10cc:	2d336950 	stp	s16, s26, [x10, #-104]
    10d0:	65657246 	fnmls	z6.h, p4/m, z18.h, z5.h
    10d4:	534f5452 	.inst	0x534f5452 ; undefined
    10d8:	756f532f 	.inst	0x756f532f ; undefined
    10dc:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
    10e0:	6b736174 	.inst	0x6b736174 ; undefined
    10e4:	00632e73 	.inst	0x00632e73 ; undefined
    10e8:	67655278 	.inst	0x67655278 ; undefined
    10ec:	736e6f69 	.inst	0x736e6f69 ; undefined
    10f0:	76727000 	.inst	0x76727000 ; undefined
    10f4:	43646441 	.inst	0x43646441 ; undefined
    10f8:	65727275 	fnmls	z21.h, p4/m, z19.h, z18.h
    10fc:	6154746e 	.inst	0x6154746e ; undefined
    1100:	6f546b73 	umlsl2	v19.4s, v27.8h, v4.h[5]
    1104:	616c6544 	.inst	0x616c6544 ; undefined
    1108:	4c646579 	.inst	0x4c646579 ; undefined
    110c:	00747369 	.inst	0x00747369 ; undefined
    1110:	75437875 	.inst	0x75437875 ; undefined
    1114:	6e657272 	uabdl2	v18.4s, v19.8h, v5.8h
    1118:	6d754e74 	ldp	d20, d19, [x19, #-176]
    111c:	4f726562 	.inst	0x4f726562 ; undefined
    1120:	73615466 	.inst	0x73615466 ; undefined
    1124:	7800736b 	sturh	w11, [x27, #7]
    1128:	656d6954 	fnmls	z20.h, p2/m, z10.h, z13.h
    112c:	72636e49 	.inst	0x72636e49 ; undefined
    1130:	6e656d65 	umin	v5.8h, v11.8h, v5.8h
    1134:	54780074 	.inst	0x54780074 ; undefined
    1138:	54656d69 	b.ls	cbee4 <_freertos_vector_table+0xb50bc>  // b.plast
    113c:	6b61576f 	.inst	0x6b61576f ; undefined
    1140:	53780065 	.inst	0x53780065 ; undefined
    1144:	65746174 	fnmls	z20.h, p0/m, z11.h, z20.h
    1148:	7473694c 	.inst	0x7473694c ; undefined
    114c:	6d657449 	ldp	d9, d29, [x2, #-432]
    1150:	54787000 	b.eq	f1f50 <_freertos_vector_table+0xdb128>  // b.none
    1154:	75004243 	.inst	0x75004243 ; undefined
    1158:	68635378 	.inst	0x68635378 ; undefined
    115c:	6c756465 	ldnp	d5, d25, [x3, #-176]
    1160:	75537265 	.inst	0x75537265 ; undefined
    1164:	6e657073 	uabdl2	v19.4s, v3.8h, v5.8h
    1168:	00646564 	.inst	0x00646564 ; undefined
    116c:	73615476 	.inst	0x73615476 ; undefined
    1170:	7365526b 	.inst	0x7365526b ; undefined
    1174:	00656d75 	.inst	0x00656d75 ; undefined
    1178:	49767270 	.inst	0x49767270 ; undefined
    117c:	6974696e 	ldpsw	x14, x26, [x11, #-96]
    1180:	73696c61 	.inst	0x73696c61 ; undefined
    1184:	73615465 	.inst	0x73615465 ; undefined
    1188:	73694c6b 	.inst	0x73694c6b ; undefined
    118c:	70007374 	adr	x20, 1ffb <__module_entries_end-0x6005>
    1190:	65764578 	fnmla	z24.h, p1/m, z11.h, z22.h
    1194:	694c746e 	ldpsw	x14, x29, [x3, #96]
    1198:	74497473 	.inst	0x74497473 ; undefined
    119c:	70006d65 	adr	x5, 1f4b <__module_entries_end-0x60b5>
    11a0:	65724378 	fnmla	z24.h, p0/m, z27.h, z18.h
    11a4:	64657461 	.inst	0x64657461 ; undefined
    11a8:	6b736154 	.inst	0x6b736154 ; undefined
    11ac:	76727000 	.inst	0x76727000 ; undefined
    11b0:	63656843 	.inst	0x63656843 ; undefined
    11b4:	7361546b 	.inst	0x7361546b ; undefined
    11b8:	6157736b 	.inst	0x6157736b ; undefined
    11bc:	6e697469 	uabd	v9.8h, v3.8h, v9.8h
    11c0:	72655467 	.inst	0x72655467 ; undefined
    11c4:	616e696d 	.inst	0x616e696d ; undefined
    11c8:	6e6f6974 	.inst	0x6e6f6974 ; undefined
    11cc:	43787500 	.inst	0x43787500 ; undefined
    11d0:	65727275 	fnmls	z21.h, p4/m, z19.h, z18.h
    11d4:	6142746e 	.inst	0x6142746e ; undefined
    11d8:	72506573 	.inst	0x72506573 ; undefined
    11dc:	69726f69 	ldpsw	x9, x27, [x27, #-112]
    11e0:	78007974 	sttrh	w20, [x11, #7]
    11e4:	6c656959 	ldnp	d25, d26, [x10, #-432]
    11e8:	6e655064 	uabal2	v4.4s, v3.8h, v5.8h
    11ec:	676e6964 	.inst	0x676e6964 ; undefined
    11f0:	6e655000 	uabal2	v0.4s, v0.8h, v5.8h
    11f4:	676e6964 	.inst	0x676e6964 ; undefined
    11f8:	65500031 	fadd	z17.h, z1.h, z16.h
    11fc:	6e69646e 	umax	v14.8h, v3.8h, v9.8h
    1200:	44003267 	.inst	0x44003267 ; undefined
    1204:	62617369 	.inst	0x62617369 ; undefined
    1208:	6142656c 	.inst	0x6142656c ; undefined
    120c:	00636973 	.inst	0x00636973 ; undefined
    1210:	324d4342 	.inst	0x324d4342 ; undefined
    1214:	5f353338 	.inst	0x5f353338 ; undefined
    1218:	43544e49 	.inst	0x43544e49 ; undefined
    121c:	4745525f 	.inst	0x4745525f ; undefined
    1220:	49460053 	.inst	0x49460053 ; undefined
    1224:	72744351 	.inst	0x72744351 ; undefined
    1228:	7269006c 	.inst	0x7269006c ; undefined
    122c:	67655271 	.inst	0x67655271 ; undefined
    1230:	65747369 	fnmls	z9.h, p4/m, z27.h, z20.h
    1234:	72690072 	.inst	0x72690072 ; undefined
    1238:	6f6c4271 	mls	v17.8h, v19.8h, v12.h[2]
    123c:	75006b63 	.inst	0x75006b63 ; undefined
    1240:	73614d6c 	.inst	0x73614d6c ; undefined
    1244:	5364656b 	.inst	0x5364656b ; undefined
    1248:	75746174 	.inst	0x75746174 ; undefined
    124c:	61620073 	.inst	0x61620073 ; undefined
    1250:	65006573 	.inst	0x65006573 ; undefined
    1254:	6c62616e 	ldnp	d14, d24, [x11, #-480]
    1258:	70006465 	adr	x5, 1ee7 <__module_entries_end-0x6119>
    125c:	69646e65 	ldpsw	x5, x27, [x19, #-224]
    1260:	6800676e 	.inst	0x6800676e ; undefined
    1264:	6c646e61 	ldnp	d1, d27, [x19, #-448]
    1268:	6e615265 	uabal2	v5.4s, v19.8h, v1.8h
    126c:	69006567 	.inst	0x69006567 ; undefined
    1270:	6e557172 	.inst	0x6e557172 ; undefined
    1274:	636f6c62 	.inst	0x636f6c62 ; undefined
    1278:	616d006b 	.inst	0x616d006b ; undefined
    127c:	69006b73 	.inst	0x69006b73 ; undefined
    1280:	69447172 	ldpsw	x18, x28, [x11, #32]
    1284:	6c626173 	ldnp	d19, d24, [x11, #-480]
    1288:	66700065 	.inst	0x66700065 ; undefined
    128c:	6e61486e 	uqxtn2	v14.8h, v3.4s
    1290:	72656c64 	.inst	0x72656c64 ; undefined
    1294:	6f682f00 	.inst	0x6f682f00 ; undefined
    1298:	632f656d 	.inst	0x632f656d ; undefined
    129c:	2f646969 	umlsl	v9.4s, v11.4h, v4.h[6]
    12a0:	6ca9c354 	stp	d20, d16, [x26], #-360
    12a4:	6863a9c3 	.inst	0x6863a9c3 ; undefined
    12a8:	65677261 	fnmls	z1.h, p4/m, z19.h, z7.h
    12ac:	746e656d 	.inst	0x746e656d ; undefined
    12b0:	61522f73 	.inst	0x61522f73 ; undefined
    12b4:	65627073 	fnmls	z19.h, p4/m, z3.h, z2.h
    12b8:	50797272 	adr	x18, f4106 <_freertos_vector_table+0xdd2de>
    12bc:	462d3369 	.inst	0x462d3369 ; undefined
    12c0:	52656572 	.inst	0x52656572 ; undefined
    12c4:	2f534f54 	.inst	0x2f534f54 ; undefined
    12c8:	6f6d6544 	sqshlu	v4.2d, v10.2d, #45
    12cc:	6972442f 	ldpsw	x15, x17, [x1, #-112]
    12d0:	73726576 	.inst	0x73726576 ; undefined
    12d4:	7172692f 	subs	w15, w9, #0xc9a, lsl #12
    12d8:	7000632e 	adr	x14, 1f3f <__module_entries_end-0x60c1>
    12dc:	61726150 	.inst	0x61726150 ; undefined
    12e0:	6944006d 	ldpsw	x13, x0, [x3, #32]
    12e4:	6c626173 	ldnp	d19, d24, [x11, #-480]
    12e8:	45003265 	.inst	0x45003265 ; undefined
    12ec:	6c62616e 	ldnp	d14, d24, [x11, #-480]
    12f0:	44003265 	.inst	0x44003265 ; undefined
    12f4:	62617369 	.inst	0x62617369 ; undefined
    12f8:	0031656c 	.inst	0x0031656c ; NYI
    12fc:	65565f67 	fcmge	p7.h, p7/z, z27.h, z22.h
    1300:	726f7463 	.inst	0x726f7463 ; undefined
    1304:	6c626154 	ldnp	d20, d24, [x10, #-480]
    1308:	72690065 	.inst	0x72690065 ; undefined
    130c:	616e4571 	.inst	0x616e4571 ; undefined
    1310:	00656c62 	.inst	0x00656c62 ; undefined
    1314:	495f4e46 	.inst	0x495f4e46 ; undefined
    1318:	5245544e 	.inst	0x5245544e ; undefined
    131c:	54505552 	.inst	0x54505552 ; undefined
    1320:	4e41485f 	.inst	0x4e41485f ; undefined
    1324:	52454c44 	.inst	0x52454c44 ; undefined
    1328:	544e4900 	b.eq	9dc48 <_freertos_vector_table+0x86e20>  // b.none
    132c:	55525245 	.inst	0x55525245 ; undefined
    1330:	565f5450 	.inst	0x565f5450 ; undefined
    1334:	4f544345 	.inst	0x4f544345 ; undefined
    1338:	72690052 	.inst	0x72690052 ; undefined
    133c:	6e614871 	uqxtn2	v17.8h, v3.4s
    1340:	72656c64 	.inst	0x72656c64 ; undefined
    1344:	65527000 	fcmeq	p0.h, p4/z, z0.h, z18.h
    1348:	49007367 	.inst	0x49007367 ; undefined
    134c:	61425152 	.inst	0x61425152 ; undefined
    1350:	00636973 	.inst	0x00636973 ; undefined
    1354:	62616e45 	.inst	0x62616e45 ; undefined
    1358:	6142656c 	.inst	0x6142656c ; undefined
    135c:	00636973 	.inst	0x00636973 ; undefined
    1360:	62616e45 	.inst	0x62616e45 ; undefined
    1364:	0031656c 	.inst	0x0031656c ; NYI
    1368:	45535047 	.inst	0x45535047 ; undefined
    136c:	43420054 	.inst	0x43420054 ; undefined
    1370:	3338324d 	.inst	0x3338324d ; undefined
    1374:	50475f35 	adr	x21, 8ff5a <_freertos_vector_table+0x79132>
    1378:	525f4f49 	.inst	0x525f4f49 ; undefined
    137c:	00534745 	.inst	0x00534745 ; undefined
    1380:	6d657469 	ldp	d9, d29, [x3, #-432]
    1384:	6e697000 	uabdl2	v0.4s, v0.8h, v9.8h
    1388:	006d754e 	.inst	0x006d754e ; undefined
    138c:	64616552 	.inst	0x64616552 ; undefined
    1390:	6f697047 	fcmla	v7.8h, v2.8h, v9.h[1], #270
    1394:	74655300 	.inst	0x74655300 ; undefined
    1398:	6f697047 	fcmla	v7.8h, v2.8h, v9.h[1], #270
    139c:	65726944 	fnmls	z4.h, p2/m, z10.h, z18.h
    13a0:	6f697463 	uqshl	v3.2d, v3.2d, #41
    13a4:	5047006e 	adr	x14, 8f3b2 <_freertos_vector_table+0x7858a>
    13a8:	00524c43 	.inst	0x00524c43 ; undefined
    13ac:	45485047 	.inst	0x45485047 ; undefined
    13b0:	4544004e 	.inst	0x4544004e ; undefined
    13b4:	54434554 	.inst	0x54434554 ; undefined
    13b8:	5349525f 	.inst	0x5349525f ; undefined
    13bc:	5f474e49 	.inst	0x5f474e49 ; undefined
    13c0:	4e595341 	.inst	0x4e595341 ; undefined
    13c4:	45440043 	.inst	0x45440043 ; undefined
    13c8:	54434554 	.inst	0x54434554 ; undefined
    13cc:	4c41465f 	.inst	0x4c41465f ; undefined
    13d0:	474e494c 	.inst	0x474e494c ; undefined
    13d4:	5953415f 	.inst	0x5953415f ; undefined
    13d8:	4300434e 	.inst	0x4300434e ; undefined
    13dc:	7261656c 	.inst	0x7261656c ; undefined
    13e0:	6f697047 	fcmla	v7.8h, v2.8h, v9.h[1], #270
    13e4:	65746e49 	fnmls	z9.h, p3/m, z18.h, z20.h
    13e8:	70757272 	adr	x18, ec237 <_freertos_vector_table+0xd540f>
    13ec:	50470074 	adr	x20, 8f3fa <_freertos_vector_table+0x785d2>
    13f0:	4e454641 	.inst	0x4e454641 ; undefined
    13f4:	616e4500 	.inst	0x616e4500 ; undefined
    13f8:	47656c62 	.inst	0x47656c62 ; undefined
    13fc:	446f6970 	.inst	0x446f6970 ; undefined
    1400:	63657465 	.inst	0x63657465 ; undefined
    1404:	50470074 	adr	x20, 8f412 <_freertos_vector_table+0x785ea>
    1408:	00445550 	.inst	0x00445550 ; undefined
    140c:	45544544 	.inst	0x45544544 ; undefined
    1410:	545f5443 	b.cc	bfe98 <_freertos_vector_table+0xa9070>  // b.lo, b.ul, b.last
    1414:	00455059 	.inst	0x00455059 ; undefined
    1418:	566e6970 	.inst	0x566e6970 ; undefined
    141c:	52006c61 	eor	w1, w3, #0xfffffff
    1420:	72657365 	.inst	0x72657365 ; undefined
    1424:	5f646576 	.inst	0x5f646576 ; undefined
    1428:	50470041 	adr	x1, 8f432 <_freertos_vector_table+0x7860a>
    142c:	4e455241 	.inst	0x4e455241 ; undefined
    1430:	74655300 	.inst	0x74655300 ; undefined
    1434:	6f697047 	fcmla	v7.8h, v2.8h, v9.h[1], #270
    1438:	636e7546 	.inst	0x636e7546 ; undefined
    143c:	6e6f6974 	.inst	0x6e6f6974 ; undefined
    1440:	49504700 	.inst	0x49504700 ; undefined
    1444:	49445f4f 	.inst	0x49445f4f ; undefined
    1448:	50470052 	adr	x18, 8f452 <_freertos_vector_table+0x7862a>
    144c:	004e4546 	.inst	0x004e4546 ; undefined
    1450:	4f495047 	.inst	0x4f495047 ; undefined
    1454:	004e495f 	.inst	0x004e495f ; undefined
    1458:	45544544 	.inst	0x45544544 ; undefined
    145c:	485f5443 	ldxrh	w3, [x2]
    1460:	00484749 	.inst	0x00484749 ; undefined
    1464:	45544544 	.inst	0x45544544 ; undefined
    1468:	4e5f5443 	.inst	0x4e5f5443 ; undefined
    146c:	00454e4f 	.inst	0x00454e4f ; undefined
    1470:	454c5047 	.inst	0x454c5047 ; undefined
    1474:	5047004e 	adr	x14, 8f47e <_freertos_vector_table+0x78656>
    1478:	43445550 	.inst	0x43445550 ; undefined
    147c:	44004b4c 	.inst	0x44004b4c ; undefined
    1480:	43455445 	.inst	0x43455445 ; undefined
    1484:	49525f54 	.inst	0x49525f54 ; undefined
    1488:	474e4953 	.inst	0x474e4953 ; undefined
    148c:	54454400 	b.eq	8bd0c <_freertos_vector_table+0x74ee4>  // b.none
    1490:	5f544345 	.inst	0x5f544345 ; undefined
    1494:	00574f4c 	.inst	0x00574f4c ; undefined
    1498:	454c5047 	.inst	0x454c5047 ; undefined
    149c:	75660056 	.inst	0x75660056 ; undefined
    14a0:	754e636e 	.inst	0x754e636e ; undefined
    14a4:	5047006d 	adr	x13, 8f4b2 <_freertos_vector_table+0x7868a>
    14a8:	004e4552 	.inst	0x004e4552 ; undefined
    14ac:	44455047 	.inst	0x44455047 ; undefined
    14b0:	69440053 	ldpsw	x19, x0, [x2, #32]
    14b4:	6c626173 	ldnp	d19, d24, [x11, #-480]
    14b8:	69704765 	ldpsw	x5, x17, [x27, #-128]
    14bc:	7465446f 	.inst	0x7465446f ; undefined
    14c0:	00746365 	.inst	0x00746365 ; undefined
    14c4:	7366666f 	.inst	0x7366666f ; undefined
    14c8:	47007465 	.inst	0x47007465 ; undefined
    14cc:	45534650 	.inst	0x45534650 ; undefined
    14d0:	6552004c 	fadd	z12.h, z2.h, z18.h
    14d4:	76726573 	.inst	0x76726573 ; undefined
    14d8:	315f6465 	adds	w5, w3, #0x7d9, lsl #12
    14dc:	73655200 	.inst	0x73655200 ; undefined
    14e0:	65767265 	fnmls	z5.h, p4/m, z19.h, z22.h
    14e4:	00325f64 	.inst	0x00325f64 ; NYI
    14e8:	65736552 	fnmls	z18.h, p1/m, z10.h, z19.h
    14ec:	64657672 	.inst	0x64657672 ; undefined
    14f0:	5200335f 	eor	wsp, w26, #0x1fff
    14f4:	72657365 	.inst	0x72657365 ; undefined
    14f8:	5f646576 	.inst	0x5f646576 ; undefined
    14fc:	65520034 	fadd	z20.h, z1.h, z18.h
    1500:	76726573 	.inst	0x76726573 ; undefined
    1504:	355f6465 	cbnz	w5, c0190 <_freertos_vector_table+0xa9368>
    1508:	73655200 	.inst	0x73655200 ; undefined
    150c:	65767265 	fnmls	z5.h, p4/m, z19.h, z22.h
    1510:	00365f64 	.inst	0x00365f64 ; NYI
    1514:	65736552 	fnmls	z18.h, p1/m, z10.h, z19.h
    1518:	64657672 	.inst	0x64657672 ; undefined
    151c:	5200375f 	eor	wsp, w26, #0x3fff
    1520:	72657365 	.inst	0x72657365 ; undefined
    1524:	5f646576 	.inst	0x5f646576 ; undefined
    1528:	65520038 	fadd	z24.h, z1.h, z18.h
    152c:	76726573 	.inst	0x76726573 ; undefined
    1530:	395f6465 	ldrb	w5, [x3, #2009]
    1534:	54454400 	b.eq	8bdb4 <_freertos_vector_table+0x74f8c>  // b.none
    1538:	5f544345 	.inst	0x5f544345 ; undefined
    153c:	4c4c4146 	.inst	0x4c4c4146 ; undefined
    1540:	00474e49 	.inst	0x00474e49 ; undefined
    1544:	47746553 	.inst	0x47746553 ; undefined
    1548:	006f6970 	.inst	0x006f6970 ; undefined
    154c:	6d6f682f 	ldp	d15, d26, [x1, #-272]
    1550:	69632f65 	ldpsw	x5, x11, [x27, #-232]
    1554:	542f6469 	b.ls	601e0 <_freertos_vector_table+0x493b8>  // b.plast
    1558:	c36ca9c3 	.inst	0xc36ca9c3 ; undefined
    155c:	616863a9 	.inst	0x616863a9 ; undefined
    1560:	6d656772 	ldp	d18, d25, [x27, #-432]
    1564:	73746e65 	.inst	0x73746e65 ; undefined
    1568:	7361522f 	.inst	0x7361522f ; undefined
    156c:	72656270 	.inst	0x72656270 ; undefined
    1570:	69507972 	ldpsw	x18, x30, [x11, #128]
    1574:	72462d33 	.inst	0x72462d33 ; undefined
    1578:	54526565 	b.pl	a6224 <_freertos_vector_table+0x8f3fc>  // b.nfrst
    157c:	442f534f 	.inst	0x442f534f ; undefined
    1580:	2f6f6d65 	.inst	0x2f6f6d65 ; undefined
    1584:	76697244 	.inst	0x76697244 ; undefined
    1588:	2f737265 	.inst	0x2f737265 ; undefined
    158c:	6f697067 	fcmla	v7.8h, v3.8h, v9.h[1], #270
    1590:	5200632e 	eor	w14, w25, #0x1ffffff
    1594:	72657365 	.inst	0x72657365 ; undefined
    1598:	5f646576 	.inst	0x5f646576 ; undefined
    159c:	50470042 	adr	x2, 8f5a6 <_freertos_vector_table+0x7877e>
    15a0:	4f5f4f49 	.inst	0x4f5f4f49 ; undefined
    15a4:	5f005455 	.inst	0x5f005455 ; undefined
    15a8:	324d4342 	.inst	0x324d4342 ; undefined
    15ac:	5f353338 	.inst	0x5f353338 ; undefined
    15b0:	454d4954 	.inst	0x454d4954 ; undefined
    15b4:	45525f52 	.inst	0x45525f52 ; undefined
    15b8:	64005347 	.inst	0x64005347 ; undefined
    15bc:	796d6d75 	ldrh	w21, [x11, #5814]
    15c0:	746e6900 	.inst	0x746e6900 ; undefined
    15c4:	67655263 	.inst	0x67655263 ; undefined
    15c8:	64610073 	fmla	z19.h, z3.h, z1.h[4]
    15cc:	50007264 	adr	x4, 241a <__module_entries_end-0x5be6>
    15d0:	32335455 	orr	w21, w2, #0xffffe007
    15d4:	6d697400 	ldp	d0, d29, [x0, #-368]
    15d8:	65527265 	fcmeq	p5.h, p4/z, z19.h, z18.h
    15dc:	2f007367 	.inst	0x2f007367 ; undefined
    15e0:	656d6f68 	fnmls	z8.h, p3/m, z27.h, z13.h
    15e4:	6969632f 	ldpsw	x15, x24, [x25, #-184]
    15e8:	c3542f64 	.inst	0xc3542f64 ; undefined
    15ec:	a9c36ca9 	ldp	x9, x27, [x5, #48]!
    15f0:	72616863 	.inst	0x72616863 ; undefined
    15f4:	656d6567 	fnmls	z7.h, p1/m, z11.h, z13.h
    15f8:	2f73746e 	.inst	0x2f73746e ; undefined
    15fc:	70736152 	adr	x18, e8227 <_freertos_vector_table+0xd13ff>
    1600:	72726562 	.inst	0x72726562 ; undefined
    1604:	33695079 	.inst	0x33695079 ; undefined
    1608:	6572462d 	fnmla	z13.h, p1/m, z17.h, z18.h
    160c:	4f545265 	.inst	0x4f545265 ; undefined
    1610:	65442f53 	fmaxnmv	h19, p3, z26.h
    1614:	442f6f6d 	.inst	0x442f6f6d ; undefined
    1618:	65766972 	fnmls	z18.h, p2/m, z11.h, z22.h
    161c:	752f7372 	.inst	0x752f7372 ; undefined
    1620:	2e747261 	uabdl	v1.4s, v19.4h, v20.4h
    1624:	61750063 	.inst	0x61750063 ; undefined
    1628:	705f7472 	adr	x18, c04b7 <_freertos_vector_table+0xa968f>
    162c:	00737475 	.inst	0x00737475 ; undefined
    1630:	74726175 	.inst	0x74726175 ; undefined
    1634:	696e695f 	ldpsw	xzr, x26, [x10, #-144]
    1638:	45470074 	.inst	0x45470074 ; undefined
    163c:	00323354 	.inst	0x00323354 ; NYI
    1640:	74726175 	.inst	0x74726175 ; undefined
    1644:	6e65735f 	uabdl2	v31.4s, v26.8h, v5.8h
    1648:	61760064 	.inst	0x61760064 ; undefined
    164c:	0065756c 	.inst	0x0065756c ; undefined
    1650:	49767270 	.inst	0x49767270 ; undefined
    1654:	7265736e 	.inst	0x7265736e ; undefined
    1658:	6f6c4274 	mls	v20.8h, v19.8h, v12.h[2]
    165c:	6e496b63 	.inst	0x6e496b63 ; undefined
    1660:	72466f74 	.inst	0x72466f74 ; undefined
    1664:	694c6565 	ldpsw	x5, x25, [x11, #96]
    1668:	78007473 	strh	w19, [x3], #7
    166c:	74726f50 	.inst	0x74726f50 ; undefined
    1670:	46746547 	.inst	0x46746547 ; undefined
    1674:	48656572 	.inst	0x48656572 ; undefined
    1678:	53706165 	.inst	0x53706165 ; undefined
    167c:	00657a69 	.inst	0x00657a69 ; undefined
    1680:	4c425f41 	.inst	0x4c425f41 ; undefined
    1684:	5f4b434f 	.inst	0x5f4b434f ; undefined
    1688:	4b4e494c 	sub	w12, w10, w14, lsr #18
    168c:	76727000 	.inst	0x76727000 ; undefined
    1690:	70616548 	adr	x8, c433b <_freertos_vector_table+0xad513>
    1694:	74696e49 	.inst	0x74696e49 ; undefined
    1698:	42787000 	.inst	0x42787000 ; undefined
    169c:	6b636f6c 	.inst	0x6b636f6c ; undefined
    16a0:	4c787000 	.inst	0x4c787000 ; undefined
    16a4:	006b6e69 	.inst	0x006b6e69 ; undefined
    16a8:	6f507670 	uqshl	v16.2d, v19.2d, #16
    16ac:	614d7472 	.inst	0x614d7472 ; undefined
    16b0:	636f6c6c 	.inst	0x636f6c6c ; undefined
    16b4:	46787000 	.inst	0x46787000 ; undefined
    16b8:	74737269 	.inst	0x74737269 ; undefined
    16bc:	65657246 	fnmls	z6.h, p4/m, z18.h, z5.h
    16c0:	636f6c42 	.inst	0x636f6c42 ; undefined
    16c4:	5278006b 	.inst	0x5278006b ; undefined
    16c8:	5f534f54 	.inst	0x5f534f54 ; undefined
    16cc:	50414548 	adr	x8, 83f76 <_freertos_vector_table+0x6d14e>
    16d0:	48637500 	.inst	0x48637500 ; undefined
    16d4:	00706165 	.inst	0x00706165 ; undefined
    16d8:	75446c75 	.inst	0x75446c75 ; undefined
    16dc:	00796d6d 	.inst	0x00796d6d ; undefined
    16e0:	6f6c4278 	mls	v24.8h, v19.8h, v12.h[2]
    16e4:	69536b63 	ldpsw	x3, x26, [x27, #152]
    16e8:	7800657a 	strh	w26, [x11], #6
    16ec:	70616548 	adr	x8, c4397 <_freertos_vector_table+0xad56f>
    16f0:	45787000 	.inst	0x45787000 ; undefined
    16f4:	7000646e 	adr	x14, 2383 <__module_entries_end-0x5c7d>
    16f8:	65725078 	fnmla	z24.h, p4/m, z3.h, z18.h
    16fc:	756f6976 	.inst	0x756f6976 ; undefined
    1700:	6f6c4273 	mls	v19.8h, v19.8h, v12.h[2]
    1704:	78006b63 	sttrh	w3, [x27, #6]
    1708:	61746f54 	.inst	0x61746f54 ; undefined
    170c:	6165486c 	.inst	0x6165486c ; undefined
    1710:	7a695370 	.inst	0x7a695370 ; undefined
    1714:	76700065 	.inst	0x76700065 ; undefined
    1718:	75746552 	.inst	0x75746552 ; undefined
    171c:	76006e72 	.inst	0x76006e72 ; undefined
    1720:	74726f50 	.inst	0x74726f50 ; undefined
    1724:	74696e49 	.inst	0x74696e49 ; undefined
    1728:	696c6169 	ldpsw	x9, x24, [x11, #-160]
    172c:	6c426573 	ldnp	d19, d25, [x11, #32]
    1730:	736b636f 	.inst	0x736b636f ; undefined
    1734:	61656800 	.inst	0x61656800 ; undefined
    1738:	52545370 	.inst	0x52545370 ; undefined
    173c:	5f544355 	.inst	0x5f544355 ; undefined
    1740:	455a4953 	.inst	0x455a4953 ; undefined
    1744:	74537800 	.inst	0x74537800 ; undefined
    1748:	00747261 	.inst	0x00747261 ; undefined
    174c:	6f6c4278 	mls	v24.8h, v19.8h, v12.h[2]
    1750:	694c6b63 	ldpsw	x3, x26, [x27, #96]
    1754:	61006b6e 	.inst	0x61006b6e ; undefined
    1758:	636f6c6c 	.inst	0x636f6c6c ; undefined
    175c:	64657461 	.inst	0x64657461 ; undefined
    1760:	61577800 	.inst	0x61577800 ; undefined
    1764:	6465746e 	.inst	0x6465746e ; undefined
    1768:	657a6953 	fnmls	z19.h, p2/m, z10.h, z26.h
    176c:	6f682f00 	.inst	0x6f682f00 ; undefined
    1770:	632f656d 	.inst	0x632f656d ; undefined
    1774:	2f646969 	umlsl	v9.4s, v11.4h, v4.h[6]
    1778:	6ca9c354 	stp	d20, d16, [x26], #-360
    177c:	6863a9c3 	.inst	0x6863a9c3 ; undefined
    1780:	65677261 	fnmls	z1.h, p4/m, z19.h, z7.h
    1784:	746e656d 	.inst	0x746e656d ; undefined
    1788:	61522f73 	.inst	0x61522f73 ; undefined
    178c:	65627073 	fnmls	z19.h, p4/m, z3.h, z2.h
    1790:	50797272 	adr	x18, f45de <_freertos_vector_table+0xdd7b6>
    1794:	462d3369 	.inst	0x462d3369 ; undefined
    1798:	52656572 	.inst	0x52656572 ; undefined
    179c:	2f534f54 	.inst	0x2f534f54 ; undefined
    17a0:	72756f53 	.inst	0x72756f53 ; undefined
    17a4:	702f6563 	adr	x3, 60453 <_freertos_vector_table+0x4962b>
    17a8:	6174726f 	.inst	0x6174726f ; undefined
    17ac:	2f656c62 	.inst	0x2f656c62 ; undefined
    17b0:	4d6d654d 	.inst	0x4d6d654d ; undefined
    17b4:	2f676e61 	.inst	0x2f676e61 ; undefined
    17b8:	70616568 	adr	x8, c4467 <_freertos_vector_table+0xad63f>
    17bc:	632e345f 	.inst	0x632e345f ; undefined
    17c0:	6f507600 	uqshl	v0.2d, v16.2d, #16
    17c4:	72467472 	.inst	0x72467472 ; undefined
    17c8:	78006565 	strh	w5, [x11], #6
    17cc:	65657246 	fnmls	z6.h, p4/m, z18.h, z5.h
    17d0:	65747942 	fnmls	z2.h, p6/m, z10.h, z20.h
    17d4:	6d655273 	ldp	d19, d20, [x19, #-432]
    17d8:	696e6961 	ldpsw	x1, x26, [x11, #-144]
    17dc:	7000676e 	adr	x14, 24cb <__module_entries_end-0x5b35>
    17e0:	77654e78 	.inst	0x77654e78 ; undefined
    17e4:	636f6c42 	.inst	0x636f6c42 ; undefined
    17e8:	6e694c6b 	uqshl	v11.8h, v3.8h, v9.8h
    17ec:	7870006b 	ldaddlh	w16, w11, [x3]
    17f0:	7478654e 	.inst	0x7478654e ; undefined
    17f4:	65657246 	fnmls	z6.h, p4/m, z18.h, z5.h
    17f8:	636f6c42 	.inst	0x636f6c42 ; undefined
    17fc:	7570006b 	.inst	0x7570006b ; undefined
    1800:	61654863 	.inst	0x61654863 ; undefined
    1804:	646e4570 	.inst	0x646e4570 ; undefined
    1808:	42787000 	.inst	0x42787000 ; undefined
    180c:	6b636f6c 	.inst	0x6b636f6c ; undefined
    1810:	6e496f54 	.inst	0x6e496f54 ; undefined
    1814:	74726573 	.inst	0x74726573 ; undefined
    1818:	69547600 	ldpsw	x0, x29, [x16, #160]
    181c:	53496b63 	.inst	0x53496b63 ; undefined
    1820:	6c750052 	ldnp	d18, d0, [x2, #-176]
    1824:	49434349 	.inst	0x49434349 ; undefined
    1828:	75005241 	.inst	0x75005241 ; undefined
    182c:	6d6f436c 	ldp	d12, d16, [x27, #-272]
    1830:	65726170 	fnmls	z16.h, p0/m, z11.h, z18.h
    1834:	6374614d 	.inst	0x6374614d ; undefined
    1838:	665f0068 	.inst	0x665f0068 ; undefined
    183c:	72656572 	.inst	0x72656572 ; undefined
    1840:	5f736f74 	.inst	0x5f736f74 ; undefined
    1844:	74636576 	.inst	0x74636576 ; undefined
    1848:	745f726f 	.inst	0x745f726f ; undefined
    184c:	656c6261 	fnmls	z1.h, p0/m, z19.h, z12.h
    1850:	6f682f00 	.inst	0x6f682f00 ; undefined
    1854:	632f656d 	.inst	0x632f656d ; undefined
    1858:	2f646969 	umlsl	v9.4s, v11.4h, v4.h[6]
    185c:	6ca9c354 	stp	d20, d16, [x26], #-360
    1860:	6863a9c3 	.inst	0x6863a9c3 ; undefined
    1864:	65677261 	fnmls	z1.h, p4/m, z19.h, z7.h
    1868:	746e656d 	.inst	0x746e656d ; undefined
    186c:	61522f73 	.inst	0x61522f73 ; undefined
    1870:	65627073 	fnmls	z19.h, p4/m, z3.h, z2.h
    1874:	50797272 	adr	x18, f46c2 <_freertos_vector_table+0xdd89a>
    1878:	462d3369 	.inst	0x462d3369 ; undefined
    187c:	52656572 	.inst	0x52656572 ; undefined
    1880:	2f534f54 	.inst	0x2f534f54 ; undefined
    1884:	6f6d6544 	sqshlu	v4.2d, v10.2d, #45
    1888:	6572462f 	fnmla	z15.h, p1/m, z17.h, z18.h
    188c:	4f545265 	.inst	0x4f545265 ; undefined
    1890:	52495f53 	.inst	0x52495f53 ; undefined
    1894:	00632e51 	.inst	0x00632e51 ; undefined
    1898:	70704176 	adr	x22, e20c7 <_freertos_vector_table+0xcb29f>
    189c:	6163696c 	.inst	0x6163696c ; undefined
    18a0:	6e6f6974 	.inst	0x6e6f6974 ; undefined
    18a4:	48515249 	ldxrh	w9, [x18]
    18a8:	6c646e61 	ldnp	d1, d27, [x19, #-448]
    18ac:	6e007265 	ext	v5.16b, v19.16b, v0.16b, #14
    18b0:	00515249 	.inst	0x00515249 ; undefined
    18b4:	6b736174 	.inst	0x6b736174 ; undefined
    18b8:	616d0032 	.inst	0x616d0032 ; undefined
    18bc:	74006e69 	.inst	0x74006e69 ; undefined
    18c0:	316b7361 	adds	w1, w27, #0xadc, lsl #12
    18c4:	6f682f00 	.inst	0x6f682f00 ; undefined
    18c8:	632f656d 	.inst	0x632f656d ; undefined
    18cc:	2f646969 	umlsl	v9.4s, v11.4h, v4.h[6]
    18d0:	6ca9c354 	stp	d20, d16, [x26], #-360
    18d4:	6863a9c3 	.inst	0x6863a9c3 ; undefined
    18d8:	65677261 	fnmls	z1.h, p4/m, z19.h, z7.h
    18dc:	746e656d 	.inst	0x746e656d ; undefined
    18e0:	61522f73 	.inst	0x61522f73 ; undefined
    18e4:	65627073 	fnmls	z19.h, p4/m, z3.h, z2.h
    18e8:	50797272 	adr	x18, f4736 <_freertos_vector_table+0xdd90e>
    18ec:	462d3369 	.inst	0x462d3369 ; undefined
    18f0:	52656572 	.inst	0x52656572 ; undefined
    18f4:	2f534f54 	.inst	0x2f534f54 ; undefined
    18f8:	6f6d6544 	sqshlu	v4.2d, v10.2d, #45
    18fc:	69616d2f 	ldpsw	x15, x27, [x9, #-248]
    1900:	00632e6e 	.inst	0x00632e6e ; undefined

Déassemblage de la section .comment :

0000000000000000 <.comment>:
   0:	3a434347 	ccmn	w26, w3, #0x7, mi  // mi = first
   4:	65442820 	fmaxnmv	h0, p2, z1.h
   8:	6e616962 	fcvtxn2	v2.4s, v11.2d
   c:	332e3620 	.inst	0x332e3620 ; undefined
  10:	312d302e 	adds	w14, w1, #0xb4c
  14:	36202930 	tbz	w16, #4, 538 <__module_entries_end-0x7ac8>
  18:	302e332e 	adr	x14, 5c67d <_freertos_vector_table+0x45855>
  1c:	31303220 	adds	w0, w17, #0xc0c
  20:	32333037 	orr	w23, w1, #0x3ffe000
  24:	Adresse 0x0000000000000024 hors intervalle.


Déassemblage de la section .debug_frame :

0000000000000000 <.debug_frame>:
       0:	0000000c 	.inst	0x0000000c ; undefined
       4:	ffffffff 	.inst	0xffffffff ; undefined
       8:	78040001 	sturh	w1, [x0, #64]
       c:	001f0c1e 	.inst	0x001f0c1e ; undefined
      10:	0000001c 	.word	0x0000001c
      14:	00000000 	.word	0x00000000
      18:	00010000 	.word	0x00010000
      1c:	00000000 	.word	0x00000000
      20:	00000438 	.word	0x00000438
      24:	00000000 	.word	0x00000000
      28:	03200e41 	.word	0x03200e41
      2c:	000e010c 	.word	0x000e010c
      30:	00000024 	.word	0x00000024
      34:	00000000 	.word	0x00000000
      38:	00010438 	.word	0x00010438
      3c:	00000000 	.word	0x00000000
      40:	00000060 	.word	0x00000060
      44:	00000000 	.word	0x00000000
      48:	9d200e41 	.word	0x9d200e41
      4c:	41039e04 	.word	0x41039e04
      50:	de551d0d 	.word	0xde551d0d
      54:	001f0cdd 	.word	0x001f0cdd
      58:	00000014 	.word	0x00000014
      5c:	00000000 	.word	0x00000000
      60:	00010498 	.word	0x00010498
      64:	00000000 	.word	0x00000000
      68:	00000008 	.word	0x00000008
      6c:	00000000 	.word	0x00000000
      70:	00000024 	.word	0x00000024
      74:	00000000 	.word	0x00000000
      78:	000104a0 	.word	0x000104a0
      7c:	00000000 	.word	0x00000000
      80:	00000040 	.word	0x00000040
      84:	00000000 	.word	0x00000000
      88:	9d100e41 	.word	0x9d100e41
      8c:	41019e02 	.word	0x41019e02
      90:	de4d1d0d 	.word	0xde4d1d0d
      94:	001f0cdd 	.word	0x001f0cdd
      98:	00000014 	.word	0x00000014
      9c:	00000000 	.word	0x00000000
      a0:	000104e0 	.word	0x000104e0
      a4:	00000000 	.word	0x00000000
      a8:	0000007c 	.word	0x0000007c
      ac:	00000000 	.word	0x00000000
      b0:	00000024 	.word	0x00000024
      b4:	00000000 	.word	0x00000000
      b8:	0001055c 	.word	0x0001055c
      bc:	00000000 	.word	0x00000000
      c0:	00000084 	.word	0x00000084
      c4:	00000000 	.word	0x00000000
      c8:	9d100e41 	.word	0x9d100e41
      cc:	41019e02 	.word	0x41019e02
      d0:	de5e1d0d 	.word	0xde5e1d0d
      d4:	001f0cdd 	.word	0x001f0cdd
      d8:	00000014 	.word	0x00000014
      dc:	00000000 	.word	0x00000000
      e0:	000105e0 	.word	0x000105e0
      e4:	00000000 	.word	0x00000000
      e8:	00000018 	.word	0x00000018
      ec:	00000000 	.word	0x00000000
      f0:	0000001c 	.word	0x0000001c
      f4:	00000000 	.word	0x00000000
      f8:	000105f8 	.word	0x000105f8
      fc:	00000000 	.word	0x00000000
     100:	00000050 	.word	0x00000050
     104:	00000000 	.word	0x00000000
     108:	52100e41 	.word	0x52100e41
     10c:	0000000e 	.word	0x0000000e
     110:	0000001c 	.word	0x0000001c
     114:	00000000 	.word	0x00000000
     118:	00010648 	.word	0x00010648
     11c:	00000000 	.word	0x00000000
     120:	00000064 	.word	0x00000064
     124:	00000000 	.word	0x00000000
     128:	57100e41 	.word	0x57100e41
     12c:	0000000e 	.word	0x0000000e
     130:	0000000c 	.word	0x0000000c
     134:	ffffffff 	.word	0xffffffff
     138:	78040001 	.word	0x78040001
     13c:	001f0c1e 	.word	0x001f0c1e
     140:	0000001c 	.word	0x0000001c
     144:	00000130 	.word	0x00000130
     148:	00010d58 	.word	0x00010d58
     14c:	00000000 	.word	0x00000000
     150:	00000058 	.word	0x00000058
     154:	00000000 	.word	0x00000000
     158:	54100e41 	.word	0x54100e41
     15c:	0000000e 	.word	0x0000000e
     160:	0000001c 	.word	0x0000001c
     164:	00000130 	.word	0x00000130
     168:	00010db0 	.word	0x00010db0
     16c:	00000000 	.word	0x00000000
     170:	0000001c 	.word	0x0000001c
     174:	00000000 	.word	0x00000000
     178:	45100e41 	.word	0x45100e41
     17c:	0000000e 	.word	0x0000000e
     180:	0000001c 	.word	0x0000001c
     184:	00000130 	.word	0x00000130
     188:	00010dcc 	.word	0x00010dcc
     18c:	00000000 	.word	0x00000000
     190:	0000007c 	.word	0x0000007c
     194:	00000000 	.word	0x00000000
     198:	5d200e41 	.word	0x5d200e41
     19c:	0000000e 	.word	0x0000000e
     1a0:	0000001c 	.word	0x0000001c
     1a4:	00000130 	.word	0x00000130
     1a8:	00010e48 	.word	0x00010e48
     1ac:	00000000 	.word	0x00000000
     1b0:	000000cc 	.word	0x000000cc
     1b4:	00000000 	.word	0x00000000
     1b8:	71200e41 	.word	0x71200e41
     1bc:	0000000e 	.word	0x0000000e
     1c0:	0000001c 	.word	0x0000001c
     1c4:	00000130 	.word	0x00000130
     1c8:	00010f14 	.word	0x00010f14
     1cc:	00000000 	.word	0x00000000
     1d0:	0000008c 	.word	0x0000008c
     1d4:	00000000 	.word	0x00000000
     1d8:	61200e41 	.word	0x61200e41
     1dc:	0000000e 	.word	0x0000000e
     1e0:	0000000c 	.word	0x0000000c
     1e4:	ffffffff 	.word	0xffffffff
     1e8:	78040001 	.word	0x78040001
     1ec:	001f0c1e 	.word	0x001f0c1e
     1f0:	00000024 	.word	0x00000024
     1f4:	000001e0 	.word	0x000001e0
     1f8:	00010fa0 	.word	0x00010fa0
     1fc:	00000000 	.word	0x00000000
     200:	00000100 	.word	0x00000100
     204:	00000000 	.word	0x00000000
     208:	9d300e41 	.word	0x9d300e41
     20c:	41059e06 	.word	0x41059e06
     210:	de7d1d0d 	.word	0xde7d1d0d
     214:	001f0cdd 	.word	0x001f0cdd
     218:	00000024 	.word	0x00000024
     21c:	000001e0 	.word	0x000001e0
     220:	000110a0 	.word	0x000110a0
     224:	00000000 	.word	0x00000000
     228:	00000084 	.word	0x00000084
     22c:	00000000 	.word	0x00000000
     230:	9d500e41 	.word	0x9d500e41
     234:	41099e0a 	.word	0x41099e0a
     238:	de5e1d0d 	.word	0xde5e1d0d
     23c:	001f0cdd 	.word	0x001f0cdd
     240:	00000024 	.word	0x00000024
     244:	000001e0 	.word	0x000001e0
     248:	00011124 	.word	0x00011124
     24c:	00000000 	.word	0x00000000
     250:	00000074 	.word	0x00000074
     254:	00000000 	.word	0x00000000
     258:	9d400e41 	.word	0x9d400e41
     25c:	41079e08 	.word	0x41079e08
     260:	de5a1d0d 	.word	0xde5a1d0d
     264:	001f0cdd 	.word	0x001f0cdd
     268:	0000002c 	.word	0x0000002c
     26c:	000001e0 	.word	0x000001e0
     270:	00011198 	.word	0x00011198
     274:	00000000 	.word	0x00000000
     278:	0000019c 	.word	0x0000019c
     27c:	00000000 	.word	0x00000000
     280:	9d600e41 	.word	0x9d600e41
     284:	410b9e0c 	.word	0x410b9e0c
     288:	64021d0d 	.word	0x64021d0d
     28c:	1f0cddde 	.word	0x1f0cddde
	...
     298:	00000024 	.word	0x00000024
     29c:	000001e0 	.word	0x000001e0
     2a0:	00011334 	.word	0x00011334
     2a4:	00000000 	.word	0x00000000
     2a8:	000000f0 	.word	0x000000f0
     2ac:	00000000 	.word	0x00000000
     2b0:	9d500e41 	.word	0x9d500e41
     2b4:	41099e0a 	.word	0x41099e0a
     2b8:	de791d0d 	.word	0xde791d0d
     2bc:	001f0cdd 	.word	0x001f0cdd
     2c0:	00000024 	.word	0x00000024
     2c4:	000001e0 	.word	0x000001e0
     2c8:	00011424 	.word	0x00011424
     2cc:	00000000 	.word	0x00000000
     2d0:	000000e4 	.word	0x000000e4
     2d4:	00000000 	.word	0x00000000
     2d8:	9d500e41 	.word	0x9d500e41
     2dc:	41099e0a 	.word	0x41099e0a
     2e0:	de761d0d 	.word	0xde761d0d
     2e4:	001f0cdd 	.word	0x001f0cdd
     2e8:	0000002c 	.word	0x0000002c
     2ec:	000001e0 	.word	0x000001e0
     2f0:	00011508 	.word	0x00011508
     2f4:	00000000 	.word	0x00000000
     2f8:	000001e4 	.word	0x000001e4
     2fc:	00000000 	.word	0x00000000
     300:	9d600e41 	.word	0x9d600e41
     304:	410b9e0c 	.word	0x410b9e0c
     308:	76021d0d 	.word	0x76021d0d
     30c:	1f0cddde 	.word	0x1f0cddde
	...
     318:	00000024 	.word	0x00000024
     31c:	000001e0 	.word	0x000001e0
     320:	000116ec 	.word	0x000116ec
     324:	00000000 	.word	0x00000000
     328:	000000ec 	.word	0x000000ec
     32c:	00000000 	.word	0x00000000
     330:	9d600e41 	.word	0x9d600e41
     334:	410b9e0c 	.word	0x410b9e0c
     338:	de781d0d 	.word	0xde781d0d
     33c:	001f0cdd 	.word	0x001f0cdd
     340:	00000024 	.word	0x00000024
     344:	000001e0 	.word	0x000001e0
     348:	000117d8 	.word	0x000117d8
     34c:	00000000 	.word	0x00000000
     350:	00000078 	.word	0x00000078
     354:	00000000 	.word	0x00000000
     358:	9d400e41 	.word	0x9d400e41
     35c:	41079e08 	.word	0x41079e08
     360:	de5b1d0d 	.word	0xde5b1d0d
     364:	001f0cdd 	.word	0x001f0cdd
     368:	00000024 	.word	0x00000024
     36c:	000001e0 	.word	0x000001e0
     370:	00011850 	.word	0x00011850
     374:	00000000 	.word	0x00000000
     378:	0000002c 	.word	0x0000002c
     37c:	00000000 	.word	0x00000000
     380:	9d300e41 	.word	0x9d300e41
     384:	41059e06 	.word	0x41059e06
     388:	de481d0d 	.word	0xde481d0d
     38c:	001f0cdd 	.word	0x001f0cdd
     390:	00000024 	.word	0x00000024
     394:	000001e0 	.word	0x000001e0
     398:	0001187c 	.word	0x0001187c
     39c:	00000000 	.word	0x00000000
     3a0:	00000040 	.word	0x00000040
     3a4:	00000000 	.word	0x00000000
     3a8:	9d300e41 	.word	0x9d300e41
     3ac:	41059e06 	.word	0x41059e06
     3b0:	de4d1d0d 	.word	0xde4d1d0d
     3b4:	001f0cdd 	.word	0x001f0cdd
     3b8:	0000001c 	.word	0x0000001c
     3bc:	000001e0 	.word	0x000001e0
     3c0:	000118bc 	.word	0x000118bc
     3c4:	00000000 	.word	0x00000000
     3c8:	00000020 	.word	0x00000020
     3cc:	00000000 	.word	0x00000000
     3d0:	46200e41 	.word	0x46200e41
     3d4:	0000000e 	.word	0x0000000e
     3d8:	00000024 	.word	0x00000024
     3dc:	000001e0 	.word	0x000001e0
     3e0:	000118dc 	.word	0x000118dc
     3e4:	00000000 	.word	0x00000000
     3e8:	00000028 	.word	0x00000028
     3ec:	00000000 	.word	0x00000000
     3f0:	9d300e41 	.word	0x9d300e41
     3f4:	41059e06 	.word	0x41059e06
     3f8:	de471d0d 	.word	0xde471d0d
     3fc:	001f0cdd 	.word	0x001f0cdd
     400:	0000002c 	.word	0x0000002c
     404:	000001e0 	.word	0x000001e0
     408:	00011904 	.word	0x00011904
     40c:	00000000 	.word	0x00000000
     410:	00000160 	.word	0x00000160
     414:	00000000 	.word	0x00000000
     418:	9d400e41 	.word	0x9d400e41
     41c:	41079e08 	.word	0x41079e08
     420:	55021d0d 	.word	0x55021d0d
     424:	1f0cddde 	.word	0x1f0cddde
	...
     430:	00000024 	.word	0x00000024
     434:	000001e0 	.word	0x000001e0
     438:	00011a64 	.word	0x00011a64
     43c:	00000000 	.word	0x00000000
     440:	0000008c 	.word	0x0000008c
     444:	00000000 	.word	0x00000000
     448:	9d200e41 	.word	0x9d200e41
     44c:	41039e04 	.word	0x41039e04
     450:	de601d0d 	.word	0xde601d0d
     454:	001f0cdd 	.word	0x001f0cdd
     458:	00000024 	.word	0x00000024
     45c:	000001e0 	.word	0x000001e0
     460:	00011af0 	.word	0x00011af0
     464:	00000000 	.word	0x00000000
     468:	000000f8 	.word	0x000000f8
     46c:	00000000 	.word	0x00000000
     470:	9d300e41 	.word	0x9d300e41
     474:	41059e06 	.word	0x41059e06
     478:	de7b1d0d 	.word	0xde7b1d0d
     47c:	001f0cdd 	.word	0x001f0cdd
     480:	00000024 	.word	0x00000024
     484:	000001e0 	.word	0x000001e0
     488:	00011be8 	.word	0x00011be8
     48c:	00000000 	.word	0x00000000
     490:	00000040 	.word	0x00000040
     494:	00000000 	.word	0x00000000
     498:	9d300e41 	.word	0x9d300e41
     49c:	41059e06 	.word	0x41059e06
     4a0:	de4d1d0d 	.word	0xde4d1d0d
     4a4:	001f0cdd 	.word	0x001f0cdd
     4a8:	0000001c 	.word	0x0000001c
     4ac:	000001e0 	.word	0x000001e0
     4b0:	00011c28 	.word	0x00011c28
     4b4:	00000000 	.word	0x00000000
     4b8:	00000034 	.word	0x00000034
     4bc:	00000000 	.word	0x00000000
     4c0:	4b200e41 	.word	0x4b200e41
     4c4:	0000000e 	.word	0x0000000e
     4c8:	00000024 	.word	0x00000024
     4cc:	000001e0 	.word	0x000001e0
     4d0:	00011c5c 	.word	0x00011c5c
     4d4:	00000000 	.word	0x00000000
     4d8:	00000048 	.word	0x00000048
     4dc:	00000000 	.word	0x00000000
     4e0:	9d300e41 	.word	0x9d300e41
     4e4:	41059e06 	.word	0x41059e06
     4e8:	de4f1d0d 	.word	0xde4f1d0d
     4ec:	001f0cdd 	.word	0x001f0cdd
     4f0:	0000001c 	.word	0x0000001c
     4f4:	000001e0 	.word	0x000001e0
     4f8:	00011ca4 	.word	0x00011ca4
     4fc:	00000000 	.word	0x00000000
     500:	0000003c 	.word	0x0000003c
     504:	00000000 	.word	0x00000000
     508:	4d200e41 	.word	0x4d200e41
     50c:	0000000e 	.word	0x0000000e
     510:	0000000c 	.word	0x0000000c
     514:	ffffffff 	.word	0xffffffff
     518:	78040001 	.word	0x78040001
     51c:	001f0c1e 	.word	0x001f0c1e
     520:	00000024 	.word	0x00000024
     524:	00000510 	.word	0x00000510
     528:	00011ce0 	.word	0x00011ce0
     52c:	00000000 	.word	0x00000000
     530:	000000d0 	.word	0x000000d0
     534:	00000000 	.word	0x00000000
     538:	9d600e41 	.word	0x9d600e41
     53c:	410b9e0c 	.word	0x410b9e0c
     540:	de711d0d 	.word	0xde711d0d
     544:	001f0cdd 	.word	0x001f0cdd
     548:	0000002c 	.word	0x0000002c
     54c:	00000510 	.word	0x00000510
     550:	00011db0 	.word	0x00011db0
     554:	00000000 	.word	0x00000000
     558:	0000017c 	.word	0x0000017c
     55c:	00000000 	.word	0x00000000
     560:	9d600e41 	.word	0x9d600e41
     564:	410b9e0c 	.word	0x410b9e0c
     568:	5c021d0d 	.word	0x5c021d0d
     56c:	1f0cddde 	.word	0x1f0cddde
	...
     578:	0000002c 	.word	0x0000002c
     57c:	00000510 	.word	0x00000510
     580:	00011f2c 	.word	0x00011f2c
     584:	00000000 	.word	0x00000000
     588:	0000017c 	.word	0x0000017c
     58c:	00000000 	.word	0x00000000
     590:	9d200e41 	.word	0x9d200e41
     594:	41039e04 	.word	0x41039e04
     598:	5c021d0d 	.word	0x5c021d0d
     59c:	1f0cddde 	.word	0x1f0cddde
	...
     5a8:	0000002c 	.word	0x0000002c
     5ac:	00000510 	.word	0x00000510
     5b0:	000120a8 	.word	0x000120a8
     5b4:	00000000 	.word	0x00000000
     5b8:	00000198 	.word	0x00000198
     5bc:	00000000 	.word	0x00000000
     5c0:	9d300e41 	.word	0x9d300e41
     5c4:	41059e06 	.word	0x41059e06
     5c8:	63021d0d 	.word	0x63021d0d
     5cc:	1f0cddde 	.word	0x1f0cddde
	...
     5d8:	00000024 	.word	0x00000024
     5dc:	00000510 	.word	0x00000510
     5e0:	00012240 	.word	0x00012240
     5e4:	00000000 	.word	0x00000000
     5e8:	000000fc 	.word	0x000000fc
     5ec:	00000000 	.word	0x00000000
     5f0:	9d400e41 	.word	0x9d400e41
     5f4:	41079e08 	.word	0x41079e08
     5f8:	de7c1d0d 	.word	0xde7c1d0d
     5fc:	001f0cdd 	.word	0x001f0cdd
     600:	00000024 	.word	0x00000024
     604:	00000510 	.word	0x00000510
     608:	0001233c 	.word	0x0001233c
     60c:	00000000 	.word	0x00000000
     610:	00000050 	.word	0x00000050
     614:	00000000 	.word	0x00000000
     618:	9d300e41 	.word	0x9d300e41
     61c:	41059e06 	.word	0x41059e06
     620:	de511d0d 	.word	0xde511d0d
     624:	001f0cdd 	.word	0x001f0cdd
     628:	00000024 	.word	0x00000024
     62c:	00000510 	.word	0x00000510
     630:	0001238c 	.word	0x0001238c
     634:	00000000 	.word	0x00000000
     638:	00000050 	.word	0x00000050
     63c:	00000000 	.word	0x00000000
     640:	9d300e41 	.word	0x9d300e41
     644:	41059e06 	.word	0x41059e06
     648:	de511d0d 	.word	0xde511d0d
     64c:	001f0cdd 	.word	0x001f0cdd
     650:	00000024 	.word	0x00000024
     654:	00000510 	.word	0x00000510
     658:	000123dc 	.word	0x000123dc
     65c:	00000000 	.word	0x00000000
     660:	00000058 	.word	0x00000058
     664:	00000000 	.word	0x00000000
     668:	9d400e41 	.word	0x9d400e41
     66c:	41079e08 	.word	0x41079e08
     670:	de531d0d 	.word	0xde531d0d
     674:	001f0cdd 	.word	0x001f0cdd
     678:	0000002c 	.word	0x0000002c
     67c:	00000510 	.word	0x00000510
     680:	00012434 	.word	0x00012434
     684:	00000000 	.word	0x00000000
     688:	0000022c 	.word	0x0000022c
     68c:	00000000 	.word	0x00000000
     690:	9d400e41 	.word	0x9d400e41
     694:	41079e08 	.word	0x41079e08
     698:	88021d0d 	.word	0x88021d0d
     69c:	1f0cddde 	.word	0x1f0cddde
	...
     6a8:	0000002c 	.word	0x0000002c
     6ac:	00000510 	.word	0x00000510
     6b0:	00012660 	.word	0x00012660
     6b4:	00000000 	.word	0x00000000
     6b8:	00000174 	.word	0x00000174
     6bc:	00000000 	.word	0x00000000
     6c0:	9d300e41 	.word	0x9d300e41
     6c4:	41059e06 	.word	0x41059e06
     6c8:	5a021d0d 	.word	0x5a021d0d
     6cc:	1f0cddde 	.word	0x1f0cddde
	...
     6d8:	0000001c 	.word	0x0000001c
     6dc:	00000510 	.word	0x00000510
     6e0:	000127d4 	.word	0x000127d4
     6e4:	00000000 	.word	0x00000000
     6e8:	00000090 	.word	0x00000090
     6ec:	00000000 	.word	0x00000000
     6f0:	62200e41 	.word	0x62200e41
     6f4:	0000000e 	.word	0x0000000e
     6f8:	00000024 	.word	0x00000024
     6fc:	00000510 	.word	0x00000510
     700:	00012864 	.word	0x00012864
     704:	00000000 	.word	0x00000000
     708:	000000f4 	.word	0x000000f4
     70c:	00000000 	.word	0x00000000
     710:	9d300e41 	.word	0x9d300e41
     714:	41059e06 	.word	0x41059e06
     718:	de7a1d0d 	.word	0xde7a1d0d
     71c:	001f0cdd 	.word	0x001f0cdd
     720:	0000002c 	.word	0x0000002c
     724:	00000510 	.word	0x00000510
     728:	00012958 	.word	0x00012958
     72c:	00000000 	.word	0x00000000
     730:	0000010c 	.word	0x0000010c
     734:	00000000 	.word	0x00000000
     738:	9d400e41 	.word	0x9d400e41
     73c:	41079e08 	.word	0x41079e08
     740:	40021d0d 	.word	0x40021d0d
     744:	1f0cddde 	.word	0x1f0cddde
	...
     750:	00000024 	.word	0x00000024
     754:	00000510 	.word	0x00000510
     758:	00012a64 	.word	0x00012a64
     75c:	00000000 	.word	0x00000000
     760:	0000008c 	.word	0x0000008c
     764:	00000000 	.word	0x00000000
     768:	9d200e41 	.word	0x9d200e41
     76c:	41039e04 	.word	0x41039e04
     770:	de601d0d 	.word	0xde601d0d
     774:	001f0cdd 	.word	0x001f0cdd
     778:	00000024 	.word	0x00000024
     77c:	00000510 	.word	0x00000510
     780:	00012af0 	.word	0x00012af0
     784:	00000000 	.word	0x00000000
     788:	00000030 	.word	0x00000030
     78c:	00000000 	.word	0x00000000
     790:	9d100e41 	.word	0x9d100e41
     794:	41019e02 	.word	0x41019e02
     798:	de491d0d 	.word	0xde491d0d
     79c:	001f0cdd 	.word	0x001f0cdd
     7a0:	00000014 	.word	0x00000014
     7a4:	00000510 	.word	0x00000510
     7a8:	00012b20 	.word	0x00012b20
     7ac:	00000000 	.word	0x00000000
     7b0:	00000024 	.word	0x00000024
     7b4:	00000000 	.word	0x00000000
     7b8:	0000002c 	.word	0x0000002c
     7bc:	00000510 	.word	0x00000510
     7c0:	00012b44 	.word	0x00012b44
     7c4:	00000000 	.word	0x00000000
     7c8:	000001d0 	.word	0x000001d0
     7cc:	00000000 	.word	0x00000000
     7d0:	9d300e41 	.word	0x9d300e41
     7d4:	41059e06 	.word	0x41059e06
     7d8:	71021d0d 	.word	0x71021d0d
     7dc:	1f0cddde 	.word	0x1f0cddde
	...
     7e8:	0000001c 	.word	0x0000001c
     7ec:	00000510 	.word	0x00000510
     7f0:	00012d14 	.word	0x00012d14
     7f4:	00000000 	.word	0x00000000
     7f8:	00000020 	.word	0x00000020
     7fc:	00000000 	.word	0x00000000
     800:	46100e41 	.word	0x46100e41
     804:	0000000e 	.word	0x0000000e
     808:	0000001c 	.word	0x0000001c
     80c:	00000510 	.word	0x00000510
     810:	00012d34 	.word	0x00012d34
     814:	00000000 	.word	0x00000000
     818:	00000024 	.word	0x00000024
     81c:	00000000 	.word	0x00000000
     820:	47100e41 	.word	0x47100e41
     824:	0000000e 	.word	0x0000000e
     828:	00000014 	.word	0x00000014
     82c:	00000510 	.word	0x00000510
     830:	00012d58 	.word	0x00012d58
     834:	00000000 	.word	0x00000000
     838:	00000010 	.word	0x00000010
     83c:	00000000 	.word	0x00000000
     840:	0000001c 	.word	0x0000001c
     844:	00000510 	.word	0x00000510
     848:	00012d68 	.word	0x00012d68
     84c:	00000000 	.word	0x00000000
     850:	0000003c 	.word	0x0000003c
     854:	00000000 	.word	0x00000000
     858:	4d200e41 	.word	0x4d200e41
     85c:	0000000e 	.word	0x0000000e
     860:	0000002c 	.word	0x0000002c
     864:	00000510 	.word	0x00000510
     868:	00012da4 	.word	0x00012da4
     86c:	00000000 	.word	0x00000000
     870:	0000028c 	.word	0x0000028c
     874:	00000000 	.word	0x00000000
     878:	9d400e41 	.word	0x9d400e41
     87c:	41079e08 	.word	0x41079e08
     880:	a0021d0d 	.word	0xa0021d0d
     884:	1f0cddde 	.word	0x1f0cddde
	...
     890:	00000024 	.word	0x00000024
     894:	00000510 	.word	0x00000510
     898:	00013030 	.word	0x00013030
     89c:	00000000 	.word	0x00000000
     8a0:	00000058 	.word	0x00000058
     8a4:	00000000 	.word	0x00000000
     8a8:	9d300e41 	.word	0x9d300e41
     8ac:	41059e06 	.word	0x41059e06
     8b0:	de531d0d 	.word	0xde531d0d
     8b4:	001f0cdd 	.word	0x001f0cdd
     8b8:	00000024 	.word	0x00000024
     8bc:	00000510 	.word	0x00000510
     8c0:	00013088 	.word	0x00013088
     8c4:	00000000 	.word	0x00000000
     8c8:	00000054 	.word	0x00000054
     8cc:	00000000 	.word	0x00000000
     8d0:	9d300e41 	.word	0x9d300e41
     8d4:	41059e06 	.word	0x41059e06
     8d8:	de521d0d 	.word	0xde521d0d
     8dc:	001f0cdd 	.word	0x001f0cdd
     8e0:	00000024 	.word	0x00000024
     8e4:	00000510 	.word	0x00000510
     8e8:	000130dc 	.word	0x000130dc
     8ec:	00000000 	.word	0x00000000
     8f0:	00000070 	.word	0x00000070
     8f4:	00000000 	.word	0x00000000
     8f8:	9d300e41 	.word	0x9d300e41
     8fc:	41059e06 	.word	0x41059e06
     900:	de591d0d 	.word	0xde591d0d
     904:	001f0cdd 	.word	0x001f0cdd
     908:	0000001c 	.word	0x0000001c
     90c:	00000510 	.word	0x00000510
     910:	0001314c 	.word	0x0001314c
     914:	00000000 	.word	0x00000000
     918:	000000e0 	.word	0x000000e0
     91c:	00000000 	.word	0x00000000
     920:	76100e41 	.word	0x76100e41
     924:	0000000e 	.word	0x0000000e
     928:	00000024 	.word	0x00000024
     92c:	00000510 	.word	0x00000510
     930:	0001322c 	.word	0x0001322c
     934:	00000000 	.word	0x00000000
     938:	00000044 	.word	0x00000044
     93c:	00000000 	.word	0x00000000
     940:	9d200e41 	.word	0x9d200e41
     944:	41039e04 	.word	0x41039e04
     948:	de4e1d0d 	.word	0xde4e1d0d
     94c:	001f0cdd 	.word	0x001f0cdd
     950:	00000024 	.word	0x00000024
     954:	00000510 	.word	0x00000510
     958:	00013270 	.word	0x00013270
     95c:	00000000 	.word	0x00000000
     960:	00000060 	.word	0x00000060
     964:	00000000 	.word	0x00000000
     968:	9d300e41 	.word	0x9d300e41
     96c:	41059e06 	.word	0x41059e06
     970:	de551d0d 	.word	0xde551d0d
     974:	001f0cdd 	.word	0x001f0cdd
     978:	0000002c 	.word	0x0000002c
     97c:	00000510 	.word	0x00000510
     980:	000132d0 	.word	0x000132d0
     984:	00000000 	.word	0x00000000
     988:	00000114 	.word	0x00000114
     98c:	00000000 	.word	0x00000000
     990:	9d300e41 	.word	0x9d300e41
     994:	41059e06 	.word	0x41059e06
     998:	42021d0d 	.word	0x42021d0d
     99c:	1f0cddde 	.word	0x1f0cddde
	...
     9a8:	00000024 	.word	0x00000024
     9ac:	00000510 	.word	0x00000510
     9b0:	000133e4 	.word	0x000133e4
     9b4:	00000000 	.word	0x00000000
     9b8:	000000f4 	.word	0x000000f4
     9bc:	00000000 	.word	0x00000000
     9c0:	9d300e41 	.word	0x9d300e41
     9c4:	41059e06 	.word	0x41059e06
     9c8:	de7a1d0d 	.word	0xde7a1d0d
     9cc:	001f0cdd 	.word	0x001f0cdd
     9d0:	0000001c 	.word	0x0000001c
     9d4:	00000510 	.word	0x00000510
     9d8:	000134d8 	.word	0x000134d8
     9dc:	00000000 	.word	0x00000000
     9e0:	0000003c 	.word	0x0000003c
     9e4:	00000000 	.word	0x00000000
     9e8:	4d100e41 	.word	0x4d100e41
     9ec:	0000000e 	.word	0x0000000e
     9f0:	00000024 	.word	0x00000024
     9f4:	00000510 	.word	0x00000510
     9f8:	00013514 	.word	0x00013514
     9fc:	00000000 	.word	0x00000000
     a00:	000000e4 	.word	0x000000e4
     a04:	00000000 	.word	0x00000000
     a08:	9d300e41 	.word	0x9d300e41
     a0c:	41059e06 	.word	0x41059e06
     a10:	de761d0d 	.word	0xde761d0d
     a14:	001f0cdd 	.word	0x001f0cdd
     a18:	00000014 	.word	0x00000014
     a1c:	00000510 	.word	0x00000510
     a20:	000135f8 	.word	0x000135f8
     a24:	00000000 	.word	0x00000000
     a28:	00000018 	.word	0x00000018
     a2c:	00000000 	.word	0x00000000
     a30:	00000024 	.word	0x00000024
     a34:	00000510 	.word	0x00000510
     a38:	00013610 	.word	0x00013610
     a3c:	00000000 	.word	0x00000000
     a40:	0000002c 	.word	0x0000002c
     a44:	00000000 	.word	0x00000000
     a48:	9d200e41 	.word	0x9d200e41
     a4c:	41039e04 	.word	0x41039e04
     a50:	00001d0d 	.word	0x00001d0d
     a54:	00000000 	.word	0x00000000
     a58:	00000024 	.word	0x00000024
     a5c:	00000510 	.word	0x00000510
     a60:	0001363c 	.word	0x0001363c
     a64:	00000000 	.word	0x00000000
     a68:	000000bc 	.word	0x000000bc
     a6c:	00000000 	.word	0x00000000
     a70:	9d200e41 	.word	0x9d200e41
     a74:	41039e04 	.word	0x41039e04
     a78:	de6c1d0d 	.word	0xde6c1d0d
     a7c:	001f0cdd 	.word	0x001f0cdd
     a80:	00000024 	.word	0x00000024
     a84:	00000510 	.word	0x00000510
     a88:	000136f8 	.word	0x000136f8
     a8c:	00000000 	.word	0x00000000
     a90:	000000c8 	.word	0x000000c8
     a94:	00000000 	.word	0x00000000
     a98:	9d200e41 	.word	0x9d200e41
     a9c:	41039e04 	.word	0x41039e04
     aa0:	de6f1d0d 	.word	0xde6f1d0d
     aa4:	001f0cdd 	.word	0x001f0cdd
     aa8:	00000024 	.word	0x00000024
     aac:	00000510 	.word	0x00000510
     ab0:	000137c0 	.word	0x000137c0
     ab4:	00000000 	.word	0x00000000
     ab8:	0000002c 	.word	0x0000002c
     abc:	00000000 	.word	0x00000000
     ac0:	9d200e41 	.word	0x9d200e41
     ac4:	41039e04 	.word	0x41039e04
     ac8:	de481d0d 	.word	0xde481d0d
     acc:	001f0cdd 	.word	0x001f0cdd
     ad0:	0000001c 	.word	0x0000001c
     ad4:	00000510 	.word	0x00000510
     ad8:	000137ec 	.word	0x000137ec
     adc:	00000000 	.word	0x00000000
     ae0:	0000007c 	.word	0x0000007c
     ae4:	00000000 	.word	0x00000000
     ae8:	5d100e41 	.word	0x5d100e41
     aec:	0000000e 	.word	0x0000000e
     af0:	0000001c 	.word	0x0000001c
     af4:	00000510 	.word	0x00000510
     af8:	00013868 	.word	0x00013868
     afc:	00000000 	.word	0x00000000
     b00:	0000004c 	.word	0x0000004c
     b04:	00000000 	.word	0x00000000
     b08:	51100e41 	.word	0x51100e41
     b0c:	0000000e 	.word	0x0000000e
     b10:	00000024 	.word	0x00000024
     b14:	00000510 	.word	0x00000510
     b18:	000138b4 	.word	0x000138b4
     b1c:	00000000 	.word	0x00000000
     b20:	000000dc 	.word	0x000000dc
     b24:	00000000 	.word	0x00000000
     b28:	9d300e41 	.word	0x9d300e41
     b2c:	41059e06 	.word	0x41059e06
     b30:	de741d0d 	.word	0xde741d0d
     b34:	001f0cdd 	.word	0x001f0cdd
     b38:	0000002c 	.word	0x0000002c
     b3c:	00000510 	.word	0x00000510
     b40:	00013990 	.word	0x00013990
     b44:	00000000 	.word	0x00000000
     b48:	00000120 	.word	0x00000120
     b4c:	00000000 	.word	0x00000000
     b50:	9d400e41 	.word	0x9d400e41
     b54:	41079e08 	.word	0x41079e08
     b58:	45021d0d 	.word	0x45021d0d
     b5c:	1f0cddde 	.word	0x1f0cddde
	...
     b68:	0000002c 	.word	0x0000002c
     b6c:	00000510 	.word	0x00000510
     b70:	00013ab0 	.word	0x00013ab0
     b74:	00000000 	.word	0x00000000
     b78:	000001a4 	.word	0x000001a4
     b7c:	00000000 	.word	0x00000000
     b80:	9d500e41 	.word	0x9d500e41
     b84:	41099e0a 	.word	0x41099e0a
     b88:	66021d0d 	.word	0x66021d0d
     b8c:	1f0cddde 	.word	0x1f0cddde
	...
     b98:	0000002c 	.word	0x0000002c
     b9c:	00000510 	.word	0x00000510
     ba0:	00013c54 	.word	0x00013c54
     ba4:	00000000 	.word	0x00000000
     ba8:	00000204 	.word	0x00000204
     bac:	00000000 	.word	0x00000000
     bb0:	9d500e41 	.word	0x9d500e41
     bb4:	41099e0a 	.word	0x41099e0a
     bb8:	7e021d0d 	.word	0x7e021d0d
     bbc:	1f0cddde 	.word	0x1f0cddde
	...
     bc8:	0000002c 	.word	0x0000002c
     bcc:	00000510 	.word	0x00000510
     bd0:	00013e58 	.word	0x00013e58
     bd4:	00000000 	.word	0x00000000
     bd8:	00000158 	.word	0x00000158
     bdc:	00000000 	.word	0x00000000
     be0:	9d400e41 	.word	0x9d400e41
     be4:	41079e08 	.word	0x41079e08
     be8:	53021d0d 	.word	0x53021d0d
     bec:	1f0cddde 	.word	0x1f0cddde
	...
     bf8:	00000024 	.word	0x00000024
     bfc:	00000510 	.word	0x00000510
     c00:	00013fb0 	.word	0x00013fb0
     c04:	00000000 	.word	0x00000000
     c08:	00000070 	.word	0x00000070
     c0c:	00000000 	.word	0x00000000
     c10:	9d300e41 	.word	0x9d300e41
     c14:	41059e06 	.word	0x41059e06
     c18:	de591d0d 	.word	0xde591d0d
     c1c:	001f0cdd 	.word	0x001f0cdd
     c20:	0000002c 	.word	0x0000002c
     c24:	00000510 	.word	0x00000510
     c28:	00014020 	.word	0x00014020
     c2c:	00000000 	.word	0x00000000
     c30:	0000016c 	.word	0x0000016c
     c34:	00000000 	.word	0x00000000
     c38:	9d300e41 	.word	0x9d300e41
     c3c:	41059e06 	.word	0x41059e06
     c40:	58021d0d 	.word	0x58021d0d
     c44:	1f0cddde 	.word	0x1f0cddde
	...
     c50:	0000000c 	.word	0x0000000c
     c54:	ffffffff 	.word	0xffffffff
     c58:	78040001 	.word	0x78040001
     c5c:	001f0c1e 	.word	0x001f0c1e
     c60:	00000024 	.word	0x00000024
     c64:	00000c50 	.word	0x00000c50
     c68:	0001418c 	.word	0x0001418c
     c6c:	00000000 	.word	0x00000000
     c70:	000000c8 	.word	0x000000c8
     c74:	00000000 	.word	0x00000000
     c78:	9d300e41 	.word	0x9d300e41
     c7c:	41059e06 	.word	0x41059e06
     c80:	de6f1d0d 	.word	0xde6f1d0d
     c84:	001f0cdd 	.word	0x001f0cdd
     c88:	0000002c 	.word	0x0000002c
     c8c:	00000c50 	.word	0x00000c50
     c90:	00014254 	.word	0x00014254
     c94:	00000000 	.word	0x00000000
     c98:	000000b0 	.word	0x000000b0
     c9c:	00000000 	.word	0x00000000
     ca0:	9d200e41 	.word	0x9d200e41
     ca4:	41039e04 	.word	0x41039e04
     ca8:	93411d0d 	.word	0x93411d0d
     cac:	ddde6802 	.word	0xddde6802
     cb0:	001f0cd3 	.word	0x001f0cd3
     cb4:	00000000 	.word	0x00000000
     cb8:	00000014 	.word	0x00000014
     cbc:	00000c50 	.word	0x00000c50
     cc0:	00014304 	.word	0x00014304
     cc4:	00000000 	.word	0x00000000
     cc8:	0000000c 	.word	0x0000000c
     ccc:	00000000 	.word	0x00000000
     cd0:	00000014 	.word	0x00000014
     cd4:	00000c50 	.word	0x00000c50
     cd8:	00014310 	.word	0x00014310
     cdc:	00000000 	.word	0x00000000
     ce0:	0000000c 	.word	0x0000000c
     ce4:	00000000 	.word	0x00000000
     ce8:	00000024 	.word	0x00000024
     cec:	00000c50 	.word	0x00000c50
     cf0:	0001431c 	.word	0x0001431c
     cf4:	00000000 	.word	0x00000000
     cf8:	0000006c 	.word	0x0000006c
     cfc:	00000000 	.word	0x00000000
     d00:	9d300e41 	.word	0x9d300e41
     d04:	41059e06 	.word	0x41059e06
     d08:	de581d0d 	.word	0xde581d0d
     d0c:	001f0cdd 	.word	0x001f0cdd
     d10:	0000001c 	.word	0x0000001c
     d14:	00000c50 	.word	0x00000c50
     d18:	00014388 	.word	0x00014388
     d1c:	00000000 	.word	0x00000000
     d20:	000000e4 	.word	0x000000e4
     d24:	00000000 	.word	0x00000000
     d28:	77200e41 	.word	0x77200e41
     d2c:	0000000e 	.word	0x0000000e
     d30:	0000001c 	.word	0x0000001c
     d34:	00000c50 	.word	0x00000c50
     d38:	0001446c 	.word	0x0001446c
     d3c:	00000000 	.word	0x00000000
     d40:	000000f0 	.word	0x000000f0
     d44:	00000000 	.word	0x00000000
     d48:	7a200e41 	.word	0x7a200e41
     d4c:	0000000e 	.word	0x0000000e
     d50:	0000000c 	.word	0x0000000c
     d54:	ffffffff 	.word	0xffffffff
     d58:	78040001 	.word	0x78040001
     d5c:	001f0c1e 	.word	0x001f0c1e
     d60:	0000001c 	.word	0x0000001c
     d64:	00000d50 	.word	0x00000d50
     d68:	0001455c 	.word	0x0001455c
     d6c:	00000000 	.word	0x00000000
     d70:	000000dc 	.word	0x000000dc
     d74:	00000000 	.word	0x00000000
     d78:	75300e41 	.word	0x75300e41
     d7c:	0000000e 	.word	0x0000000e
     d80:	00000024 	.word	0x00000024
     d84:	00000d50 	.word	0x00000d50
     d88:	00014638 	.word	0x00014638
     d8c:	00000000 	.word	0x00000000
     d90:	00000028 	.word	0x00000028
     d94:	00000000 	.word	0x00000000
     d98:	9d200e41 	.word	0x9d200e41
     d9c:	41039e04 	.word	0x41039e04
     da0:	de471d0d 	.word	0xde471d0d
     da4:	001f0cdd 	.word	0x001f0cdd
     da8:	0000001c 	.word	0x0000001c
     dac:	00000d50 	.word	0x00000d50
     db0:	00014660 	.word	0x00014660
     db4:	00000000 	.word	0x00000000
     db8:	000000b0 	.word	0x000000b0
     dbc:	00000000 	.word	0x00000000
     dc0:	6a200e41 	.word	0x6a200e41
     dc4:	0000000e 	.word	0x0000000e
     dc8:	0000001c 	.word	0x0000001c
     dcc:	00000d50 	.word	0x00000d50
     dd0:	00014710 	.word	0x00014710
     dd4:	00000000 	.word	0x00000000
     dd8:	00000040 	.word	0x00000040
     ddc:	00000000 	.word	0x00000000
     de0:	4e100e41 	.word	0x4e100e41
     de4:	0000000e 	.word	0x0000000e
     de8:	0000001c 	.word	0x0000001c
     dec:	00000d50 	.word	0x00000d50
     df0:	00014750 	.word	0x00014750
     df4:	00000000 	.word	0x00000000
     df8:	0000019c 	.word	0x0000019c
     dfc:	00000000 	.word	0x00000000
     e00:	02200e41 	.word	0x02200e41
     e04:	00000e65 	.word	0x00000e65
     e08:	0000001c 	.word	0x0000001c
     e0c:	00000d50 	.word	0x00000d50
     e10:	000148ec 	.word	0x000148ec
     e14:	00000000 	.word	0x00000000
     e18:	000001a4 	.word	0x000001a4
     e1c:	00000000 	.word	0x00000000
     e20:	02200e41 	.word	0x02200e41
     e24:	00000e67 	.word	0x00000e67
     e28:	0000001c 	.word	0x0000001c
     e2c:	00000d50 	.word	0x00000d50
     e30:	00014a90 	.word	0x00014a90
     e34:	00000000 	.word	0x00000000
     e38:	00000050 	.word	0x00000050
     e3c:	00000000 	.word	0x00000000
     e40:	52200e41 	.word	0x52200e41
     e44:	0000000e 	.word	0x0000000e
     e48:	0000000c 	.word	0x0000000c
     e4c:	ffffffff 	.word	0xffffffff
     e50:	78040001 	.word	0x78040001
     e54:	001f0c1e 	.word	0x001f0c1e
     e58:	0000001c 	.word	0x0000001c
     e5c:	00000e48 	.word	0x00000e48
     e60:	00014ae0 	.word	0x00014ae0
     e64:	00000000 	.word	0x00000000
     e68:	00000028 	.word	0x00000028
     e6c:	00000000 	.word	0x00000000
     e70:	48100e41 	.word	0x48100e41
     e74:	0000000e 	.word	0x0000000e
     e78:	0000001c 	.word	0x0000001c
     e7c:	00000e48 	.word	0x00000e48
     e80:	00014b08 	.word	0x00014b08
     e84:	00000000 	.word	0x00000000
     e88:	00000018 	.word	0x00000018
     e8c:	00000000 	.word	0x00000000
     e90:	44100e41 	.word	0x44100e41
     e94:	0000000e 	.word	0x0000000e
     e98:	0000001c 	.word	0x0000001c
     e9c:	00000e48 	.word	0x00000e48
     ea0:	00014b20 	.word	0x00014b20
     ea4:	00000000 	.word	0x00000000
     ea8:	00000014 	.word	0x00000014
     eac:	00000000 	.word	0x00000000
     eb0:	43100e41 	.word	0x43100e41
     eb4:	0000000e 	.word	0x0000000e
     eb8:	00000024 	.word	0x00000024
     ebc:	00000e48 	.word	0x00000e48
     ec0:	00014b34 	.word	0x00014b34
     ec4:	00000000 	.word	0x00000000
     ec8:	00000048 	.word	0x00000048
     ecc:	00000000 	.word	0x00000000
     ed0:	9d200e41 	.word	0x9d200e41
     ed4:	41039e04 	.word	0x41039e04
     ed8:	de4f1d0d 	.word	0xde4f1d0d
     edc:	001f0cdd 	.word	0x001f0cdd
     ee0:	0000002c 	.word	0x0000002c
     ee4:	00000e48 	.word	0x00000e48
     ee8:	00014b7c 	.word	0x00014b7c
     eec:	00000000 	.word	0x00000000
     ef0:	00000174 	.word	0x00000174
     ef4:	00000000 	.word	0x00000000
     ef8:	9d200e41 	.word	0x9d200e41
     efc:	41039e04 	.word	0x41039e04
     f00:	5a021d0d 	.word	0x5a021d0d
     f04:	1f0cddde 	.word	0x1f0cddde
	...
     f10:	00000024 	.word	0x00000024
     f14:	00000e48 	.word	0x00000e48
     f18:	00014cf0 	.word	0x00014cf0
     f1c:	00000000 	.word	0x00000000
     f20:	00000054 	.word	0x00000054
     f24:	00000000 	.word	0x00000000
     f28:	9d200e41 	.word	0x9d200e41
     f2c:	41039e04 	.word	0x41039e04
     f30:	de521d0d 	.word	0xde521d0d
     f34:	001f0cdd 	.word	0x001f0cdd
     f38:	0000000c 	.word	0x0000000c
     f3c:	ffffffff 	.word	0xffffffff
     f40:	78040001 	.word	0x78040001
     f44:	001f0c1e 	.word	0x001f0c1e
     f48:	0000002c 	.word	0x0000002c
     f4c:	00000f38 	.word	0x00000f38
     f50:	00014d44 	.word	0x00014d44
     f54:	00000000 	.word	0x00000000
     f58:	000001d4 	.word	0x000001d4
     f5c:	00000000 	.word	0x00000000
     f60:	9d400e41 	.word	0x9d400e41
     f64:	41079e08 	.word	0x41079e08
     f68:	72021d0d 	.word	0x72021d0d
     f6c:	1f0cddde 	.word	0x1f0cddde
	...
     f78:	00000024 	.word	0x00000024
     f7c:	00000f38 	.word	0x00000f38
     f80:	00014f18 	.word	0x00014f18
     f84:	00000000 	.word	0x00000000
     f88:	00000080 	.word	0x00000080
     f8c:	00000000 	.word	0x00000000
     f90:	9d300e41 	.word	0x9d300e41
     f94:	41059e06 	.word	0x41059e06
     f98:	de5d1d0d 	.word	0xde5d1d0d
     f9c:	001f0cdd 	.word	0x001f0cdd
     fa0:	00000014 	.word	0x00000014
     fa4:	00000f38 	.word	0x00000f38
     fa8:	00014f98 	.word	0x00014f98
     fac:	00000000 	.word	0x00000000
     fb0:	00000010 	.word	0x00000010
     fb4:	00000000 	.word	0x00000000
     fb8:	00000014 	.word	0x00000014
     fbc:	00000f38 	.word	0x00000f38
     fc0:	00014fa8 	.word	0x00014fa8
     fc4:	00000000 	.word	0x00000000
     fc8:	00000008 	.word	0x00000008
     fcc:	00000000 	.word	0x00000000
     fd0:	0000001c 	.word	0x0000001c
     fd4:	00000f38 	.word	0x00000f38
     fd8:	00014fb0 	.word	0x00014fb0
     fdc:	00000000 	.word	0x00000000
     fe0:	000000e8 	.word	0x000000e8
     fe4:	00000000 	.word	0x00000000
     fe8:	78100e41 	.word	0x78100e41
     fec:	0000000e 	.word	0x0000000e
     ff0:	0000001c 	.word	0x0000001c
     ff4:	00000f38 	.word	0x00000f38
     ff8:	00015098 	.word	0x00015098
     ffc:	00000000 	.word	0x00000000
    1000:	0000014c 	.word	0x0000014c
    1004:	00000000 	.word	0x00000000
    1008:	02200e41 	.word	0x02200e41
    100c:	00000e51 	.word	0x00000e51
    1010:	0000000c 	.word	0x0000000c
    1014:	ffffffff 	.word	0xffffffff
    1018:	78040001 	.word	0x78040001
    101c:	001f0c1e 	.word	0x001f0c1e
    1020:	00000024 	.word	0x00000024
    1024:	00001010 	.word	0x00001010
    1028:	000151e4 	.word	0x000151e4
    102c:	00000000 	.word	0x00000000
    1030:	000000a4 	.word	0x000000a4
    1034:	00000000 	.word	0x00000000
    1038:	9d200e41 	.word	0x9d200e41
    103c:	41039e04 	.word	0x41039e04
    1040:	de661d0d 	.word	0xde661d0d
    1044:	001f0cdd 	.word	0x001f0cdd
    1048:	00000024 	.word	0x00000024
    104c:	00001010 	.word	0x00001010
    1050:	00015288 	.word	0x00015288
    1054:	00000000 	.word	0x00000000
    1058:	0000001c 	.word	0x0000001c
    105c:	00000000 	.word	0x00000000
    1060:	9d200e41 	.word	0x9d200e41
    1064:	41039e04 	.word	0x41039e04
    1068:	de441d0d 	.word	0xde441d0d
    106c:	001f0cdd 	.word	0x001f0cdd
    1070:	00000024 	.word	0x00000024
    1074:	00001010 	.word	0x00001010
    1078:	000152a4 	.word	0x000152a4
    107c:	00000000 	.word	0x00000000
    1080:	00000030 	.word	0x00000030
    1084:	00000000 	.word	0x00000000
    1088:	9d200e41 	.word	0x9d200e41
    108c:	41039e04 	.word	0x41039e04
    1090:	de491d0d 	.word	0xde491d0d
    1094:	001f0cdd 	.word	0x001f0cdd
    1098:	0000000c 	.word	0x0000000c
    109c:	ffffffff 	.word	0xffffffff
    10a0:	78040001 	.word	0x78040001
    10a4:	001f0c1e 	.word	0x001f0c1e
    10a8:	00000024 	.word	0x00000024
    10ac:	00001098 	.word	0x00001098
    10b0:	000152d4 	.word	0x000152d4
    10b4:	00000000 	.word	0x00000000
    10b8:	00000024 	.word	0x00000024
    10bc:	00000000 	.word	0x00000000
    10c0:	9d200e41 	.word	0x9d200e41
    10c4:	41039e04 	.word	0x41039e04
    10c8:	00001d0d 	.word	0x00001d0d
    10cc:	00000000 	.word	0x00000000
    10d0:	00000024 	.word	0x00000024
    10d4:	00001098 	.word	0x00001098
    10d8:	000152f8 	.word	0x000152f8
    10dc:	00000000 	.word	0x00000000
    10e0:	0000002c 	.word	0x0000002c
    10e4:	00000000 	.word	0x00000000
    10e8:	9d200e41 	.word	0x9d200e41
    10ec:	41039e04 	.word	0x41039e04
    10f0:	00001d0d 	.word	0x00001d0d
    10f4:	00000000 	.word	0x00000000
    10f8:	00000024 	.word	0x00000024
    10fc:	00001098 	.word	0x00001098
    1100:	00015324 	.word	0x00015324
    1104:	00000000 	.word	0x00000000
    1108:	0000005c 	.word	0x0000005c
    110c:	00000000 	.word	0x00000000
    1110:	9d100e41 	.word	0x9d100e41
    1114:	41019e02 	.word	0x41019e02
    1118:	00001d0d 	.word	0x00001d0d
    111c:	00000000 	.word	0x00000000
